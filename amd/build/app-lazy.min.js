define(["core/ajax","jquery"], function(__WEBPACK_EXTERNAL_MODULE_core_ajax__, __WEBPACK_EXTERNAL_MODULE_jquery__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/ancestors/index.js":
/*!*****************************************!*\
  !*** ./node_modules/ancestors/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = parents\n\nfunction parents(node, filter) {\n  var out = []\n\n  filter = filter || noop\n\n  do {\n    out.push(node)\n    node = node.parentNode\n  } while(node && node.tagName && filter(node))\n\n  return out.slice(1)\n}\n\nfunction noop(n) {\n  return true\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYW5jZXN0b3JzL2luZGV4LmpzPzFhM2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2FuY2VzdG9ycy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcGFyZW50c1xuXG5mdW5jdGlvbiBwYXJlbnRzKG5vZGUsIGZpbHRlcikge1xuICB2YXIgb3V0ID0gW11cblxuICBmaWx0ZXIgPSBmaWx0ZXIgfHwgbm9vcFxuXG4gIGRvIHtcbiAgICBvdXQucHVzaChub2RlKVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGVcbiAgfSB3aGlsZShub2RlICYmIG5vZGUudGFnTmFtZSAmJiBmaWx0ZXIobm9kZSkpXG5cbiAgcmV0dXJuIG91dC5zbGljZSgxKVxufVxuXG5mdW5jdGlvbiBub29wKG4pIHtcbiAgcmV0dXJuIHRydWVcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ancestors/index.js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=script&lang=js&":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _config_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/constants */ \"./src/config/constants.js\");\n/* harmony import */ var _util_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../util/style */ \"./src/util/style.js\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: \"AnnotationToolbarPopover\",\n  props: {\n    arrowDirection: {\n      type: Number,\n      default: _config_constants__WEBPACK_IMPORTED_MODULE_0__[\"ArrowDirection\"].UP\n    },\n    highlightingOptions: {\n      type: Array,\n      default: () => []\n    },\n    showDelete: {\n      type: Boolean,\n      default: false\n    },\n    left: {\n      type: Number,\n      required: true\n    },\n    top: {\n      type: Number,\n      required: true\n    },\n    visible: {\n      type: Boolean,\n      default: false\n    },\n    zIndex: {\n      type: Number,\n      default: 999999\n    }\n  },\n\n  data() {\n    return {\n      ArrowDirection: _config_constants__WEBPACK_IMPORTED_MODULE_0__[\"ArrowDirection\"]\n    };\n  },\n\n  computed: {\n    style() {\n      return {\n        left: Object(_util_style__WEBPACK_IMPORTED_MODULE_1__[\"toPx\"])(this.left),\n        top: Object(_util_style__WEBPACK_IMPORTED_MODULE_1__[\"toPx\"])(this.top),\n        visibility: this.visible ? \"visible\" : \"hidden\",\n        zIndex: this.zIndex\n      };\n    }\n\n  },\n  methods: {\n    arrowHeight() {\n      const ref = this.arrowDirection === _config_constants__WEBPACK_IMPORTED_MODULE_0__[\"ArrowDirection\"].UP ? 'arrowUp' : 'arrowDown';\n      return Object(_util_style__WEBPACK_IMPORTED_MODULE_1__[\"toNumber\"])(window.getComputedStyle(this.$refs[ref]).getPropertyValue('border-top-width'));\n    },\n\n    boundingClientRect() {\n      return this.$refs.annotationToolbarPopover.getBoundingClientRect();\n    },\n\n    height() {\n      return this.boundingClientRect().height;\n    },\n\n    width() {\n      return this.boundingClientRect().width;\n    }\n\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2NvbXBvbmVudHMvYW5ub3RhdGlvbi9Bbm5vdGF0aW9uVG9vbGJhclBvcG92ZXIudnVlPzY5YzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0NBO0FBQ0E7QUFFQTtBQUNBLGtDQURBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFBQSxLQURBO0FBRUE7QUFBQTtBQUFBO0FBQUEsS0FGQTtBQUdBO0FBQUE7QUFBQTtBQUFBLEtBSEE7QUFJQTtBQUFBO0FBQUE7QUFBQSxLQUpBO0FBS0E7QUFBQTtBQUFBO0FBQUEsS0FMQTtBQU1BO0FBQUE7QUFBQTtBQUFBLEtBTkE7QUFPQTtBQUFBO0FBQUE7QUFBQTtBQVBBLEdBRkE7O0FBV0E7QUFDQTtBQUNBO0FBREE7QUFHQSxHQWZBOztBQWdCQTtBQUNBO0FBQ0E7QUFDQSxpRkFEQTtBQUVBLCtFQUZBO0FBR0EsdURBSEE7QUFJQTtBQUpBO0FBTUE7O0FBUkEsR0FoQkE7QUEwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUpBOztBQUtBO0FBQ0E7QUFDQSxLQVBBOztBQVFBO0FBQ0E7QUFDQSxLQVZBOztBQVdBO0FBQ0E7QUFDQTs7QUFiQTtBQTFCQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPyEuL3NyYy9jb21wb25lbnRzL2Fubm90YXRpb24vQW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyYuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxkaXZcbiAgICAgIDpzdHlsZT1cInN0eWxlXCJcbiAgICAgIGlkPVwiYW5ub3RhdGlvbi10b29sYmFyLXBvcG92ZXJcIlxuICAgICAgcmVmPVwiYW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyXCJcbiAgPlxuICAgIDxkaXZcbiAgICAgICAgdi1zaG93PVwiYXJyb3dEaXJlY3Rpb24gPT09IEFycm93RGlyZWN0aW9uLlVQXCJcbiAgICAgICAgY2xhc3M9XCJhcnJvdy11cCBteC1hdXRvXCJcbiAgICAgICAgcmVmPVwiYXJyb3dVcFwiXG4gICAgPjwvZGl2PlxuICAgIDxkaXZcbiAgICAgICAgaWQ9XCJhbm5vdGF0aW9uLXRvb2xiYXJcIlxuICAgICAgICBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgcC0xXCJcbiAgICAgICAgOmNsYXNzPVwie1xuICAgICAgICAgICAgJ3NoYWRvdy1kb3duJzogYXJyb3dEaXJlY3Rpb24gPT09IEFycm93RGlyZWN0aW9uLkRPV04sXG4gICAgICAgICAgICAnc2hhZG93LXVwJzogYXJyb3dEaXJlY3Rpb24gPT09IEFycm93RGlyZWN0aW9uLlVQXG4gICAgICAgICAgfVwiXG4gICAgPlxuICAgICAgPGRpdlxuICAgICAgICAgIHYtZm9yPVwiKG9wdGlvbiwgaW5kZXgpIGluIGhpZ2hsaWdodGluZ09wdGlvbnNcIlxuICAgICAgICAgIGNsYXNzPVwiYW5ub3RhdGlvbi10b29sYmFyLWl0ZW0gZG90IGxvbmdwYWdlLWhpZ2hsaWdodFwiXG4gICAgICAgICAgOmNsYXNzPVwiW29wdGlvbl1cIlxuICAgICAgICAgIDpzdHlsZT1cIm9wdGlvblwiXG4gICAgICAgICAgOmtleT1cImluZGV4XCJcbiAgICAgICAgICBAY2xpY2sucHJldmVudD1cIiRlbWl0KCdoaWdobGlnaHQnLCBvcHRpb24pXCJcbiAgICAgID5BPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiYW5ub3RhdGlvbi10b29sYmFyLWl0ZW1cIiB2LXNob3c9XCJzaG93RGVsZXRlXCI+XG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtdHJhc2hcIiBAY2xpY2sucHJldmVudD1cIiRlbWl0KCdkZWxldGUnKVwiPjwvaT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXZcbiAgICAgICAgdi1zaG93PVwiYXJyb3dEaXJlY3Rpb24gPT09IEFycm93RGlyZWN0aW9uLkRPV05cIlxuICAgICAgICBjbGFzcz1cImFycm93LWRvd24gbXgtYXV0b1wiXG4gICAgICAgIHJlZj1cImFycm93RG93blwiXG4gICAgPjwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCB7IEFycm93RGlyZWN0aW9uIH0gZnJvbSBcIi4uLy4uL2NvbmZpZy9jb25zdGFudHNcIjtcbiAgaW1wb3J0IHsgdG9OdW1iZXIsIHRvUHggfSBmcm9tIFwiLi4vLi4vdXRpbC9zdHlsZVwiO1xuXG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiBcIkFubm90YXRpb25Ub29sYmFyUG9wb3ZlclwiLFxuICAgIHByb3BzOiB7XG4gICAgICBhcnJvd0RpcmVjdGlvbjoge3R5cGU6IE51bWJlciwgZGVmYXVsdDogQXJyb3dEaXJlY3Rpb24uVVB9LFxuICAgICAgaGlnaGxpZ2h0aW5nT3B0aW9uczoge3R5cGU6IEFycmF5LCBkZWZhdWx0OiAoKSA9PiBbXX0sXG4gICAgICBzaG93RGVsZXRlOiB7dHlwZTogQm9vbGVhbiwgZGVmYXVsdDogZmFsc2V9LFxuICAgICAgbGVmdDoge3R5cGU6IE51bWJlciwgcmVxdWlyZWQ6IHRydWV9LFxuICAgICAgdG9wOiB7dHlwZTogTnVtYmVyLCByZXF1aXJlZDogdHJ1ZX0sXG4gICAgICB2aXNpYmxlOiB7dHlwZTogQm9vbGVhbiwgZGVmYXVsdDogZmFsc2V9LFxuICAgICAgekluZGV4OiB7dHlwZTogTnVtYmVyLCBkZWZhdWx0OiA5OTk5OTl9LFxuICAgIH0sXG4gICAgZGF0YSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIEFycm93RGlyZWN0aW9uLFxuICAgICAgfTtcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICBzdHlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsZWZ0OiB0b1B4KHRoaXMubGVmdCksXG4gICAgICAgICAgdG9wOiB0b1B4KHRoaXMudG9wKSxcbiAgICAgICAgICB2aXNpYmlsaXR5OiB0aGlzLnZpc2libGUgPyBcInZpc2libGVcIiA6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgekluZGV4OiB0aGlzLnpJbmRleCxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICBhcnJvd0hlaWdodCgpIHtcbiAgICAgICAgY29uc3QgcmVmID0gdGhpcy5hcnJvd0RpcmVjdGlvbiA9PT0gQXJyb3dEaXJlY3Rpb24uVVAgPyAnYXJyb3dVcCcgOiAnYXJyb3dEb3duJztcbiAgICAgICAgcmV0dXJuIHRvTnVtYmVyKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuJHJlZnNbcmVmXSkuZ2V0UHJvcGVydHlWYWx1ZSgnYm9yZGVyLXRvcC13aWR0aCcpKTtcbiAgICAgIH0sXG4gICAgICBib3VuZGluZ0NsaWVudFJlY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRyZWZzLmFubm90YXRpb25Ub29sYmFyUG9wb3Zlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIH0sXG4gICAgICBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgIH0sXG4gICAgICB3aWR0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XG5AaW1wb3J0IFwiLi4vLi4vc3R5bGVzL21haW4uc2Nzc1wiO1xuQGltcG9ydCBcIn5ob3Zlci5jc3NcIjtcblxuI2Fubm90YXRpb24tdG9vbGJhci1wb3BvdmVyIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZm9udC1zaXplOiAxcmVtO1xuXG4gICNhbm5vdGF0aW9uLXRvb2xiYXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB9XG5cbiAgLnNoYWRvdy1kb3duIHtcbiAgICBib3gtc2hhZG93OiAwIDJweCA0cHggMnB4IHJnYmEoMzksIDQzLCA0OSwgMC4yKSAhaW1wb3J0YW50O1xuICB9XG5cbiAgLnNoYWRvdy11cCB7XG4gICAgYm94LXNoYWRvdzogMCAtMnB4IDRweCAycHggcmdiYSgzOSwgNDMsIDQ5LCAwLjIpICFpbXBvcnRhbnQ7XG4gIH1cbn1cblxuLmFubm90YXRpb24tdG9vbGJhci1pdGVtIHtcbiAgQGV4dGVuZCAuaHZyLWdyb3cgIW9wdGlvbmFsO1xuICBtYXJnaW46IDAuMTI1cmVtO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5kb3Qge1xuICBoZWlnaHQ6IDIwcHg7XG4gIHdpZHRoOiAyMHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmJiO1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XG59XG5cbiRhcnJvdy1jb2xvcjogd2hpdGU7XG5cbkBtaXhpbiBhcnJvdyB7XG4gIHdpZHRoOiAwO1xuICBoZWlnaHQ6IDA7XG4gIGJvcmRlci1sZWZ0OiA1cHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1yaWdodDogNXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItdG9wOiA1cHggc29saWQgJGFycm93LWNvbG9yO1xufVxuXG4uYXJyb3ctZG93biB7XG4gIEBpbmNsdWRlIGFycm93O1xuICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbn1cblxuLmFycm93LXVwIHtcbiAgQGluY2x1ZGUgYXJyb3c7XG4gIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7XG4gIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcbn1cbjwvc3R5bGU+XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/styles/main.scss":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/styles/main.scss ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.i, \".tools {\\n  height: 30px;\\n  padding: 5px 10px;\\n  background: #aaa;\\n  color: #000;\\n  border-radius: 5px;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  /*transform: translate(-50%, -100%);*/\\n  transition: 0.2s all;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  z-index: 700; }\\n\\n.tools:after {\\n  content: '';\\n  position: absolute;\\n  left: 50%;\\n  bottom: -6px;\\n  transform: translateX(-50%);\\n  transition: 0.2s all;\\n  width: 0;\\n  height: 0;\\n  border-left: 6px solid transparent;\\n  border-right: 6px solid transparent;\\n  border-top: 6px solid #aaa; }\\n\\n.tools:hover {\\n  background: #eee; }\\n\\n.tools:hover::after {\\n  border-top: 6px solid #eee; }\\n\\n.item {\\n  color: #000; }\\n\\n.mark-bookmark {\\n  background-color: #aaa;\\n  border-radius: 3px;\\n  padding: 1px 0px; }\\n\\n.longpage-nav ul#search-results {\\n  display: inline-block; }\\n\\n.longpage-nav ul#search-results li {\\n  font-size: 0.8em;\\n  display: inline-block; }\\n\\n/* Medium devices (tablets, 768px and up) */\\n@media (min-width: 768px) and (max-width: 991.98px) {\\n  #longpage-search-form #search-string {\\n    height: 17px;\\n    font-size: 1em;\\n    vertical-align: middle; }\\n  #longpage-search-form #search-full-text {\\n    font-size: 1em;\\n    line-height: 1em; }\\n  #longpage-search-form {\\n    display: inline !important;\\n    float: right;\\n    margin-right: 30px; } }\\n\\n/* Style */\\n.longpage-toc-container a {\\n  cursor: pointer; }\\n\\n.longpage-toc-container a:hover {\\n  text-decoration-style: solid; }\\n\\n/*\\n * Based on Hypothesis client's styles (see https://github.com/hypothesis/client):\\n *   - src/styles/annotator/highlights.scss\\n */\\n/*\\n * Based on Hypothesis client's styles (see https://github.com/hypothesis/client):\\n *   - src/styles/mixins/a11y.scss\\n */\\n@use 'sass:color';\\n.longpage-highlights-always-on .longpage-highlight {\\n  cursor: pointer; }\\n  .longpage-highlights-always-on .longpage-highlight.bg-yellow {\\n    background-color: #FFFF00; }\\n    .longpage-highlights-always-on .longpage-highlight.bg-yellow .longpage-highlight {\\n      background-color: #bfbf00; }\\n    .longpage-highlights-always-on .longpage-highlight.bg-yellow.longpage-highlight-focused {\\n      background-color: #ffff40 !important; }\\n      .longpage-highlights-always-on .longpage-highlight.bg-yellow.longpage-highlight-focused .longpage-highlight {\\n        background-color: transparent !important; }\\n  .longpage-highlights-always-on .longpage-highlight.bg-blue {\\n    background-color: #00FFFF; }\\n    .longpage-highlights-always-on .longpage-highlight.bg-blue .longpage-highlight {\\n      background-color: #00bfbf; }\\n    .longpage-highlights-always-on .longpage-highlight.bg-blue.longpage-highlight-focused {\\n      background-color: #40ffff !important; }\\n      .longpage-highlights-always-on .longpage-highlight.bg-blue.longpage-highlight-focused .longpage-highlight {\\n        background-color: transparent !important; }\\n  .longpage-highlights-always-on .longpage-highlight.bg-magenta {\\n    background-color: #FF84F5; }\\n    .longpage-highlights-always-on .longpage-highlight.bg-magenta .longpage-highlight {\\n      background-color: #ff23ed; }\\n    .longpage-highlights-always-on .longpage-highlight.bg-magenta.longpage-highlight-focused {\\n      background-color: #ffa3f8 !important; }\\n      .longpage-highlights-always-on .longpage-highlight.bg-magenta.longpage-highlight-focused .longpage-highlight {\\n        background-color: transparent !important; }\\n  .longpage-highlights-always-on .longpage-highlight.bg-green {\\n    background-color: #93E13C; }\\n    .longpage-highlights-always-on .longpage-highlight.bg-green .longpage-highlight {\\n      background-color: #6fb91d; }\\n    .longpage-highlights-always-on .longpage-highlight.bg-green.longpage-highlight-focused {\\n      background-color: #aee96d !important; }\\n      .longpage-highlights-always-on .longpage-highlight.bg-green.longpage-highlight-focused .longpage-highlight {\\n        background-color: transparent !important; }\\n  .longpage-highlights-always-on .longpage-highlight::before {\\n    position: absolute;\\n    clip: rect(0 0 0 0);\\n    overflow: hidden;\\n    content: ' highlight start '; }\\n  .longpage-highlights-always-on .longpage-highlight::after {\\n    position: absolute;\\n    clip: rect(0 0 0 0);\\n    overflow: hidden;\\n    content: ' highlight end '; }\\n\\nhtml {\\n  scroll-behavior: smooth;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale; }\\n\\n.last-modified {\\n  margin-top: 30px;\\n  text-align: center;\\n  font-size: 0.8em; }\\n\\n#longpage-navbar {\\n  height: auto;\\n  color: #333333;\\n  background-color: #ccc;\\n  position: relative;\\n  text-align: left;\\n  justify-content: space-between; }\\n\\n#longpage-navbar.title-toc {\\n  justify-content: left; }\\n\\n#longpage-navbar.header-not-at-top {\\n  position: fixed;\\n  top: 50px;\\n  left: 0;\\n  width: 100%;\\n  z-index: 1031; }\\n\\n.longpage-nav-btn {\\n  margin-top: 0; }\\n\\n#longpage-navbar .navbar-brand {\\n  color: #333;\\n  white-space: normal; }\\n\\n#top-of-site-pixel-anchor {\\n  position: absolute;\\n  width: 1px;\\n  height: 1px;\\n  top: 500px;\\n  left: 0; }\\n\\n.longpage-nav .nav-link {\\n  padding-top: 0;\\n  padding-bottom: 6px;\\n  font-size: 1em;\\n  padding-left: 4px;\\n  max-width: 100%;\\n  word-wrap: break-word;\\n  overflow-wrap: break-word;\\n  line-height: 1.2em;\\n  text-align: left; }\\n\\n.justify-text {\\n  padding-left: 0 !important;\\n  padding-right: 0 !important; }\\n\\n.longpage-footnote {\\n  color: #004C97;\\n  margin: 0;\\n  border: 0;\\n  padding: 0 !important;\\n  vertical-align: 0; }\\n\\n.longpage-footnote button {\\n  font-size: 1em;\\n  margin: 0;\\n  border: 0;\\n  padding: 0 !important;\\n  vertical-align: 0; }\\n\\n.longpage-footnote:hover button {\\n  background-color: #004C97;\\n  color: #fff;\\n  /* border-radius: 5px;\\n  border: solid 1px #004C97;\\n  */ }\\n\\n.longpage-citation {\\n  color: #004C97 !important;\\n  margin: 0;\\n  border: 0;\\n  padding: 0 !important;\\n  vertical-align: 0;\\n  font-size: 1em; }\\n\\n.longpage-container {\\n  color: #333333;\\n  font-family: Helvetica, Arial, sans-serif;\\n  font-size: 18px;\\n  max-width: 40em;\\n  /*text-align: justify;*/\\n  padding-left: 0 !important;\\n  padding-right: 0 !important;\\n  hyphens: auto; }\\n\\n.longpage-container > p {\\n  margin: 0px 0px 10px 0px;\\n  padding: 0 10px;\\n  line-height: 1.6em;\\n  font-size: 1em; }\\n\\n.longpage-container h2 {\\n  font-size: 1.6em;\\n  line-height: 1.25em;\\n  width: 100%;\\n  margin: 30px 0px 20px 0px;\\n  padding: 0px;\\n  font-weight: bold; }\\n\\n.longpage-container h3 {\\n  font-size: 1.2em;\\n  line-height: 1.51em;\\n  margin: 20px 0px 15px 0px;\\n  font-weight: bold;\\n  padding: 0 0 0 0px; }\\n\\n.longpage-container h4 {\\n  font-size: 1.1em;\\n  line-height: 1.41em;\\n  margin: 10px 0px 10px 0px;\\n  font-weight: bold;\\n  padding: 0 0 0 0px; }\\n\\n.longpage-container h5 {\\n  font-size: 1.0em;\\n  line-height: 1.41em;\\n  margin: 10px 0px 10px 0px;\\n  font-weight: bold;\\n  padding: 0 0 0 0px; }\\n\\n.longpage-container .longpage-image-block, .longpage-container .longpage-table-block {\\n  margin: 1em 0; }\\n\\n.longpage-container .longpage-image-block table {\\n  margin: 1em 0;\\n  border-bottom: solid 1px #333; }\\n\\n.longpage-container .longpage-image-block table tr:nth-child(1) {\\n  border-top: solid 1px #333;\\n  border-bottom: solid 1px #333; }\\n\\n.longpage-container .longpage-image-block table tr td {\\n  vertical-align: top;\\n  padding: 4px 8px 4px 0; }\\n\\n/* bad hack for 1D */\\n.longpage-container table {\\n  border-top: 2px solid #333;\\n  border-bottom: 2px solid #333;\\n  margin: 0 8px;\\n  width: 100%; }\\n\\n.longpage-container table thead {\\n  border-bottom: 2px solid #333; }\\n\\n.longpage-container table tbody tr td {\\n  border-bottom: 1px solid #ccc;\\n  border-left: 1px solid #ccc;\\n  border-right: 1px solid #ccc;\\n  padding: 4px 6px;\\n  vertical-align: top;\\n  margin: 0; }\\n\\n/* END bad hack for 1D */\\n.longpage-container .longpage-image-block img {\\n  max-height: 80vh;\\n  align-content: center; }\\n\\n.longpage-container .longpage-image-caption, .longpage-container .longpage-table-caption {\\n  font-size: 0.9em;\\n  font-weight: normal;\\n  margin-top: 0;\\n  margin-bottom: 1em;\\n  line-height: 1.4em;\\n  padding: 4px 6px; }\\n\\n.longpage-caption-label {\\n  font-weight: bold; }\\n\\n.longpage-container ul, .longpage-container ol {\\n  margin: 1em 0em 2em 0.2em;\\n  padding-left: 1.2em; }\\n\\n.longpage-container ul li, .longpage-container ol li {\\n  padding-left: 0.3em; }\\n\\n.longpage-center {\\n  text-align: center; }\\n\\n.longpage-assignment {\\n  background-color: #007bff17;\\n  border-top: 1px solid #004C97;\\n  border-bottom: 1px solid #004C97;\\n  margin: 2em 0em;\\n  padding: .2em 1em .8em 1em; }\\n\\n.longpage-assignment-link {\\n  color: #004C97 !important;\\n  margin-top: 10px; }\\n\\n.longpage-solution {\\n  background-color: #007bff17;\\n  border-top: 1px solid #004C97;\\n  border-bottom: 1px solid #004C97;\\n  margin: 2em 0em;\\n  padding: 1em; }\\n\\n.longpage pre {\\n  display: block;\\n  padding: 1rem;\\n  word-wrap: normal; }\\n\\ndiv.longpage-center pre, pre {\\n  text-align: left !important;\\n  font-family: monospace, monospace;\\n  background-color: #ddd !important;\\n  text-align: left;\\n  overflow: auto;\\n  padding: 4px 6px;\\n  margin: 10px 0 10px 0; }\\n\\ncode {\\n  font-family: monospace, monospace;\\n  background-color: #ddd;\\n  padding: 2px 4px;\\n  color: #222222; }\\n\\n.nobr {\\n  white-space: nowrap; }\\n\\n.longpage-italic {\\n  font-style: italic; }\\n\\n.longpage-bold {\\n  font-weight: bold; }\\n\\n.longpage-inline {\\n  display: inline; }\\n\\n.longpage-paragraph {\\n  position: relative; }\\n\\n.longpage-container .reading-progress {\\n  z-index: 40;\\n  display: block;\\n  height: 100%;\\n  min-width: 1px;\\n  background-color: #004C97;\\n  position: absolute;\\n  top: 0;\\n  border-radius: 2px/50px;\\n  opacity: 0.3; }\\n\\n.longpage-container .progress-0 {\\n  width: 1px;\\n  right: -10px; }\\n\\n.longpage-container .progress-1 {\\n  width: 4px;\\n  right: -12px; }\\n\\n.longpage-container .progress-2 {\\n  width: 8px;\\n  right: -14px; }\\n\\n.longpage-container .progress-3 {\\n  width: 12px;\\n  right: -16px; }\\n\\n.longpage-container .progress-4 {\\n  width: 16px;\\n  right: -18px; }\\n\\n.longpage-container .progress-5 {\\n  width: 20px;\\n  right: -20px; }\\n\\n/* */\\n.blocks {\\n  padding-top: 63px; }\\n\\n#first {\\n  background-color: #dc3545; }\\n\\n#second {\\n  background-color: #007bff; }\\n\\n#third {\\n  background-color: #28a745; }\\n\\n.navbar {\\n  position: fixed;\\n  background-color: #6c757d;\\n  width: 100%;\\n  text-align: center; }\\n\\n.navbar-items {\\n  padding: 0;\\n  font-size: 1.25rem; }\\n\\n.navbar-items li {\\n  list-style: none;\\n  display: inline-block; }\\n\\n.navbar-items li + li {\\n  margin-left: 20px; }\\n\\n.navbar-items li a {\\n  color: #ffffff;\\n  text-decoration: none;\\n  position: relative; }\\n\\n.navbar-items li a::after {\\n  width: 0;\\n  content: \\\"\\\";\\n  height: 4px;\\n  background-color: #ffc107;\\n  position: absolute;\\n  bottom: -5px;\\n  left: 0;\\n  transition: width .3s ease; }\\n\\n.navbar-items li a.active::after {\\n  width: 100%; }\\n\\n.header-not-at-top {\\n  background-color: #28a745; }\\n\\n.longpage-marginal {\\n  align-content: flex-start;\\n  font-weight: bold;\\n  margin-bottom: 4px; }\\n\\n.longpage-bold {\\n  font-weight: bold; }\\n\\n.longpage-tabbing {\\n  display: inline-block;\\n  white-space: pre-line;\\n  background-color: #ddd;\\n  padding: 6px 10px;\\n  font-size: 0.9em;\\n  margin-left: 4px;\\n  margin-right: 4px; }\\n\\n.longpage-minipage {\\n  padding: 10px 0; }\\n\\n.longpage-indent {\\n  font-size: 0.9em;\\n  margin-left: 20px;\\n  white-space: pre-line;\\n  margin-bottom: 10px; }\\n\\n.longpage-monospace {\\n  font-family: monospace; }\\n\\n/* Medium devices (tablets, 768px and up) */\\n@media (min-width: 768px) and (max-width: 991.98px) {\\n  h1, .h1 {\\n    font-size: 1.3rem; }\\n  .card {\\n    border: none; }\\n  #longpage-navbar {\\n    position: relative;\\n    z-index: 1031;\\n    color: #333333;\\n    background-color: #ccc;\\n    text-align: left;\\n    justify-content: space-between; }\\n  .longpage-toc-toggle {\\n    height: 20px;\\n    line-height: 15px;\\n    font-size: 1em; }\\n  #longpage-navbar.header-not-at-top {\\n    position: relative;\\n    width: 100%;\\n    z-index: 1031;\\n    color: #333333;\\n    background-color: #ccc;\\n    text-align: left;\\n    padding: 2px 10px;\\n    text-align: left;\\n    justify-content: space-between; }\\n  #longpage-navbar.header-not-at-top {\\n    position: fixed;\\n    top: 0;\\n    height: 40px;\\n    width: 100%; } }\\n\\n/* Small devices (landscape phones, 576px and up) */\\n@media (min-width: 576px) and (max-width: 767.98px) {\\n  h1, .h1 {\\n    font-size: 1.3rem; } }\\n\\n/* XS Extra small devices (portrait phones, less than 576px) */\\n@media (max-width: 575.98px) {\\n  #page-navbar .breadcrumb {\\n    display: none; }\\n  .longpage-container {\\n    font-size: 14px; }\\n  #longpage-navbar {\\n    height: auto;\\n    position: fixed;\\n    top: 50px;\\n    left: 0;\\n    width: 100%;\\n    z-index: 1031; }\\n  #longpage-navbar.header-not-at-top {\\n    top: 50px; }\\n  h1, .h1 {\\n    font-size: 1.3rem; }\\n  #region-main-box.col-12 {\\n    padding-left: 0 !important;\\n    padding-right: 0 !important;\\n    border: none; }\\n  #region-main-box .card, header .card {\\n    border: none; }\\n  .longpage-assignment-link {\\n    color: #004C97 !important;\\n    margin-top: 10px; } }\\n\\n.longpage-container p, .longpage-container .longpage-assignment, .longpage-container ol, .longpage-container ul, .longpage-container h2, .longpage-container h3, .longpage-container h4 {\\n  /*color: #28a745 !important;*/ }\\n\", \"\"]);\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/styles/main.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss&":
/*!******************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib??vue-loader-options!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.i, \".tools {\\n  height: 30px;\\n  padding: 5px 10px;\\n  background: #aaa;\\n  color: #000;\\n  border-radius: 5px;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  /*transform: translate(-50%, -100%);*/\\n  transition: 0.2s all;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  z-index: 700;\\n}\\n.tools:after {\\n  content: '';\\n  position: absolute;\\n  left: 50%;\\n  bottom: -6px;\\n  transform: translateX(-50%);\\n  transition: 0.2s all;\\n  width: 0;\\n  height: 0;\\n  border-left: 6px solid transparent;\\n  border-right: 6px solid transparent;\\n  border-top: 6px solid #aaa;\\n}\\n.tools:hover {\\n  background: #eee;\\n}\\n.tools:hover::after {\\n  border-top: 6px solid #eee;\\n}\\n.item {\\n  color: #000;\\n}\\n.mark-bookmark {\\n  background-color: #aaa;\\n  border-radius: 3px;\\n  padding: 1px 0px;\\n}\\n.longpage-nav ul#search-results {\\n  display: inline-block;\\n}\\n.longpage-nav ul#search-results li {\\n  font-size: 0.8em;\\n  display: inline-block;\\n}\\n\\n/* Medium devices (tablets, 768px and up) */\\n@media (min-width: 768px) and (max-width: 991.98px) {\\n#longpage-search-form #search-string {\\n    height: 17px;\\n    font-size: 1em;\\n    vertical-align: middle;\\n}\\n#longpage-search-form #search-full-text {\\n    font-size: 1em;\\n    line-height: 1em;\\n}\\n#longpage-search-form {\\n    display: inline !important;\\n    float: right;\\n    margin-right: 30px;\\n}\\n}\\n\\n/* Style */\\n.longpage-toc-container a {\\n  cursor: pointer;\\n}\\n.longpage-toc-container a:hover {\\n  text-decoration-style: solid;\\n}\\n\\n/*\\n * Based on Hypothesis client's styles (see https://github.com/hypothesis/client):\\n *   - src/styles/annotator/highlights.scss\\n */\\n/*\\n * Based on Hypothesis client's styles (see https://github.com/hypothesis/client):\\n *   - src/styles/mixins/a11y.scss\\n */\\n@use 'sass:color';\\n.longpage-highlights-always-on .longpage-highlight {\\n  cursor: pointer;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-yellow {\\n    background-color: #FFFF00;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-yellow .longpage-highlight {\\n      background-color: #bfbf00;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-yellow.longpage-highlight-focused {\\n      background-color: #ffff40 !important;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-yellow.longpage-highlight-focused .longpage-highlight {\\n        background-color: transparent !important;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-blue {\\n    background-color: #00FFFF;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-blue .longpage-highlight {\\n      background-color: #00bfbf;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-blue.longpage-highlight-focused {\\n      background-color: #40ffff !important;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-blue.longpage-highlight-focused .longpage-highlight {\\n        background-color: transparent !important;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-magenta {\\n    background-color: #FF84F5;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-magenta .longpage-highlight {\\n      background-color: #ff23ed;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-magenta.longpage-highlight-focused {\\n      background-color: #ffa3f8 !important;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-magenta.longpage-highlight-focused .longpage-highlight {\\n        background-color: transparent !important;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-green {\\n    background-color: #93E13C;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-green .longpage-highlight {\\n      background-color: #6fb91d;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-green.longpage-highlight-focused {\\n      background-color: #aee96d !important;\\n}\\n.longpage-highlights-always-on .longpage-highlight.bg-green.longpage-highlight-focused .longpage-highlight {\\n        background-color: transparent !important;\\n}\\n.longpage-highlights-always-on .longpage-highlight::before {\\n    position: absolute;\\n    clip: rect(0 0 0 0);\\n    overflow: hidden;\\n    content: ' highlight start ';\\n}\\n.longpage-highlights-always-on .longpage-highlight::after {\\n    position: absolute;\\n    clip: rect(0 0 0 0);\\n    overflow: hidden;\\n    content: ' highlight end ';\\n}\\nhtml {\\n  scroll-behavior: smooth;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n.last-modified {\\n  margin-top: 30px;\\n  text-align: center;\\n  font-size: 0.8em;\\n}\\n#longpage-navbar {\\n  height: auto;\\n  color: #333333;\\n  background-color: #ccc;\\n  position: relative;\\n  text-align: left;\\n  justify-content: space-between;\\n}\\n#longpage-navbar.title-toc {\\n  justify-content: left;\\n}\\n#longpage-navbar.header-not-at-top {\\n  position: fixed;\\n  top: 50px;\\n  left: 0;\\n  width: 100%;\\n  z-index: 1031;\\n}\\n.longpage-nav-btn {\\n  margin-top: 0;\\n}\\n#longpage-navbar .navbar-brand {\\n  color: #333;\\n  white-space: normal;\\n}\\n#top-of-site-pixel-anchor {\\n  position: absolute;\\n  width: 1px;\\n  height: 1px;\\n  top: 500px;\\n  left: 0;\\n}\\n.longpage-nav .nav-link {\\n  padding-top: 0;\\n  padding-bottom: 6px;\\n  font-size: 1em;\\n  padding-left: 4px;\\n  max-width: 100%;\\n  word-wrap: break-word;\\n  overflow-wrap: break-word;\\n  line-height: 1.2em;\\n  text-align: left;\\n}\\n.justify-text {\\n  padding-left: 0 !important;\\n  padding-right: 0 !important;\\n}\\n.longpage-footnote {\\n  color: #004C97;\\n  margin: 0;\\n  border: 0;\\n  padding: 0 !important;\\n  vertical-align: 0;\\n}\\n.longpage-footnote button {\\n  font-size: 1em;\\n  margin: 0;\\n  border: 0;\\n  padding: 0 !important;\\n  vertical-align: 0;\\n}\\n.longpage-footnote:hover button {\\n  background-color: #004C97;\\n  color: #fff;\\n  /* border-radius: 5px;\\n  border: solid 1px #004C97;\\n  */\\n}\\n.longpage-citation {\\n  color: #004C97 !important;\\n  margin: 0;\\n  border: 0;\\n  padding: 0 !important;\\n  vertical-align: 0;\\n  font-size: 1em;\\n}\\n.longpage-container {\\n  color: #333333;\\n  font-family: Helvetica, Arial, sans-serif;\\n  font-size: 18px;\\n  max-width: 40em;\\n  /*text-align: justify;*/\\n  padding-left: 0 !important;\\n  padding-right: 0 !important;\\n  hyphens: auto;\\n}\\n.longpage-container > p {\\n  margin: 0px 0px 10px 0px;\\n  padding: 0 10px;\\n  line-height: 1.6em;\\n  font-size: 1em;\\n}\\n.longpage-container h2 {\\n  font-size: 1.6em;\\n  line-height: 1.25em;\\n  width: 100%;\\n  margin: 30px 0px 20px 0px;\\n  padding: 0px;\\n  font-weight: bold;\\n}\\n.longpage-container h3 {\\n  font-size: 1.2em;\\n  line-height: 1.51em;\\n  margin: 20px 0px 15px 0px;\\n  font-weight: bold;\\n  padding: 0 0 0 0px;\\n}\\n.longpage-container h4 {\\n  font-size: 1.1em;\\n  line-height: 1.41em;\\n  margin: 10px 0px 10px 0px;\\n  font-weight: bold;\\n  padding: 0 0 0 0px;\\n}\\n.longpage-container h5 {\\n  font-size: 1.0em;\\n  line-height: 1.41em;\\n  margin: 10px 0px 10px 0px;\\n  font-weight: bold;\\n  padding: 0 0 0 0px;\\n}\\n.longpage-container .longpage-image-block, .longpage-container .longpage-table-block {\\n  margin: 1em 0;\\n}\\n.longpage-container .longpage-image-block table {\\n  margin: 1em 0;\\n  border-bottom: solid 1px #333;\\n}\\n.longpage-container .longpage-image-block table tr:nth-child(1) {\\n  border-top: solid 1px #333;\\n  border-bottom: solid 1px #333;\\n}\\n.longpage-container .longpage-image-block table tr td {\\n  vertical-align: top;\\n  padding: 4px 8px 4px 0;\\n}\\n\\n/* bad hack for 1D */\\n.longpage-container table {\\n  border-top: 2px solid #333;\\n  border-bottom: 2px solid #333;\\n  margin: 0 8px;\\n  width: 100%;\\n}\\n.longpage-container table thead {\\n  border-bottom: 2px solid #333;\\n}\\n.longpage-container table tbody tr td {\\n  border-bottom: 1px solid #ccc;\\n  border-left: 1px solid #ccc;\\n  border-right: 1px solid #ccc;\\n  padding: 4px 6px;\\n  vertical-align: top;\\n  margin: 0;\\n}\\n\\n/* END bad hack for 1D */\\n.longpage-container .longpage-image-block img {\\n  max-height: 80vh;\\n  align-content: center;\\n}\\n.longpage-container .longpage-image-caption, .longpage-container .longpage-table-caption {\\n  font-size: 0.9em;\\n  font-weight: normal;\\n  margin-top: 0;\\n  margin-bottom: 1em;\\n  line-height: 1.4em;\\n  padding: 4px 6px;\\n}\\n.longpage-caption-label {\\n  font-weight: bold;\\n}\\n.longpage-container ul, .longpage-container ol {\\n  margin: 1em 0em 2em 0.2em;\\n  padding-left: 1.2em;\\n}\\n.longpage-container ul li, .longpage-container ol li {\\n  padding-left: 0.3em;\\n}\\n.longpage-center {\\n  text-align: center;\\n}\\n.longpage-assignment {\\n  background-color: #007bff17;\\n  border-top: 1px solid #004C97;\\n  border-bottom: 1px solid #004C97;\\n  margin: 2em 0em;\\n  padding: .2em 1em .8em 1em;\\n}\\n.longpage-assignment-link {\\n  color: #004C97 !important;\\n  margin-top: 10px;\\n}\\n.longpage-solution {\\n  background-color: #007bff17;\\n  border-top: 1px solid #004C97;\\n  border-bottom: 1px solid #004C97;\\n  margin: 2em 0em;\\n  padding: 1em;\\n}\\n.longpage pre {\\n  display: block;\\n  padding: 1rem;\\n  word-wrap: normal;\\n}\\ndiv.longpage-center pre, pre {\\n  text-align: left !important;\\n  font-family: monospace, monospace;\\n  background-color: #ddd !important;\\n  text-align: left;\\n  overflow: auto;\\n  padding: 4px 6px;\\n  margin: 10px 0 10px 0;\\n}\\ncode {\\n  font-family: monospace, monospace;\\n  background-color: #ddd;\\n  padding: 2px 4px;\\n  color: #222222;\\n}\\n.nobr {\\n  white-space: nowrap;\\n}\\n.longpage-italic {\\n  font-style: italic;\\n}\\n.longpage-bold {\\n  font-weight: bold;\\n}\\n.longpage-inline {\\n  display: inline;\\n}\\n.longpage-paragraph {\\n  position: relative;\\n}\\n.longpage-container .reading-progress {\\n  z-index: 40;\\n  display: block;\\n  height: 100%;\\n  min-width: 1px;\\n  background-color: #004C97;\\n  position: absolute;\\n  top: 0;\\n  border-radius: 2px/50px;\\n  opacity: 0.3;\\n}\\n.longpage-container .progress-0 {\\n  width: 1px;\\n  right: -10px;\\n}\\n.longpage-container .progress-1 {\\n  width: 4px;\\n  right: -12px;\\n}\\n.longpage-container .progress-2 {\\n  width: 8px;\\n  right: -14px;\\n}\\n.longpage-container .progress-3 {\\n  width: 12px;\\n  right: -16px;\\n}\\n.longpage-container .progress-4 {\\n  width: 16px;\\n  right: -18px;\\n}\\n.longpage-container .progress-5 {\\n  width: 20px;\\n  right: -20px;\\n}\\n\\n/* */\\n.blocks {\\n  padding-top: 63px;\\n}\\n#first {\\n  background-color: #dc3545;\\n}\\n#second {\\n  background-color: #007bff;\\n}\\n#third {\\n  background-color: #28a745;\\n}\\n.navbar {\\n  position: fixed;\\n  background-color: #6c757d;\\n  width: 100%;\\n  text-align: center;\\n}\\n.navbar-items {\\n  padding: 0;\\n  font-size: 1.25rem;\\n}\\n.navbar-items li {\\n  list-style: none;\\n  display: inline-block;\\n}\\n.navbar-items li + li {\\n  margin-left: 20px;\\n}\\n.navbar-items li a {\\n  color: #ffffff;\\n  text-decoration: none;\\n  position: relative;\\n}\\n.navbar-items li a::after {\\n  width: 0;\\n  content: \\\"\\\";\\n  height: 4px;\\n  background-color: #ffc107;\\n  position: absolute;\\n  bottom: -5px;\\n  left: 0;\\n  transition: width .3s ease;\\n}\\n.navbar-items li a.active::after {\\n  width: 100%;\\n}\\n.header-not-at-top {\\n  background-color: #28a745;\\n}\\n.longpage-marginal {\\n  align-content: flex-start;\\n  font-weight: bold;\\n  margin-bottom: 4px;\\n}\\n.longpage-bold {\\n  font-weight: bold;\\n}\\n.longpage-tabbing {\\n  display: inline-block;\\n  white-space: pre-line;\\n  background-color: #ddd;\\n  padding: 6px 10px;\\n  font-size: 0.9em;\\n  margin-left: 4px;\\n  margin-right: 4px;\\n}\\n.longpage-minipage {\\n  padding: 10px 0;\\n}\\n.longpage-indent {\\n  font-size: 0.9em;\\n  margin-left: 20px;\\n  white-space: pre-line;\\n  margin-bottom: 10px;\\n}\\n.longpage-monospace {\\n  font-family: monospace;\\n}\\n\\n/* Medium devices (tablets, 768px and up) */\\n@media (min-width: 768px) and (max-width: 991.98px) {\\nh1, .h1 {\\n    font-size: 1.3rem;\\n}\\n.card {\\n    border: none;\\n}\\n#longpage-navbar {\\n    position: relative;\\n    z-index: 1031;\\n    color: #333333;\\n    background-color: #ccc;\\n    text-align: left;\\n    justify-content: space-between;\\n}\\n.longpage-toc-toggle {\\n    height: 20px;\\n    line-height: 15px;\\n    font-size: 1em;\\n}\\n#longpage-navbar.header-not-at-top {\\n    position: relative;\\n    width: 100%;\\n    z-index: 1031;\\n    color: #333333;\\n    background-color: #ccc;\\n    text-align: left;\\n    padding: 2px 10px;\\n    text-align: left;\\n    justify-content: space-between;\\n}\\n#longpage-navbar.header-not-at-top {\\n    position: fixed;\\n    top: 0;\\n    height: 40px;\\n    width: 100%;\\n}\\n}\\n\\n/* Small devices (landscape phones, 576px and up) */\\n@media (min-width: 576px) and (max-width: 767.98px) {\\nh1, .h1 {\\n    font-size: 1.3rem;\\n}\\n}\\n\\n/* XS Extra small devices (portrait phones, less than 576px) */\\n@media (max-width: 575.98px) {\\n#page-navbar .breadcrumb {\\n    display: none;\\n}\\n.longpage-container {\\n    font-size: 14px;\\n}\\n#longpage-navbar {\\n    height: auto;\\n    position: fixed;\\n    top: 50px;\\n    left: 0;\\n    width: 100%;\\n    z-index: 1031;\\n}\\n#longpage-navbar.header-not-at-top {\\n    top: 50px;\\n}\\nh1, .h1 {\\n    font-size: 1.3rem;\\n}\\n#region-main-box.col-12 {\\n    padding-left: 0 !important;\\n    padding-right: 0 !important;\\n    border: none;\\n}\\n#region-main-box .card, header .card {\\n    border: none;\\n}\\n.longpage-assignment-link {\\n    color: #004C97 !important;\\n    margin-top: 10px;\\n}\\n}\\n.longpage-container p, .longpage-container .longpage-assignment, .longpage-container ol, .longpage-container ul, .longpage-container h2, .longpage-container h3, .longpage-container h4 {\\n  /*color: #28a745 !important;*/\\n}\\n\\n/*!\\r\\n * Hover.css (http://ianlunn.github.io/Hover/)\\r\\n * Version: 2.3.2\\r\\n * Author: Ian Lunn @IanLunn\\r\\n * Author URL: http://ianlunn.co.uk/\\r\\n * Github: https://github.com/IanLunn/Hover\\r\\n\\r\\n * Hover.css Copyright Ian Lunn 2017. Generated with Sass.\\r\\n */\\n/* 2D TRANSITIONS */\\n/* Grow */\\n.hvr-grow, .annotation-toolbar-item {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n}\\n.hvr-grow:hover, .annotation-toolbar-item:hover, .hvr-grow:focus, .annotation-toolbar-item:focus, .hvr-grow:active, .annotation-toolbar-item:active {\\n    -webkit-transform: scale(1.1);\\n    transform: scale(1.1);\\n}\\n\\n/* Shrink */\\n.hvr-shrink {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n}\\n.hvr-shrink:hover, .hvr-shrink:focus, .hvr-shrink:active {\\n    -webkit-transform: scale(0.9);\\n    transform: scale(0.9);\\n}\\n\\n/* Pulse */\\n@-webkit-keyframes hvr-pulse {\\n25% {\\n    -webkit-transform: scale(1.1);\\n    transform: scale(1.1);\\n}\\n75% {\\n    -webkit-transform: scale(0.9);\\n    transform: scale(0.9);\\n}\\n}\\n@keyframes hvr-pulse {\\n25% {\\n    -webkit-transform: scale(1.1);\\n    transform: scale(1.1);\\n}\\n75% {\\n    -webkit-transform: scale(0.9);\\n    transform: scale(0.9);\\n}\\n}\\n.hvr-pulse {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-pulse:hover, .hvr-pulse:focus, .hvr-pulse:active {\\n    -webkit-animation-name: hvr-pulse;\\n    animation-name: hvr-pulse;\\n    -webkit-animation-duration: 1s;\\n    animation-duration: 1s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: infinite;\\n    animation-iteration-count: infinite;\\n}\\n\\n/* Pulse Grow */\\n@-webkit-keyframes hvr-pulse-grow {\\nto {\\n    -webkit-transform: scale(1.1);\\n    transform: scale(1.1);\\n}\\n}\\n@keyframes hvr-pulse-grow {\\nto {\\n    -webkit-transform: scale(1.1);\\n    transform: scale(1.1);\\n}\\n}\\n.hvr-pulse-grow {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-pulse-grow:hover, .hvr-pulse-grow:focus, .hvr-pulse-grow:active {\\n    -webkit-animation-name: hvr-pulse-grow;\\n    animation-name: hvr-pulse-grow;\\n    -webkit-animation-duration: 0.3s;\\n    animation-duration: 0.3s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: infinite;\\n    animation-iteration-count: infinite;\\n    -webkit-animation-direction: alternate;\\n    animation-direction: alternate;\\n}\\n\\n/* Pulse Shrink */\\n@-webkit-keyframes hvr-pulse-shrink {\\nto {\\n    -webkit-transform: scale(0.9);\\n    transform: scale(0.9);\\n}\\n}\\n@keyframes hvr-pulse-shrink {\\nto {\\n    -webkit-transform: scale(0.9);\\n    transform: scale(0.9);\\n}\\n}\\n.hvr-pulse-shrink {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-pulse-shrink:hover, .hvr-pulse-shrink:focus, .hvr-pulse-shrink:active {\\n    -webkit-animation-name: hvr-pulse-shrink;\\n    animation-name: hvr-pulse-shrink;\\n    -webkit-animation-duration: 0.3s;\\n    animation-duration: 0.3s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: infinite;\\n    animation-iteration-count: infinite;\\n    -webkit-animation-direction: alternate;\\n    animation-direction: alternate;\\n}\\n\\n/* Push */\\n@-webkit-keyframes hvr-push {\\n50% {\\n    -webkit-transform: scale(0.8);\\n    transform: scale(0.8);\\n}\\n100% {\\n    -webkit-transform: scale(1);\\n    transform: scale(1);\\n}\\n}\\n@keyframes hvr-push {\\n50% {\\n    -webkit-transform: scale(0.8);\\n    transform: scale(0.8);\\n}\\n100% {\\n    -webkit-transform: scale(1);\\n    transform: scale(1);\\n}\\n}\\n.hvr-push {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-push:hover, .hvr-push:focus, .hvr-push:active {\\n    -webkit-animation-name: hvr-push;\\n    animation-name: hvr-push;\\n    -webkit-animation-duration: 0.3s;\\n    animation-duration: 0.3s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* Pop */\\n@-webkit-keyframes hvr-pop {\\n50% {\\n    -webkit-transform: scale(1.2);\\n    transform: scale(1.2);\\n}\\n}\\n@keyframes hvr-pop {\\n50% {\\n    -webkit-transform: scale(1.2);\\n    transform: scale(1.2);\\n}\\n}\\n.hvr-pop {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-pop:hover, .hvr-pop:focus, .hvr-pop:active {\\n    -webkit-animation-name: hvr-pop;\\n    animation-name: hvr-pop;\\n    -webkit-animation-duration: 0.3s;\\n    animation-duration: 0.3s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* Bounce In */\\n.hvr-bounce-in {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.5s;\\n  transition-duration: 0.5s;\\n}\\n.hvr-bounce-in:hover, .hvr-bounce-in:focus, .hvr-bounce-in:active {\\n    -webkit-transform: scale(1.2);\\n    transform: scale(1.2);\\n    -webkit-transition-timing-function: cubic-bezier(0.47, 2.02, 0.31, -0.36);\\n    transition-timing-function: cubic-bezier(0.47, 2.02, 0.31, -0.36);\\n}\\n\\n/* Bounce Out */\\n.hvr-bounce-out {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.5s;\\n  transition-duration: 0.5s;\\n}\\n.hvr-bounce-out:hover, .hvr-bounce-out:focus, .hvr-bounce-out:active {\\n    -webkit-transform: scale(0.8);\\n    transform: scale(0.8);\\n    -webkit-transition-timing-function: cubic-bezier(0.47, 2.02, 0.31, -0.36);\\n    transition-timing-function: cubic-bezier(0.47, 2.02, 0.31, -0.36);\\n}\\n\\n/* Rotate */\\n.hvr-rotate {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n}\\n.hvr-rotate:hover, .hvr-rotate:focus, .hvr-rotate:active {\\n    -webkit-transform: rotate(4deg);\\n    transform: rotate(4deg);\\n}\\n\\n/* Grow Rotate */\\n.hvr-grow-rotate {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n}\\n.hvr-grow-rotate:hover, .hvr-grow-rotate:focus, .hvr-grow-rotate:active {\\n    -webkit-transform: scale(1.1) rotate(4deg);\\n    transform: scale(1.1) rotate(4deg);\\n}\\n\\n/* Float */\\n.hvr-float {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n  -webkit-transition-timing-function: ease-out;\\n  transition-timing-function: ease-out;\\n}\\n.hvr-float:hover, .hvr-float:focus, .hvr-float:active {\\n    -webkit-transform: translateY(-8px);\\n    transform: translateY(-8px);\\n}\\n\\n/* Sink */\\n.hvr-sink {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n  -webkit-transition-timing-function: ease-out;\\n  transition-timing-function: ease-out;\\n}\\n.hvr-sink:hover, .hvr-sink:focus, .hvr-sink:active {\\n    -webkit-transform: translateY(8px);\\n    transform: translateY(8px);\\n}\\n\\n/* Bob */\\n@-webkit-keyframes hvr-bob {\\n0% {\\n    -webkit-transform: translateY(-8px);\\n    transform: translateY(-8px);\\n}\\n50% {\\n    -webkit-transform: translateY(-4px);\\n    transform: translateY(-4px);\\n}\\n100% {\\n    -webkit-transform: translateY(-8px);\\n    transform: translateY(-8px);\\n}\\n}\\n@keyframes hvr-bob {\\n0% {\\n    -webkit-transform: translateY(-8px);\\n    transform: translateY(-8px);\\n}\\n50% {\\n    -webkit-transform: translateY(-4px);\\n    transform: translateY(-4px);\\n}\\n100% {\\n    -webkit-transform: translateY(-8px);\\n    transform: translateY(-8px);\\n}\\n}\\n@-webkit-keyframes hvr-bob-float {\\n100% {\\n    -webkit-transform: translateY(-8px);\\n    transform: translateY(-8px);\\n}\\n}\\n@keyframes hvr-bob-float {\\n100% {\\n    -webkit-transform: translateY(-8px);\\n    transform: translateY(-8px);\\n}\\n}\\n.hvr-bob {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-bob:hover, .hvr-bob:focus, .hvr-bob:active {\\n    -webkit-animation-name: hvr-bob-float, hvr-bob;\\n    animation-name: hvr-bob-float, hvr-bob;\\n    -webkit-animation-duration: .3s, 1.5s;\\n    animation-duration: .3s, 1.5s;\\n    -webkit-animation-delay: 0s, .3s;\\n    animation-delay: 0s, .3s;\\n    -webkit-animation-timing-function: ease-out, ease-in-out;\\n    animation-timing-function: ease-out, ease-in-out;\\n    -webkit-animation-iteration-count: 1, infinite;\\n    animation-iteration-count: 1, infinite;\\n    -webkit-animation-fill-mode: forwards;\\n    animation-fill-mode: forwards;\\n    -webkit-animation-direction: normal, alternate;\\n    animation-direction: normal, alternate;\\n}\\n\\n/* Hang */\\n@-webkit-keyframes hvr-hang {\\n0% {\\n    -webkit-transform: translateY(8px);\\n    transform: translateY(8px);\\n}\\n50% {\\n    -webkit-transform: translateY(4px);\\n    transform: translateY(4px);\\n}\\n100% {\\n    -webkit-transform: translateY(8px);\\n    transform: translateY(8px);\\n}\\n}\\n@keyframes hvr-hang {\\n0% {\\n    -webkit-transform: translateY(8px);\\n    transform: translateY(8px);\\n}\\n50% {\\n    -webkit-transform: translateY(4px);\\n    transform: translateY(4px);\\n}\\n100% {\\n    -webkit-transform: translateY(8px);\\n    transform: translateY(8px);\\n}\\n}\\n@-webkit-keyframes hvr-hang-sink {\\n100% {\\n    -webkit-transform: translateY(8px);\\n    transform: translateY(8px);\\n}\\n}\\n@keyframes hvr-hang-sink {\\n100% {\\n    -webkit-transform: translateY(8px);\\n    transform: translateY(8px);\\n}\\n}\\n.hvr-hang {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-hang:hover, .hvr-hang:focus, .hvr-hang:active {\\n    -webkit-animation-name: hvr-hang-sink, hvr-hang;\\n    animation-name: hvr-hang-sink, hvr-hang;\\n    -webkit-animation-duration: .3s, 1.5s;\\n    animation-duration: .3s, 1.5s;\\n    -webkit-animation-delay: 0s, .3s;\\n    animation-delay: 0s, .3s;\\n    -webkit-animation-timing-function: ease-out, ease-in-out;\\n    animation-timing-function: ease-out, ease-in-out;\\n    -webkit-animation-iteration-count: 1, infinite;\\n    animation-iteration-count: 1, infinite;\\n    -webkit-animation-fill-mode: forwards;\\n    animation-fill-mode: forwards;\\n    -webkit-animation-direction: normal, alternate;\\n    animation-direction: normal, alternate;\\n}\\n\\n/* Skew */\\n.hvr-skew {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n}\\n.hvr-skew:hover, .hvr-skew:focus, .hvr-skew:active {\\n    -webkit-transform: skew(-10deg);\\n    transform: skew(-10deg);\\n}\\n\\n/* Skew Forward */\\n.hvr-skew-forward {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n  -webkit-transform-origin: 0 100%;\\n  transform-origin: 0 100%;\\n}\\n.hvr-skew-forward:hover, .hvr-skew-forward:focus, .hvr-skew-forward:active {\\n    -webkit-transform: skew(-10deg);\\n    transform: skew(-10deg);\\n}\\n\\n/* Skew Backward */\\n.hvr-skew-backward {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n  -webkit-transform-origin: 0 100%;\\n  transform-origin: 0 100%;\\n}\\n.hvr-skew-backward:hover, .hvr-skew-backward:focus, .hvr-skew-backward:active {\\n    -webkit-transform: skew(10deg);\\n    transform: skew(10deg);\\n}\\n\\n/* Wobble Vertical */\\n@-webkit-keyframes hvr-wobble-vertical {\\n16.65% {\\n    -webkit-transform: translateY(8px);\\n    transform: translateY(8px);\\n}\\n33.3% {\\n    -webkit-transform: translateY(-6px);\\n    transform: translateY(-6px);\\n}\\n49.95% {\\n    -webkit-transform: translateY(4px);\\n    transform: translateY(4px);\\n}\\n66.6% {\\n    -webkit-transform: translateY(-2px);\\n    transform: translateY(-2px);\\n}\\n83.25% {\\n    -webkit-transform: translateY(1px);\\n    transform: translateY(1px);\\n}\\n100% {\\n    -webkit-transform: translateY(0);\\n    transform: translateY(0);\\n}\\n}\\n@keyframes hvr-wobble-vertical {\\n16.65% {\\n    -webkit-transform: translateY(8px);\\n    transform: translateY(8px);\\n}\\n33.3% {\\n    -webkit-transform: translateY(-6px);\\n    transform: translateY(-6px);\\n}\\n49.95% {\\n    -webkit-transform: translateY(4px);\\n    transform: translateY(4px);\\n}\\n66.6% {\\n    -webkit-transform: translateY(-2px);\\n    transform: translateY(-2px);\\n}\\n83.25% {\\n    -webkit-transform: translateY(1px);\\n    transform: translateY(1px);\\n}\\n100% {\\n    -webkit-transform: translateY(0);\\n    transform: translateY(0);\\n}\\n}\\n.hvr-wobble-vertical {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-wobble-vertical:hover, .hvr-wobble-vertical:focus, .hvr-wobble-vertical:active {\\n    -webkit-animation-name: hvr-wobble-vertical;\\n    animation-name: hvr-wobble-vertical;\\n    -webkit-animation-duration: 1s;\\n    animation-duration: 1s;\\n    -webkit-animation-timing-function: ease-in-out;\\n    animation-timing-function: ease-in-out;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* Wobble Horizontal */\\n@-webkit-keyframes hvr-wobble-horizontal {\\n16.65% {\\n    -webkit-transform: translateX(8px);\\n    transform: translateX(8px);\\n}\\n33.3% {\\n    -webkit-transform: translateX(-6px);\\n    transform: translateX(-6px);\\n}\\n49.95% {\\n    -webkit-transform: translateX(4px);\\n    transform: translateX(4px);\\n}\\n66.6% {\\n    -webkit-transform: translateX(-2px);\\n    transform: translateX(-2px);\\n}\\n83.25% {\\n    -webkit-transform: translateX(1px);\\n    transform: translateX(1px);\\n}\\n100% {\\n    -webkit-transform: translateX(0);\\n    transform: translateX(0);\\n}\\n}\\n@keyframes hvr-wobble-horizontal {\\n16.65% {\\n    -webkit-transform: translateX(8px);\\n    transform: translateX(8px);\\n}\\n33.3% {\\n    -webkit-transform: translateX(-6px);\\n    transform: translateX(-6px);\\n}\\n49.95% {\\n    -webkit-transform: translateX(4px);\\n    transform: translateX(4px);\\n}\\n66.6% {\\n    -webkit-transform: translateX(-2px);\\n    transform: translateX(-2px);\\n}\\n83.25% {\\n    -webkit-transform: translateX(1px);\\n    transform: translateX(1px);\\n}\\n100% {\\n    -webkit-transform: translateX(0);\\n    transform: translateX(0);\\n}\\n}\\n.hvr-wobble-horizontal {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-wobble-horizontal:hover, .hvr-wobble-horizontal:focus, .hvr-wobble-horizontal:active {\\n    -webkit-animation-name: hvr-wobble-horizontal;\\n    animation-name: hvr-wobble-horizontal;\\n    -webkit-animation-duration: 1s;\\n    animation-duration: 1s;\\n    -webkit-animation-timing-function: ease-in-out;\\n    animation-timing-function: ease-in-out;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* Wobble To Bottom Right */\\n@-webkit-keyframes hvr-wobble-to-bottom-right {\\n16.65% {\\n    -webkit-transform: translate(8px, 8px);\\n    transform: translate(8px, 8px);\\n}\\n33.3% {\\n    -webkit-transform: translate(-6px, -6px);\\n    transform: translate(-6px, -6px);\\n}\\n49.95% {\\n    -webkit-transform: translate(4px, 4px);\\n    transform: translate(4px, 4px);\\n}\\n66.6% {\\n    -webkit-transform: translate(-2px, -2px);\\n    transform: translate(-2px, -2px);\\n}\\n83.25% {\\n    -webkit-transform: translate(1px, 1px);\\n    transform: translate(1px, 1px);\\n}\\n100% {\\n    -webkit-transform: translate(0, 0);\\n    transform: translate(0, 0);\\n}\\n}\\n@keyframes hvr-wobble-to-bottom-right {\\n16.65% {\\n    -webkit-transform: translate(8px, 8px);\\n    transform: translate(8px, 8px);\\n}\\n33.3% {\\n    -webkit-transform: translate(-6px, -6px);\\n    transform: translate(-6px, -6px);\\n}\\n49.95% {\\n    -webkit-transform: translate(4px, 4px);\\n    transform: translate(4px, 4px);\\n}\\n66.6% {\\n    -webkit-transform: translate(-2px, -2px);\\n    transform: translate(-2px, -2px);\\n}\\n83.25% {\\n    -webkit-transform: translate(1px, 1px);\\n    transform: translate(1px, 1px);\\n}\\n100% {\\n    -webkit-transform: translate(0, 0);\\n    transform: translate(0, 0);\\n}\\n}\\n.hvr-wobble-to-bottom-right {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-wobble-to-bottom-right:hover, .hvr-wobble-to-bottom-right:focus, .hvr-wobble-to-bottom-right:active {\\n    -webkit-animation-name: hvr-wobble-to-bottom-right;\\n    animation-name: hvr-wobble-to-bottom-right;\\n    -webkit-animation-duration: 1s;\\n    animation-duration: 1s;\\n    -webkit-animation-timing-function: ease-in-out;\\n    animation-timing-function: ease-in-out;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* Wobble To Top Right */\\n@-webkit-keyframes hvr-wobble-to-top-right {\\n16.65% {\\n    -webkit-transform: translate(8px, -8px);\\n    transform: translate(8px, -8px);\\n}\\n33.3% {\\n    -webkit-transform: translate(-6px, 6px);\\n    transform: translate(-6px, 6px);\\n}\\n49.95% {\\n    -webkit-transform: translate(4px, -4px);\\n    transform: translate(4px, -4px);\\n}\\n66.6% {\\n    -webkit-transform: translate(-2px, 2px);\\n    transform: translate(-2px, 2px);\\n}\\n83.25% {\\n    -webkit-transform: translate(1px, -1px);\\n    transform: translate(1px, -1px);\\n}\\n100% {\\n    -webkit-transform: translate(0, 0);\\n    transform: translate(0, 0);\\n}\\n}\\n@keyframes hvr-wobble-to-top-right {\\n16.65% {\\n    -webkit-transform: translate(8px, -8px);\\n    transform: translate(8px, -8px);\\n}\\n33.3% {\\n    -webkit-transform: translate(-6px, 6px);\\n    transform: translate(-6px, 6px);\\n}\\n49.95% {\\n    -webkit-transform: translate(4px, -4px);\\n    transform: translate(4px, -4px);\\n}\\n66.6% {\\n    -webkit-transform: translate(-2px, 2px);\\n    transform: translate(-2px, 2px);\\n}\\n83.25% {\\n    -webkit-transform: translate(1px, -1px);\\n    transform: translate(1px, -1px);\\n}\\n100% {\\n    -webkit-transform: translate(0, 0);\\n    transform: translate(0, 0);\\n}\\n}\\n.hvr-wobble-to-top-right {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-wobble-to-top-right:hover, .hvr-wobble-to-top-right:focus, .hvr-wobble-to-top-right:active {\\n    -webkit-animation-name: hvr-wobble-to-top-right;\\n    animation-name: hvr-wobble-to-top-right;\\n    -webkit-animation-duration: 1s;\\n    animation-duration: 1s;\\n    -webkit-animation-timing-function: ease-in-out;\\n    animation-timing-function: ease-in-out;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* Wobble Top */\\n@-webkit-keyframes hvr-wobble-top {\\n16.65% {\\n    -webkit-transform: skew(-12deg);\\n    transform: skew(-12deg);\\n}\\n33.3% {\\n    -webkit-transform: skew(10deg);\\n    transform: skew(10deg);\\n}\\n49.95% {\\n    -webkit-transform: skew(-6deg);\\n    transform: skew(-6deg);\\n}\\n66.6% {\\n    -webkit-transform: skew(4deg);\\n    transform: skew(4deg);\\n}\\n83.25% {\\n    -webkit-transform: skew(-2deg);\\n    transform: skew(-2deg);\\n}\\n100% {\\n    -webkit-transform: skew(0);\\n    transform: skew(0);\\n}\\n}\\n@keyframes hvr-wobble-top {\\n16.65% {\\n    -webkit-transform: skew(-12deg);\\n    transform: skew(-12deg);\\n}\\n33.3% {\\n    -webkit-transform: skew(10deg);\\n    transform: skew(10deg);\\n}\\n49.95% {\\n    -webkit-transform: skew(-6deg);\\n    transform: skew(-6deg);\\n}\\n66.6% {\\n    -webkit-transform: skew(4deg);\\n    transform: skew(4deg);\\n}\\n83.25% {\\n    -webkit-transform: skew(-2deg);\\n    transform: skew(-2deg);\\n}\\n100% {\\n    -webkit-transform: skew(0);\\n    transform: skew(0);\\n}\\n}\\n.hvr-wobble-top {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transform-origin: 0 100%;\\n  transform-origin: 0 100%;\\n}\\n.hvr-wobble-top:hover, .hvr-wobble-top:focus, .hvr-wobble-top:active {\\n    -webkit-animation-name: hvr-wobble-top;\\n    animation-name: hvr-wobble-top;\\n    -webkit-animation-duration: 1s;\\n    animation-duration: 1s;\\n    -webkit-animation-timing-function: ease-in-out;\\n    animation-timing-function: ease-in-out;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* Wobble Bottom */\\n@-webkit-keyframes hvr-wobble-bottom {\\n16.65% {\\n    -webkit-transform: skew(-12deg);\\n    transform: skew(-12deg);\\n}\\n33.3% {\\n    -webkit-transform: skew(10deg);\\n    transform: skew(10deg);\\n}\\n49.95% {\\n    -webkit-transform: skew(-6deg);\\n    transform: skew(-6deg);\\n}\\n66.6% {\\n    -webkit-transform: skew(4deg);\\n    transform: skew(4deg);\\n}\\n83.25% {\\n    -webkit-transform: skew(-2deg);\\n    transform: skew(-2deg);\\n}\\n100% {\\n    -webkit-transform: skew(0);\\n    transform: skew(0);\\n}\\n}\\n@keyframes hvr-wobble-bottom {\\n16.65% {\\n    -webkit-transform: skew(-12deg);\\n    transform: skew(-12deg);\\n}\\n33.3% {\\n    -webkit-transform: skew(10deg);\\n    transform: skew(10deg);\\n}\\n49.95% {\\n    -webkit-transform: skew(-6deg);\\n    transform: skew(-6deg);\\n}\\n66.6% {\\n    -webkit-transform: skew(4deg);\\n    transform: skew(4deg);\\n}\\n83.25% {\\n    -webkit-transform: skew(-2deg);\\n    transform: skew(-2deg);\\n}\\n100% {\\n    -webkit-transform: skew(0);\\n    transform: skew(0);\\n}\\n}\\n.hvr-wobble-bottom {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transform-origin: 100% 0;\\n  transform-origin: 100% 0;\\n}\\n.hvr-wobble-bottom:hover, .hvr-wobble-bottom:focus, .hvr-wobble-bottom:active {\\n    -webkit-animation-name: hvr-wobble-bottom;\\n    animation-name: hvr-wobble-bottom;\\n    -webkit-animation-duration: 1s;\\n    animation-duration: 1s;\\n    -webkit-animation-timing-function: ease-in-out;\\n    animation-timing-function: ease-in-out;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* Wobble Skew */\\n@-webkit-keyframes hvr-wobble-skew {\\n16.65% {\\n    -webkit-transform: skew(-12deg);\\n    transform: skew(-12deg);\\n}\\n33.3% {\\n    -webkit-transform: skew(10deg);\\n    transform: skew(10deg);\\n}\\n49.95% {\\n    -webkit-transform: skew(-6deg);\\n    transform: skew(-6deg);\\n}\\n66.6% {\\n    -webkit-transform: skew(4deg);\\n    transform: skew(4deg);\\n}\\n83.25% {\\n    -webkit-transform: skew(-2deg);\\n    transform: skew(-2deg);\\n}\\n100% {\\n    -webkit-transform: skew(0);\\n    transform: skew(0);\\n}\\n}\\n@keyframes hvr-wobble-skew {\\n16.65% {\\n    -webkit-transform: skew(-12deg);\\n    transform: skew(-12deg);\\n}\\n33.3% {\\n    -webkit-transform: skew(10deg);\\n    transform: skew(10deg);\\n}\\n49.95% {\\n    -webkit-transform: skew(-6deg);\\n    transform: skew(-6deg);\\n}\\n66.6% {\\n    -webkit-transform: skew(4deg);\\n    transform: skew(4deg);\\n}\\n83.25% {\\n    -webkit-transform: skew(-2deg);\\n    transform: skew(-2deg);\\n}\\n100% {\\n    -webkit-transform: skew(0);\\n    transform: skew(0);\\n}\\n}\\n.hvr-wobble-skew {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-wobble-skew:hover, .hvr-wobble-skew:focus, .hvr-wobble-skew:active {\\n    -webkit-animation-name: hvr-wobble-skew;\\n    animation-name: hvr-wobble-skew;\\n    -webkit-animation-duration: 1s;\\n    animation-duration: 1s;\\n    -webkit-animation-timing-function: ease-in-out;\\n    animation-timing-function: ease-in-out;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* Buzz */\\n@-webkit-keyframes hvr-buzz {\\n50% {\\n    -webkit-transform: translateX(3px) rotate(2deg);\\n    transform: translateX(3px) rotate(2deg);\\n}\\n100% {\\n    -webkit-transform: translateX(-3px) rotate(-2deg);\\n    transform: translateX(-3px) rotate(-2deg);\\n}\\n}\\n@keyframes hvr-buzz {\\n50% {\\n    -webkit-transform: translateX(3px) rotate(2deg);\\n    transform: translateX(3px) rotate(2deg);\\n}\\n100% {\\n    -webkit-transform: translateX(-3px) rotate(-2deg);\\n    transform: translateX(-3px) rotate(-2deg);\\n}\\n}\\n.hvr-buzz {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-buzz:hover, .hvr-buzz:focus, .hvr-buzz:active {\\n    -webkit-animation-name: hvr-buzz;\\n    animation-name: hvr-buzz;\\n    -webkit-animation-duration: 0.15s;\\n    animation-duration: 0.15s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: infinite;\\n    animation-iteration-count: infinite;\\n}\\n\\n/* Buzz Out */\\n@-webkit-keyframes hvr-buzz-out {\\n10% {\\n    -webkit-transform: translateX(3px) rotate(2deg);\\n    transform: translateX(3px) rotate(2deg);\\n}\\n20% {\\n    -webkit-transform: translateX(-3px) rotate(-2deg);\\n    transform: translateX(-3px) rotate(-2deg);\\n}\\n30% {\\n    -webkit-transform: translateX(3px) rotate(2deg);\\n    transform: translateX(3px) rotate(2deg);\\n}\\n40% {\\n    -webkit-transform: translateX(-3px) rotate(-2deg);\\n    transform: translateX(-3px) rotate(-2deg);\\n}\\n50% {\\n    -webkit-transform: translateX(2px) rotate(1deg);\\n    transform: translateX(2px) rotate(1deg);\\n}\\n60% {\\n    -webkit-transform: translateX(-2px) rotate(-1deg);\\n    transform: translateX(-2px) rotate(-1deg);\\n}\\n70% {\\n    -webkit-transform: translateX(2px) rotate(1deg);\\n    transform: translateX(2px) rotate(1deg);\\n}\\n80% {\\n    -webkit-transform: translateX(-2px) rotate(-1deg);\\n    transform: translateX(-2px) rotate(-1deg);\\n}\\n90% {\\n    -webkit-transform: translateX(1px) rotate(0);\\n    transform: translateX(1px) rotate(0);\\n}\\n100% {\\n    -webkit-transform: translateX(-1px) rotate(0);\\n    transform: translateX(-1px) rotate(0);\\n}\\n}\\n@keyframes hvr-buzz-out {\\n10% {\\n    -webkit-transform: translateX(3px) rotate(2deg);\\n    transform: translateX(3px) rotate(2deg);\\n}\\n20% {\\n    -webkit-transform: translateX(-3px) rotate(-2deg);\\n    transform: translateX(-3px) rotate(-2deg);\\n}\\n30% {\\n    -webkit-transform: translateX(3px) rotate(2deg);\\n    transform: translateX(3px) rotate(2deg);\\n}\\n40% {\\n    -webkit-transform: translateX(-3px) rotate(-2deg);\\n    transform: translateX(-3px) rotate(-2deg);\\n}\\n50% {\\n    -webkit-transform: translateX(2px) rotate(1deg);\\n    transform: translateX(2px) rotate(1deg);\\n}\\n60% {\\n    -webkit-transform: translateX(-2px) rotate(-1deg);\\n    transform: translateX(-2px) rotate(-1deg);\\n}\\n70% {\\n    -webkit-transform: translateX(2px) rotate(1deg);\\n    transform: translateX(2px) rotate(1deg);\\n}\\n80% {\\n    -webkit-transform: translateX(-2px) rotate(-1deg);\\n    transform: translateX(-2px) rotate(-1deg);\\n}\\n90% {\\n    -webkit-transform: translateX(1px) rotate(0);\\n    transform: translateX(1px) rotate(0);\\n}\\n100% {\\n    -webkit-transform: translateX(-1px) rotate(0);\\n    transform: translateX(-1px) rotate(0);\\n}\\n}\\n.hvr-buzz-out {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-buzz-out:hover, .hvr-buzz-out:focus, .hvr-buzz-out:active {\\n    -webkit-animation-name: hvr-buzz-out;\\n    animation-name: hvr-buzz-out;\\n    -webkit-animation-duration: 0.75s;\\n    animation-duration: 0.75s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* Forward */\\n.hvr-forward {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n}\\n.hvr-forward:hover, .hvr-forward:focus, .hvr-forward:active {\\n    -webkit-transform: translateX(8px);\\n    transform: translateX(8px);\\n}\\n\\n/* Backward */\\n.hvr-backward {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n}\\n.hvr-backward:hover, .hvr-backward:focus, .hvr-backward:active {\\n    -webkit-transform: translateX(-8px);\\n    transform: translateX(-8px);\\n}\\n\\n/* BACKGROUND TRANSITIONS */\\n/* Fade */\\n.hvr-fade {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  overflow: hidden;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: color, background-color;\\n  transition-property: color, background-color;\\n}\\n.hvr-fade:hover, .hvr-fade:focus, .hvr-fade:active {\\n    background-color: #2098D1;\\n    color: white;\\n}\\n\\n/* Back Pulse */\\n@-webkit-keyframes hvr-back-pulse {\\n50% {\\n    background-color: rgba(32, 152, 209, 0.75);\\n}\\n}\\n@keyframes hvr-back-pulse {\\n50% {\\n    background-color: rgba(32, 152, 209, 0.75);\\n}\\n}\\n.hvr-back-pulse {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  overflow: hidden;\\n  -webkit-transition-duration: 0.5s;\\n  transition-duration: 0.5s;\\n  -webkit-transition-property: color, background-color;\\n  transition-property: color, background-color;\\n}\\n.hvr-back-pulse:hover, .hvr-back-pulse:focus, .hvr-back-pulse:active {\\n    -webkit-animation-name: hvr-back-pulse;\\n    animation-name: hvr-back-pulse;\\n    -webkit-animation-duration: 1s;\\n    animation-duration: 1s;\\n    -webkit-animation-delay: 0.5s;\\n    animation-delay: 0.5s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: infinite;\\n    animation-iteration-count: infinite;\\n    background-color: #2098D1;\\n    background-color: #2098d1;\\n    color: white;\\n}\\n\\n/* Sweep To Right */\\n.hvr-sweep-to-right {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-sweep-to-right:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: #2098D1;\\n    -webkit-transform: scaleX(0);\\n    transform: scaleX(0);\\n    -webkit-transform-origin: 0 50%;\\n    transform-origin: 0 50%;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-sweep-to-right:hover, .hvr-sweep-to-right:focus, .hvr-sweep-to-right:active {\\n    color: white;\\n}\\n.hvr-sweep-to-right:hover:before, .hvr-sweep-to-right:focus:before, .hvr-sweep-to-right:active:before {\\n      -webkit-transform: scaleX(1);\\n      transform: scaleX(1);\\n}\\n\\n/* Sweep To Left */\\n.hvr-sweep-to-left {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-sweep-to-left:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: #2098D1;\\n    -webkit-transform: scaleX(0);\\n    transform: scaleX(0);\\n    -webkit-transform-origin: 100% 50%;\\n    transform-origin: 100% 50%;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-sweep-to-left:hover, .hvr-sweep-to-left:focus, .hvr-sweep-to-left:active {\\n    color: white;\\n}\\n.hvr-sweep-to-left:hover:before, .hvr-sweep-to-left:focus:before, .hvr-sweep-to-left:active:before {\\n      -webkit-transform: scaleX(1);\\n      transform: scaleX(1);\\n}\\n\\n/* Sweep To Bottom */\\n.hvr-sweep-to-bottom {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-sweep-to-bottom:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: #2098D1;\\n    -webkit-transform: scaleY(0);\\n    transform: scaleY(0);\\n    -webkit-transform-origin: 50% 0;\\n    transform-origin: 50% 0;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-sweep-to-bottom:hover, .hvr-sweep-to-bottom:focus, .hvr-sweep-to-bottom:active {\\n    color: white;\\n}\\n.hvr-sweep-to-bottom:hover:before, .hvr-sweep-to-bottom:focus:before, .hvr-sweep-to-bottom:active:before {\\n      -webkit-transform: scaleY(1);\\n      transform: scaleY(1);\\n}\\n\\n/* Sweep To Top */\\n.hvr-sweep-to-top {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-sweep-to-top:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: #2098D1;\\n    -webkit-transform: scaleY(0);\\n    transform: scaleY(0);\\n    -webkit-transform-origin: 50% 100%;\\n    transform-origin: 50% 100%;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-sweep-to-top:hover, .hvr-sweep-to-top:focus, .hvr-sweep-to-top:active {\\n    color: white;\\n}\\n.hvr-sweep-to-top:hover:before, .hvr-sweep-to-top:focus:before, .hvr-sweep-to-top:active:before {\\n      -webkit-transform: scaleY(1);\\n      transform: scaleY(1);\\n}\\n\\n/* Bounce To Right */\\n.hvr-bounce-to-right {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.5s;\\n  transition-duration: 0.5s;\\n}\\n.hvr-bounce-to-right:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: #2098D1;\\n    -webkit-transform: scaleX(0);\\n    transform: scaleX(0);\\n    -webkit-transform-origin: 0 50%;\\n    transform-origin: 0 50%;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.5s;\\n    transition-duration: 0.5s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-bounce-to-right:hover, .hvr-bounce-to-right:focus, .hvr-bounce-to-right:active {\\n    color: white;\\n}\\n.hvr-bounce-to-right:hover:before, .hvr-bounce-to-right:focus:before, .hvr-bounce-to-right:active:before {\\n      -webkit-transform: scaleX(1);\\n      transform: scaleX(1);\\n      -webkit-transition-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66);\\n      transition-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66);\\n}\\n\\n/* Bounce To Left */\\n.hvr-bounce-to-left {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.5s;\\n  transition-duration: 0.5s;\\n}\\n.hvr-bounce-to-left:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: #2098D1;\\n    -webkit-transform: scaleX(0);\\n    transform: scaleX(0);\\n    -webkit-transform-origin: 100% 50%;\\n    transform-origin: 100% 50%;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.5s;\\n    transition-duration: 0.5s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-bounce-to-left:hover, .hvr-bounce-to-left:focus, .hvr-bounce-to-left:active {\\n    color: white;\\n}\\n.hvr-bounce-to-left:hover:before, .hvr-bounce-to-left:focus:before, .hvr-bounce-to-left:active:before {\\n      -webkit-transform: scaleX(1);\\n      transform: scaleX(1);\\n      -webkit-transition-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66);\\n      transition-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66);\\n}\\n\\n/* Bounce To Bottom */\\n.hvr-bounce-to-bottom {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.5s;\\n  transition-duration: 0.5s;\\n}\\n.hvr-bounce-to-bottom:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: #2098D1;\\n    -webkit-transform: scaleY(0);\\n    transform: scaleY(0);\\n    -webkit-transform-origin: 50% 0;\\n    transform-origin: 50% 0;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.5s;\\n    transition-duration: 0.5s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-bounce-to-bottom:hover, .hvr-bounce-to-bottom:focus, .hvr-bounce-to-bottom:active {\\n    color: white;\\n}\\n.hvr-bounce-to-bottom:hover:before, .hvr-bounce-to-bottom:focus:before, .hvr-bounce-to-bottom:active:before {\\n      -webkit-transform: scaleY(1);\\n      transform: scaleY(1);\\n      -webkit-transition-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66);\\n      transition-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66);\\n}\\n\\n/* Bounce To Top */\\n.hvr-bounce-to-top {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.5s;\\n  transition-duration: 0.5s;\\n}\\n.hvr-bounce-to-top:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: #2098D1;\\n    -webkit-transform: scaleY(0);\\n    transform: scaleY(0);\\n    -webkit-transform-origin: 50% 100%;\\n    transform-origin: 50% 100%;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.5s;\\n    transition-duration: 0.5s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-bounce-to-top:hover, .hvr-bounce-to-top:focus, .hvr-bounce-to-top:active {\\n    color: white;\\n}\\n.hvr-bounce-to-top:hover:before, .hvr-bounce-to-top:focus:before, .hvr-bounce-to-top:active:before {\\n      -webkit-transform: scaleY(1);\\n      transform: scaleY(1);\\n      -webkit-transition-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66);\\n      transition-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66);\\n}\\n\\n/* Radial Out */\\n.hvr-radial-out {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  overflow: hidden;\\n  background: #e1e1e1;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-radial-out:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: #2098D1;\\n    border-radius: 100%;\\n    -webkit-transform: scale(0);\\n    transform: scale(0);\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-radial-out:hover, .hvr-radial-out:focus, .hvr-radial-out:active {\\n    color: white;\\n}\\n.hvr-radial-out:hover:before, .hvr-radial-out:focus:before, .hvr-radial-out:active:before {\\n      -webkit-transform: scale(2);\\n      transform: scale(2);\\n}\\n\\n/* Radial In */\\n.hvr-radial-in {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  overflow: hidden;\\n  background: #2098D1;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-radial-in:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: #e1e1e1;\\n    border-radius: 100%;\\n    -webkit-transform: scale(2);\\n    transform: scale(2);\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-radial-in:hover, .hvr-radial-in:focus, .hvr-radial-in:active {\\n    color: white;\\n}\\n.hvr-radial-in:hover:before, .hvr-radial-in:focus:before, .hvr-radial-in:active:before {\\n      -webkit-transform: scale(0);\\n      transform: scale(0);\\n}\\n\\n/* Rectangle In */\\n.hvr-rectangle-in {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  background: #2098D1;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-rectangle-in:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: #e1e1e1;\\n    -webkit-transform: scale(1);\\n    transform: scale(1);\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-rectangle-in:hover, .hvr-rectangle-in:focus, .hvr-rectangle-in:active {\\n    color: white;\\n}\\n.hvr-rectangle-in:hover:before, .hvr-rectangle-in:focus:before, .hvr-rectangle-in:active:before {\\n      -webkit-transform: scale(0);\\n      transform: scale(0);\\n}\\n\\n/* Rectangle Out */\\n.hvr-rectangle-out {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  background: #e1e1e1;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-rectangle-out:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: #2098D1;\\n    -webkit-transform: scale(0);\\n    transform: scale(0);\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-rectangle-out:hover, .hvr-rectangle-out:focus, .hvr-rectangle-out:active {\\n    color: white;\\n}\\n.hvr-rectangle-out:hover:before, .hvr-rectangle-out:focus:before, .hvr-rectangle-out:active:before {\\n      -webkit-transform: scale(1);\\n      transform: scale(1);\\n}\\n\\n/* Shutter In Horizontal */\\n.hvr-shutter-in-horizontal {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  background: #2098D1;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-shutter-in-horizontal:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    bottom: 0;\\n    left: 0;\\n    right: 0;\\n    background: #e1e1e1;\\n    -webkit-transform: scaleX(1);\\n    transform: scaleX(1);\\n    -webkit-transform-origin: 50%;\\n    transform-origin: 50%;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-shutter-in-horizontal:hover, .hvr-shutter-in-horizontal:focus, .hvr-shutter-in-horizontal:active {\\n    color: white;\\n}\\n.hvr-shutter-in-horizontal:hover:before, .hvr-shutter-in-horizontal:focus:before, .hvr-shutter-in-horizontal:active:before {\\n      -webkit-transform: scaleX(0);\\n      transform: scaleX(0);\\n}\\n\\n/* Shutter Out Horizontal */\\n.hvr-shutter-out-horizontal {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  background: #e1e1e1;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-shutter-out-horizontal:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    bottom: 0;\\n    left: 0;\\n    right: 0;\\n    background: #2098D1;\\n    -webkit-transform: scaleX(0);\\n    transform: scaleX(0);\\n    -webkit-transform-origin: 50%;\\n    transform-origin: 50%;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-shutter-out-horizontal:hover, .hvr-shutter-out-horizontal:focus, .hvr-shutter-out-horizontal:active {\\n    color: white;\\n}\\n.hvr-shutter-out-horizontal:hover:before, .hvr-shutter-out-horizontal:focus:before, .hvr-shutter-out-horizontal:active:before {\\n      -webkit-transform: scaleX(1);\\n      transform: scaleX(1);\\n}\\n\\n/* Shutter In Vertical */\\n.hvr-shutter-in-vertical {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  background: #2098D1;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-shutter-in-vertical:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    bottom: 0;\\n    left: 0;\\n    right: 0;\\n    background: #e1e1e1;\\n    -webkit-transform: scaleY(1);\\n    transform: scaleY(1);\\n    -webkit-transform-origin: 50%;\\n    transform-origin: 50%;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-shutter-in-vertical:hover, .hvr-shutter-in-vertical:focus, .hvr-shutter-in-vertical:active {\\n    color: white;\\n}\\n.hvr-shutter-in-vertical:hover:before, .hvr-shutter-in-vertical:focus:before, .hvr-shutter-in-vertical:active:before {\\n      -webkit-transform: scaleY(0);\\n      transform: scaleY(0);\\n}\\n\\n/* Shutter Out Vertical */\\n.hvr-shutter-out-vertical {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  background: #e1e1e1;\\n  -webkit-transition-property: color;\\n  transition-property: color;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-shutter-out-vertical:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    top: 0;\\n    bottom: 0;\\n    left: 0;\\n    right: 0;\\n    background: #2098D1;\\n    -webkit-transform: scaleY(0);\\n    transform: scaleY(0);\\n    -webkit-transform-origin: 50%;\\n    transform-origin: 50%;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-shutter-out-vertical:hover, .hvr-shutter-out-vertical:focus, .hvr-shutter-out-vertical:active {\\n    color: white;\\n}\\n.hvr-shutter-out-vertical:hover:before, .hvr-shutter-out-vertical:focus:before, .hvr-shutter-out-vertical:active:before {\\n      -webkit-transform: scaleY(1);\\n      transform: scaleY(1);\\n}\\n\\n/* BORDER TRANSITIONS */\\n/* Border Fade */\\n.hvr-border-fade {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: box-shadow;\\n  transition-property: box-shadow;\\n  box-shadow: inset 0 0 0 4px #e1e1e1, 0 0 1px rgba(0, 0, 0, 0);\\n  /* Hack to improve aliasing on mobile/tablet devices */\\n}\\n.hvr-border-fade:hover, .hvr-border-fade:focus, .hvr-border-fade:active {\\n    box-shadow: inset 0 0 0 4px #2098D1, 0 0 1px rgba(0, 0, 0, 0);\\n    /* Hack to improve aliasing on mobile/tablet devices */\\n}\\n\\n/* Hollow */\\n.hvr-hollow {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: background;\\n  transition-property: background;\\n  box-shadow: inset 0 0 0 4px #e1e1e1, 0 0 1px rgba(0, 0, 0, 0);\\n  /* Hack to improve aliasing on mobile/tablet devices */\\n}\\n.hvr-hollow:hover, .hvr-hollow:focus, .hvr-hollow:active {\\n    background: none;\\n}\\n\\n/* Trim */\\n.hvr-trim {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n}\\n.hvr-trim:before {\\n    content: '';\\n    position: absolute;\\n    border: white solid 4px;\\n    top: 4px;\\n    left: 4px;\\n    right: 4px;\\n    bottom: 4px;\\n    opacity: 0;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: opacity;\\n    transition-property: opacity;\\n}\\n.hvr-trim:hover:before, .hvr-trim:focus:before, .hvr-trim:active:before {\\n    opacity: 1;\\n}\\n\\n/* Ripple Out */\\n@-webkit-keyframes hvr-ripple-out {\\n100% {\\n    top: -12px;\\n    right: -12px;\\n    bottom: -12px;\\n    left: -12px;\\n    opacity: 0;\\n}\\n}\\n@keyframes hvr-ripple-out {\\n100% {\\n    top: -12px;\\n    right: -12px;\\n    bottom: -12px;\\n    left: -12px;\\n    opacity: 0;\\n}\\n}\\n.hvr-ripple-out {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n}\\n.hvr-ripple-out:before {\\n    content: '';\\n    position: absolute;\\n    border: #e1e1e1 solid 6px;\\n    top: 0;\\n    right: 0;\\n    bottom: 0;\\n    left: 0;\\n    -webkit-animation-duration: 1s;\\n    animation-duration: 1s;\\n}\\n.hvr-ripple-out:hover:before, .hvr-ripple-out:focus:before, .hvr-ripple-out:active:before {\\n    -webkit-animation-name: hvr-ripple-out;\\n    animation-name: hvr-ripple-out;\\n}\\n\\n/* Ripple In */\\n@-webkit-keyframes hvr-ripple-in {\\n100% {\\n    top: 0;\\n    right: 0;\\n    bottom: 0;\\n    left: 0;\\n    opacity: 1;\\n}\\n}\\n@keyframes hvr-ripple-in {\\n100% {\\n    top: 0;\\n    right: 0;\\n    bottom: 0;\\n    left: 0;\\n    opacity: 1;\\n}\\n}\\n.hvr-ripple-in {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n}\\n.hvr-ripple-in:before {\\n    content: '';\\n    position: absolute;\\n    border: #e1e1e1 solid 4px;\\n    top: -12px;\\n    right: -12px;\\n    bottom: -12px;\\n    left: -12px;\\n    opacity: 0;\\n    -webkit-animation-duration: 1s;\\n    animation-duration: 1s;\\n}\\n.hvr-ripple-in:hover:before, .hvr-ripple-in:focus:before, .hvr-ripple-in:active:before {\\n    -webkit-animation-name: hvr-ripple-in;\\n    animation-name: hvr-ripple-in;\\n}\\n\\n/* Outline Out */\\n.hvr-outline-out {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n}\\n.hvr-outline-out:before {\\n    content: '';\\n    position: absolute;\\n    border: #e1e1e1 solid 4px;\\n    top: 0;\\n    right: 0;\\n    bottom: 0;\\n    left: 0;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: top, right, bottom, left;\\n    transition-property: top, right, bottom, left;\\n}\\n.hvr-outline-out:hover:before, .hvr-outline-out:focus:before, .hvr-outline-out:active:before {\\n    top: -8px;\\n    right: -8px;\\n    bottom: -8px;\\n    left: -8px;\\n}\\n\\n/* Outline In */\\n.hvr-outline-in {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n}\\n.hvr-outline-in:before {\\n    pointer-events: none;\\n    content: '';\\n    position: absolute;\\n    border: #e1e1e1 solid 4px;\\n    top: -16px;\\n    right: -16px;\\n    bottom: -16px;\\n    left: -16px;\\n    opacity: 0;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: top, right, bottom, left;\\n    transition-property: top, right, bottom, left;\\n}\\n.hvr-outline-in:hover:before, .hvr-outline-in:focus:before, .hvr-outline-in:active:before {\\n    top: -8px;\\n    right: -8px;\\n    bottom: -8px;\\n    left: -8px;\\n    opacity: 1;\\n}\\n\\n/* Round Corners */\\n.hvr-round-corners {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: border-radius;\\n  transition-property: border-radius;\\n}\\n.hvr-round-corners:hover, .hvr-round-corners:focus, .hvr-round-corners:active {\\n    border-radius: 1em;\\n}\\n\\n/* Underline From Left */\\n.hvr-underline-from-left {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  overflow: hidden;\\n}\\n.hvr-underline-from-left:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    left: 0;\\n    right: 100%;\\n    bottom: 0;\\n    background: #2098D1;\\n    height: 4px;\\n    -webkit-transition-property: right;\\n    transition-property: right;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-underline-from-left:hover:before, .hvr-underline-from-left:focus:before, .hvr-underline-from-left:active:before {\\n    right: 0;\\n}\\n\\n/* Underline From Center */\\n.hvr-underline-from-center {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  overflow: hidden;\\n}\\n.hvr-underline-from-center:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    left: 51%;\\n    right: 51%;\\n    bottom: 0;\\n    background: #2098D1;\\n    height: 4px;\\n    -webkit-transition-property: left, right;\\n    transition-property: left, right;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-underline-from-center:hover:before, .hvr-underline-from-center:focus:before, .hvr-underline-from-center:active:before {\\n    left: 0;\\n    right: 0;\\n}\\n\\n/* Underline From Right */\\n.hvr-underline-from-right {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  overflow: hidden;\\n}\\n.hvr-underline-from-right:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    left: 100%;\\n    right: 0;\\n    bottom: 0;\\n    background: #2098D1;\\n    height: 4px;\\n    -webkit-transition-property: left;\\n    transition-property: left;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-underline-from-right:hover:before, .hvr-underline-from-right:focus:before, .hvr-underline-from-right:active:before {\\n    left: 0;\\n}\\n\\n/* Overline From Left */\\n.hvr-overline-from-left {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  overflow: hidden;\\n}\\n.hvr-overline-from-left:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    left: 0;\\n    right: 100%;\\n    top: 0;\\n    background: #2098D1;\\n    height: 4px;\\n    -webkit-transition-property: right;\\n    transition-property: right;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-overline-from-left:hover:before, .hvr-overline-from-left:focus:before, .hvr-overline-from-left:active:before {\\n    right: 0;\\n}\\n\\n/* Overline From Center */\\n.hvr-overline-from-center {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  overflow: hidden;\\n}\\n.hvr-overline-from-center:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    left: 51%;\\n    right: 51%;\\n    top: 0;\\n    background: #2098D1;\\n    height: 4px;\\n    -webkit-transition-property: left, right;\\n    transition-property: left, right;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-overline-from-center:hover:before, .hvr-overline-from-center:focus:before, .hvr-overline-from-center:active:before {\\n    left: 0;\\n    right: 0;\\n}\\n\\n/* Overline From Right */\\n.hvr-overline-from-right {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  overflow: hidden;\\n}\\n.hvr-overline-from-right:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    left: 100%;\\n    right: 0;\\n    top: 0;\\n    background: #2098D1;\\n    height: 4px;\\n    -webkit-transition-property: left;\\n    transition-property: left;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-overline-from-right:hover:before, .hvr-overline-from-right:focus:before, .hvr-overline-from-right:active:before {\\n    left: 0;\\n}\\n\\n/* Reveal */\\n.hvr-reveal {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  overflow: hidden;\\n}\\n.hvr-reveal:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    left: 0;\\n    right: 0;\\n    top: 0;\\n    bottom: 0;\\n    border-color: #2098D1;\\n    border-style: solid;\\n    border-width: 0;\\n    -webkit-transition-property: border-width;\\n    transition-property: border-width;\\n    -webkit-transition-duration: 0.1s;\\n    transition-duration: 0.1s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-reveal:hover:before, .hvr-reveal:focus:before, .hvr-reveal:active:before {\\n    -webkit-transform: translateY(0);\\n    transform: translateY(0);\\n    border-width: 4px;\\n}\\n\\n/* Underline Reveal */\\n.hvr-underline-reveal {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  overflow: hidden;\\n}\\n.hvr-underline-reveal:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    background: #2098D1;\\n    height: 4px;\\n    -webkit-transform: translateY(4px);\\n    transform: translateY(4px);\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-underline-reveal:hover:before, .hvr-underline-reveal:focus:before, .hvr-underline-reveal:active:before {\\n    -webkit-transform: translateY(0);\\n    transform: translateY(0);\\n}\\n\\n/* Overline Reveal */\\n.hvr-overline-reveal {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  overflow: hidden;\\n}\\n.hvr-overline-reveal:before {\\n    content: \\\"\\\";\\n    position: absolute;\\n    z-index: -1;\\n    left: 0;\\n    right: 0;\\n    top: 0;\\n    background: #2098D1;\\n    height: 4px;\\n    -webkit-transform: translateY(-4px);\\n    transform: translateY(-4px);\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-overline-reveal:hover:before, .hvr-overline-reveal:focus:before, .hvr-overline-reveal:active:before {\\n    -webkit-transform: translateY(0);\\n    transform: translateY(0);\\n}\\n\\n/* SHADOW/GLOW TRANSITIONS */\\n/* Glow */\\n.hvr-glow {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: box-shadow;\\n  transition-property: box-shadow;\\n}\\n.hvr-glow:hover, .hvr-glow:focus, .hvr-glow:active {\\n    box-shadow: 0 0 8px rgba(0, 0, 0, 0.6);\\n}\\n\\n/* Shadow */\\n.hvr-shadow {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: box-shadow;\\n  transition-property: box-shadow;\\n}\\n.hvr-shadow:hover, .hvr-shadow:focus, .hvr-shadow:active {\\n    box-shadow: 0 10px 10px -10px rgba(0, 0, 0, 0.5);\\n}\\n\\n/* Grow Shadow */\\n.hvr-grow-shadow {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: box-shadow, transform;\\n  transition-property: box-shadow, transform;\\n}\\n.hvr-grow-shadow:hover, .hvr-grow-shadow:focus, .hvr-grow-shadow:active {\\n    box-shadow: 0 10px 10px -10px rgba(0, 0, 0, 0.5);\\n    -webkit-transform: scale(1.1);\\n    transform: scale(1.1);\\n}\\n\\n/* Box Shadow Outset */\\n.hvr-box-shadow-outset {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: box-shadow;\\n  transition-property: box-shadow;\\n}\\n.hvr-box-shadow-outset:hover, .hvr-box-shadow-outset:focus, .hvr-box-shadow-outset:active {\\n    box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.6);\\n}\\n\\n/* Box Shadow Inset */\\n.hvr-box-shadow-inset {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: box-shadow;\\n  transition-property: box-shadow;\\n  box-shadow: inset 0 0 0 rgba(0, 0, 0, 0.6), 0 0 1px rgba(0, 0, 0, 0);\\n  /* Hack to improve aliasing on mobile/tablet devices */\\n}\\n.hvr-box-shadow-inset:hover, .hvr-box-shadow-inset:focus, .hvr-box-shadow-inset:active {\\n    box-shadow: inset 2px 2px 2px rgba(0, 0, 0, 0.6), 0 0 1px rgba(0, 0, 0, 0);\\n    /* Hack to improve aliasing on mobile/tablet devices */\\n}\\n\\n/* Float Shadow */\\n.hvr-float-shadow {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n}\\n.hvr-float-shadow:before {\\n    pointer-events: none;\\n    position: absolute;\\n    z-index: -1;\\n    content: '';\\n    top: 100%;\\n    left: 5%;\\n    height: 10px;\\n    width: 90%;\\n    opacity: 0;\\n    background: -webkit-radial-gradient(center, ellipse, rgba(0, 0, 0, 0.35) 0%, rgba(0, 0, 0, 0) 80%);\\n    background: radial-gradient(ellipse at center, rgba(0, 0, 0, 0.35) 0%, rgba(0, 0, 0, 0) 80%);\\n    /* W3C */\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform, opacity;\\n    transition-property: transform, opacity;\\n}\\n.hvr-float-shadow:hover, .hvr-float-shadow:focus, .hvr-float-shadow:active {\\n    -webkit-transform: translateY(-5px);\\n    transform: translateY(-5px);\\n    /* move the element up by 5px */\\n}\\n.hvr-float-shadow:hover:before, .hvr-float-shadow:focus:before, .hvr-float-shadow:active:before {\\n      opacity: 1;\\n      -webkit-transform: translateY(5px);\\n      transform: translateY(5px);\\n      /* move the element down by 5px (it will stay in place because it's attached to the element that also moves up 5px) */\\n}\\n\\n/* Shadow Radial */\\n.hvr-shadow-radial {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n}\\n.hvr-shadow-radial:before, .hvr-shadow-radial:after {\\n    pointer-events: none;\\n    position: absolute;\\n    content: '';\\n    left: 0;\\n    width: 100%;\\n    box-sizing: border-box;\\n    background-repeat: no-repeat;\\n    height: 5px;\\n    opacity: 0;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: opacity;\\n    transition-property: opacity;\\n}\\n.hvr-shadow-radial:before {\\n    bottom: 100%;\\n    background: -webkit-radial-gradient(50% 150%, ellipse, rgba(0, 0, 0, 0.6) 0%, rgba(0, 0, 0, 0) 80%);\\n    background: radial-gradient(ellipse at 50% 150%, rgba(0, 0, 0, 0.6) 0%, rgba(0, 0, 0, 0) 80%);\\n}\\n.hvr-shadow-radial:after {\\n    top: 100%;\\n    background: -webkit-radial-gradient(50% -50%, ellipse, rgba(0, 0, 0, 0.6) 0%, rgba(0, 0, 0, 0) 80%);\\n    background: radial-gradient(ellipse at 50% -50%, rgba(0, 0, 0, 0.6) 0%, rgba(0, 0, 0, 0) 80%);\\n}\\n.hvr-shadow-radial:hover:before, .hvr-shadow-radial:focus:before, .hvr-shadow-radial:active:before, .hvr-shadow-radial:hover:after, .hvr-shadow-radial:focus:after, .hvr-shadow-radial:active:after {\\n    opacity: 1;\\n}\\n\\n/* SPEECH BUBBLES */\\n/* Bubble Top */\\n.hvr-bubble-top {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n}\\n.hvr-bubble-top:before {\\n    pointer-events: none;\\n    position: absolute;\\n    z-index: -1;\\n    content: '';\\n    border-style: solid;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    left: calc(50% - 10px);\\n    top: 0;\\n    border-width: 0 10px 10px 10px;\\n    border-color: transparent transparent #e1e1e1 transparent;\\n}\\n.hvr-bubble-top:hover:before, .hvr-bubble-top:focus:before, .hvr-bubble-top:active:before {\\n    -webkit-transform: translateY(-10px);\\n    transform: translateY(-10px);\\n}\\n\\n/* Bubble Right */\\n.hvr-bubble-right {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n}\\n.hvr-bubble-right:before {\\n    pointer-events: none;\\n    position: absolute;\\n    z-index: -1;\\n    content: '';\\n    border-style: solid;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    top: calc(50% - 10px);\\n    right: 0;\\n    border-width: 10px 0 10px 10px;\\n    border-color: transparent transparent transparent #e1e1e1;\\n}\\n.hvr-bubble-right:hover:before, .hvr-bubble-right:focus:before, .hvr-bubble-right:active:before {\\n    -webkit-transform: translateX(10px);\\n    transform: translateX(10px);\\n}\\n\\n/* Bubble Bottom */\\n.hvr-bubble-bottom {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n}\\n.hvr-bubble-bottom:before {\\n    pointer-events: none;\\n    position: absolute;\\n    z-index: -1;\\n    content: '';\\n    border-style: solid;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    left: calc(50% - 10px);\\n    bottom: 0;\\n    border-width: 10px 10px 0 10px;\\n    border-color: #e1e1e1 transparent transparent transparent;\\n}\\n.hvr-bubble-bottom:hover:before, .hvr-bubble-bottom:focus:before, .hvr-bubble-bottom:active:before {\\n    -webkit-transform: translateY(10px);\\n    transform: translateY(10px);\\n}\\n\\n/* Bubble Left */\\n.hvr-bubble-left {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n}\\n.hvr-bubble-left:before {\\n    pointer-events: none;\\n    position: absolute;\\n    z-index: -1;\\n    content: '';\\n    border-style: solid;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    top: calc(50% - 10px);\\n    left: 0;\\n    border-width: 10px 10px 10px 0;\\n    border-color: transparent #e1e1e1 transparent transparent;\\n}\\n.hvr-bubble-left:hover:before, .hvr-bubble-left:focus:before, .hvr-bubble-left:active:before {\\n    -webkit-transform: translateX(-10px);\\n    transform: translateX(-10px);\\n}\\n\\n/* Bubble Float Top */\\n.hvr-bubble-float-top {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n}\\n.hvr-bubble-float-top:before {\\n    position: absolute;\\n    z-index: -1;\\n    content: '';\\n    left: calc(50% - 10px);\\n    top: 0;\\n    border-style: solid;\\n    border-width: 0 10px 10px 10px;\\n    border-color: transparent transparent #e1e1e1 transparent;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n}\\n.hvr-bubble-float-top:hover, .hvr-bubble-float-top:focus, .hvr-bubble-float-top:active {\\n    -webkit-transform: translateY(10px);\\n    transform: translateY(10px);\\n}\\n.hvr-bubble-float-top:hover:before, .hvr-bubble-float-top:focus:before, .hvr-bubble-float-top:active:before {\\n      -webkit-transform: translateY(-10px);\\n      transform: translateY(-10px);\\n}\\n\\n/* Bubble Float Right */\\n.hvr-bubble-float-right {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n}\\n.hvr-bubble-float-right:before {\\n    position: absolute;\\n    z-index: -1;\\n    top: calc(50% - 10px);\\n    right: 0;\\n    content: '';\\n    border-style: solid;\\n    border-width: 10px 0 10px 10px;\\n    border-color: transparent transparent transparent #e1e1e1;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n}\\n.hvr-bubble-float-right:hover, .hvr-bubble-float-right:focus, .hvr-bubble-float-right:active {\\n    -webkit-transform: translateX(-10px);\\n    transform: translateX(-10px);\\n}\\n.hvr-bubble-float-right:hover:before, .hvr-bubble-float-right:focus:before, .hvr-bubble-float-right:active:before {\\n      -webkit-transform: translateX(10px);\\n      transform: translateX(10px);\\n}\\n\\n/* Bubble Float Bottom */\\n.hvr-bubble-float-bottom {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n}\\n.hvr-bubble-float-bottom:before {\\n    position: absolute;\\n    z-index: -1;\\n    content: '';\\n    left: calc(50% - 10px);\\n    bottom: 0;\\n    border-style: solid;\\n    border-width: 10px 10px 0 10px;\\n    border-color: #e1e1e1 transparent transparent transparent;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n}\\n.hvr-bubble-float-bottom:hover, .hvr-bubble-float-bottom:focus, .hvr-bubble-float-bottom:active {\\n    -webkit-transform: translateY(-10px);\\n    transform: translateY(-10px);\\n}\\n.hvr-bubble-float-bottom:hover:before, .hvr-bubble-float-bottom:focus:before, .hvr-bubble-float-bottom:active:before {\\n      -webkit-transform: translateY(10px);\\n      transform: translateY(10px);\\n}\\n\\n/* Bubble Float Left */\\n.hvr-bubble-float-left {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n  -webkit-transition-property: transform;\\n  transition-property: transform;\\n}\\n.hvr-bubble-float-left:before {\\n    position: absolute;\\n    z-index: -1;\\n    content: '';\\n    top: calc(50% - 10px);\\n    left: 0;\\n    border-style: solid;\\n    border-width: 10px 10px 10px 0;\\n    border-color: transparent #e1e1e1 transparent transparent;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n}\\n.hvr-bubble-float-left:hover, .hvr-bubble-float-left:focus, .hvr-bubble-float-left:active {\\n    -webkit-transform: translateX(10px);\\n    transform: translateX(10px);\\n}\\n.hvr-bubble-float-left:hover:before, .hvr-bubble-float-left:focus:before, .hvr-bubble-float-left:active:before {\\n      -webkit-transform: translateX(-10px);\\n      transform: translateX(-10px);\\n}\\n\\n/* ICONS */\\n/* Icon Back */\\n.hvr-icon-back {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.1s;\\n  transition-duration: 0.1s;\\n}\\n.hvr-icon-back .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-duration: 0.1s;\\n    transition-duration: 0.1s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-icon-back:hover .hvr-icon, .hvr-icon-back:focus .hvr-icon, .hvr-icon-back:active .hvr-icon {\\n    -webkit-transform: translateX(-4px);\\n    transform: translateX(-4px);\\n}\\n\\n/* Icon Forward */\\n.hvr-icon-forward {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.1s;\\n  transition-duration: 0.1s;\\n}\\n.hvr-icon-forward .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-duration: 0.1s;\\n    transition-duration: 0.1s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-icon-forward:hover .hvr-icon, .hvr-icon-forward:focus .hvr-icon, .hvr-icon-forward:active .hvr-icon {\\n    -webkit-transform: translateX(4px);\\n    transform: translateX(4px);\\n}\\n\\n/* Icon Down */\\n@-webkit-keyframes hvr-icon-down {\\n0%,\\n  50%,\\n  100% {\\n    -webkit-transform: translateY(0);\\n    transform: translateY(0);\\n}\\n25%,\\n  75% {\\n    -webkit-transform: translateY(6px);\\n    transform: translateY(6px);\\n}\\n}\\n@keyframes hvr-icon-down {\\n0%,\\n  50%,\\n  100% {\\n    -webkit-transform: translateY(0);\\n    transform: translateY(0);\\n}\\n25%,\\n  75% {\\n    -webkit-transform: translateY(6px);\\n    transform: translateY(6px);\\n}\\n}\\n\\n/* Icon Down */\\n.hvr-icon-down {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-icon-down .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n}\\n.hvr-icon-down:hover .hvr-icon, .hvr-icon-down:focus .hvr-icon, .hvr-icon-down:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-down;\\n    animation-name: hvr-icon-down;\\n    -webkit-animation-duration: 0.75s;\\n    animation-duration: 0.75s;\\n    -webkit-animation-timing-function: ease-out;\\n    animation-timing-function: ease-out;\\n}\\n\\n/* Icon Up */\\n@-webkit-keyframes hvr-icon-up {\\n0%,\\n  50%,\\n  100% {\\n    -webkit-transform: translateY(0);\\n    transform: translateY(0);\\n}\\n25%,\\n  75% {\\n    -webkit-transform: translateY(-6px);\\n    transform: translateY(-6px);\\n}\\n}\\n@keyframes hvr-icon-up {\\n0%,\\n  50%,\\n  100% {\\n    -webkit-transform: translateY(0);\\n    transform: translateY(0);\\n}\\n25%,\\n  75% {\\n    -webkit-transform: translateY(-6px);\\n    transform: translateY(-6px);\\n}\\n}\\n\\n/* Icon Up */\\n.hvr-icon-up {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-icon-up .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n}\\n.hvr-icon-up:hover .hvr-icon, .hvr-icon-up:focus .hvr-icon, .hvr-icon-up:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-up;\\n    animation-name: hvr-icon-up;\\n    -webkit-animation-duration: 0.75s;\\n    animation-duration: 0.75s;\\n    -webkit-animation-timing-function: ease-out;\\n    animation-timing-function: ease-out;\\n}\\n\\n/* Icon Spin */\\n.hvr-icon-spin {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-icon-spin .hvr-icon {\\n    -webkit-transition-duration: 1s;\\n    transition-duration: 1s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-timing-function: ease-in-out;\\n    transition-timing-function: ease-in-out;\\n}\\n.hvr-icon-spin:hover .hvr-icon, .hvr-icon-spin:focus .hvr-icon, .hvr-icon-spin:active .hvr-icon {\\n    -webkit-transform: rotate(360deg);\\n    transform: rotate(360deg);\\n}\\n\\n/* Icon Drop */\\n@-webkit-keyframes hvr-icon-drop {\\n0% {\\n    opacity: 0;\\n}\\n50% {\\n    opacity: 0;\\n    -webkit-transform: translateY(-100%);\\n    transform: translateY(-100%);\\n}\\n51%,\\n  100% {\\n    opacity: 1;\\n}\\n}\\n@keyframes hvr-icon-drop {\\n0% {\\n    opacity: 0;\\n}\\n50% {\\n    opacity: 0;\\n    -webkit-transform: translateY(-100%);\\n    transform: translateY(-100%);\\n}\\n51%,\\n  100% {\\n    opacity: 1;\\n}\\n}\\n\\n/* Icon Drop */\\n.hvr-icon-drop {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-icon-drop .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n}\\n.hvr-icon-drop:hover .hvr-icon, .hvr-icon-drop:focus .hvr-icon, .hvr-icon-drop:active .hvr-icon {\\n    opacity: 0;\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-animation-name: hvr-icon-drop;\\n    animation-name: hvr-icon-drop;\\n    -webkit-animation-duration: 0.5s;\\n    animation-duration: 0.5s;\\n    -webkit-animation-delay: 0.3s;\\n    animation-delay: 0.3s;\\n    -webkit-animation-fill-mode: forwards;\\n    animation-fill-mode: forwards;\\n    -webkit-animation-timing-function: ease-in-out;\\n    animation-timing-function: ease-in-out;\\n    -webkit-animation-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66);\\n    animation-timing-function: cubic-bezier(0.52, 1.64, 0.37, 0.66);\\n}\\n\\n/* Icon Fade */\\n.hvr-icon-fade {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-icon-fade .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-duration: 0.5s;\\n    transition-duration: 0.5s;\\n    -webkit-transition-property: color;\\n    transition-property: color;\\n}\\n.hvr-icon-fade:hover .hvr-icon, .hvr-icon-fade:focus .hvr-icon, .hvr-icon-fade:active .hvr-icon {\\n    color: #0F9E5E;\\n}\\n\\n/* Icon Float Away */\\n@-webkit-keyframes hvr-icon-float-away {\\n0% {\\n    opacity: 1;\\n}\\n100% {\\n    opacity: 0;\\n    -webkit-transform: translateY(-1em);\\n    transform: translateY(-1em);\\n}\\n}\\n@keyframes hvr-icon-float-away {\\n0% {\\n    opacity: 1;\\n}\\n100% {\\n    opacity: 0;\\n    -webkit-transform: translateY(-1em);\\n    transform: translateY(-1em);\\n}\\n}\\n\\n/* Icon Float Away */\\n.hvr-icon-float-away {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-icon-float-away .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-animation-duration: 0.5s;\\n    animation-duration: 0.5s;\\n    -webkit-animation-fill-mode: forwards;\\n    animation-fill-mode: forwards;\\n}\\n.hvr-icon-float-away:hover .hvr-icon, .hvr-icon-float-away:focus .hvr-icon, .hvr-icon-float-away:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-float-away;\\n    animation-name: hvr-icon-float-away;\\n    -webkit-animation-timing-function: ease-out;\\n    animation-timing-function: ease-out;\\n}\\n\\n/* Icon Sink Away */\\n@-webkit-keyframes hvr-icon-sink-away {\\n0% {\\n    opacity: 1;\\n}\\n100% {\\n    opacity: 0;\\n    -webkit-transform: translateY(1em);\\n    transform: translateY(1em);\\n}\\n}\\n@keyframes hvr-icon-sink-away {\\n0% {\\n    opacity: 1;\\n}\\n100% {\\n    opacity: 0;\\n    -webkit-transform: translateY(1em);\\n    transform: translateY(1em);\\n}\\n}\\n\\n/* Icon Sink Away */\\n.hvr-icon-sink-away {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-icon-sink-away .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-animation-duration: 0.5s;\\n    animation-duration: 0.5s;\\n    -webkit-animation-fill-mode: forwards;\\n    animation-fill-mode: forwards;\\n}\\n.hvr-icon-sink-away:hover .hvr-icon, .hvr-icon-sink-away:focus .hvr-icon, .hvr-icon-sink-away:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-sink-away;\\n    animation-name: hvr-icon-sink-away;\\n    -webkit-animation-timing-function: ease-out;\\n    animation-timing-function: ease-out;\\n}\\n\\n/* Icon Grow */\\n.hvr-icon-grow {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-grow .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-icon-grow:hover .hvr-icon, .hvr-icon-grow:focus .hvr-icon, .hvr-icon-grow:active .hvr-icon {\\n    -webkit-transform: scale(1.3) translateZ(0);\\n    transform: scale(1.3) translateZ(0);\\n}\\n\\n/* Icon Shrink */\\n.hvr-icon-shrink {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-shrink .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-icon-shrink:hover .hvr-icon, .hvr-icon-shrink:focus .hvr-icon, .hvr-icon-shrink:active .hvr-icon {\\n    -webkit-transform: scale(0.8);\\n    transform: scale(0.8);\\n}\\n\\n/* Icon Pulse */\\n@-webkit-keyframes hvr-icon-pulse {\\n25% {\\n    -webkit-transform: scale(1.3);\\n    transform: scale(1.3);\\n}\\n75% {\\n    -webkit-transform: scale(0.8);\\n    transform: scale(0.8);\\n}\\n}\\n@keyframes hvr-icon-pulse {\\n25% {\\n    -webkit-transform: scale(1.3);\\n    transform: scale(1.3);\\n}\\n75% {\\n    -webkit-transform: scale(0.8);\\n    transform: scale(0.8);\\n}\\n}\\n.hvr-icon-pulse {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-icon-pulse .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-icon-pulse:hover .hvr-icon, .hvr-icon-pulse:focus .hvr-icon, .hvr-icon-pulse:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-pulse;\\n    animation-name: hvr-icon-pulse;\\n    -webkit-animation-duration: 1s;\\n    animation-duration: 1s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: infinite;\\n    animation-iteration-count: infinite;\\n}\\n\\n/* Icon Pulse Grow */\\n@-webkit-keyframes hvr-icon-pulse-grow {\\nto {\\n    -webkit-transform: scale(1.3);\\n    transform: scale(1.3);\\n}\\n}\\n@keyframes hvr-icon-pulse-grow {\\nto {\\n    -webkit-transform: scale(1.3);\\n    transform: scale(1.3);\\n}\\n}\\n.hvr-icon-pulse-grow {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-icon-pulse-grow .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-icon-pulse-grow:hover .hvr-icon, .hvr-icon-pulse-grow:focus .hvr-icon, .hvr-icon-pulse-grow:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-pulse-grow;\\n    animation-name: hvr-icon-pulse-grow;\\n    -webkit-animation-duration: 0.3s;\\n    animation-duration: 0.3s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: infinite;\\n    animation-iteration-count: infinite;\\n    -webkit-animation-direction: alternate;\\n    animation-direction: alternate;\\n}\\n\\n/* Icon Pulse Shrink */\\n@-webkit-keyframes hvr-icon-pulse-shrink {\\nto {\\n    -webkit-transform: scale(0.8);\\n    transform: scale(0.8);\\n}\\n}\\n@keyframes hvr-icon-pulse-shrink {\\nto {\\n    -webkit-transform: scale(0.8);\\n    transform: scale(0.8);\\n}\\n}\\n.hvr-icon-pulse-shrink {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n}\\n.hvr-icon-pulse-shrink .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-icon-pulse-shrink:hover .hvr-icon, .hvr-icon-pulse-shrink:focus .hvr-icon, .hvr-icon-pulse-shrink:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-pulse-shrink;\\n    animation-name: hvr-icon-pulse-shrink;\\n    -webkit-animation-duration: 0.3s;\\n    animation-duration: 0.3s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: infinite;\\n    animation-iteration-count: infinite;\\n    -webkit-animation-direction: alternate;\\n    animation-direction: alternate;\\n}\\n\\n/* Icon Push */\\n@-webkit-keyframes hvr-icon-push {\\n50% {\\n    -webkit-transform: scale(0.5);\\n    transform: scale(0.5);\\n}\\n}\\n@keyframes hvr-icon-push {\\n50% {\\n    -webkit-transform: scale(0.5);\\n    transform: scale(0.5);\\n}\\n}\\n.hvr-icon-push {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-push .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-icon-push:hover .hvr-icon, .hvr-icon-push:focus .hvr-icon, .hvr-icon-push:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-push;\\n    animation-name: hvr-icon-push;\\n    -webkit-animation-duration: 0.3s;\\n    animation-duration: 0.3s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* Icon Pop */\\n@-webkit-keyframes hvr-icon-pop {\\n50% {\\n    -webkit-transform: scale(1.5);\\n    transform: scale(1.5);\\n}\\n}\\n@keyframes hvr-icon-pop {\\n50% {\\n    -webkit-transform: scale(1.5);\\n    transform: scale(1.5);\\n}\\n}\\n.hvr-icon-pop {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-pop .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-icon-pop:hover .hvr-icon, .hvr-icon-pop:focus .hvr-icon, .hvr-icon-pop:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-pop;\\n    animation-name: hvr-icon-pop;\\n    -webkit-animation-duration: 0.3s;\\n    animation-duration: 0.3s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* Icon Bounce */\\n.hvr-icon-bounce {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-bounce .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-icon-bounce:hover .hvr-icon, .hvr-icon-bounce:focus .hvr-icon, .hvr-icon-bounce:active .hvr-icon {\\n    -webkit-transform: scale(1.5);\\n    transform: scale(1.5);\\n    -webkit-transition-timing-function: cubic-bezier(0.47, 2.02, 0.31, -0.36);\\n    transition-timing-function: cubic-bezier(0.47, 2.02, 0.31, -0.36);\\n}\\n\\n/* Icon Rotate */\\n.hvr-icon-rotate {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-rotate .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-icon-rotate:hover .hvr-icon, .hvr-icon-rotate:focus .hvr-icon, .hvr-icon-rotate:active .hvr-icon {\\n    -webkit-transform: rotate(20deg);\\n    transform: rotate(20deg);\\n}\\n\\n/* Icon Grow Rotate */\\n.hvr-icon-grow-rotate {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-grow-rotate .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-icon-grow-rotate:hover .hvr-icon, .hvr-icon-grow-rotate:focus .hvr-icon, .hvr-icon-grow-rotate:active .hvr-icon {\\n    -webkit-transform: scale(1.5) rotate(12deg);\\n    transform: scale(1.5) rotate(12deg);\\n}\\n\\n/* Icon Float */\\n.hvr-icon-float {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-float .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-icon-float:hover .hvr-icon, .hvr-icon-float:focus .hvr-icon, .hvr-icon-float:active .hvr-icon {\\n    -webkit-transform: translateY(-4px);\\n    transform: translateY(-4px);\\n}\\n\\n/* Icon Sink */\\n.hvr-icon-sink {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-sink .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: transform;\\n    transition-property: transform;\\n    -webkit-transition-timing-function: ease-out;\\n    transition-timing-function: ease-out;\\n}\\n.hvr-icon-sink:hover .hvr-icon, .hvr-icon-sink:focus .hvr-icon, .hvr-icon-sink:active .hvr-icon {\\n    -webkit-transform: translateY(4px);\\n    transform: translateY(4px);\\n}\\n\\n/* Icon Bob */\\n@-webkit-keyframes hvr-icon-bob {\\n0% {\\n    -webkit-transform: translateY(-6px);\\n    transform: translateY(-6px);\\n}\\n50% {\\n    -webkit-transform: translateY(-2px);\\n    transform: translateY(-2px);\\n}\\n100% {\\n    -webkit-transform: translateY(-6px);\\n    transform: translateY(-6px);\\n}\\n}\\n@keyframes hvr-icon-bob {\\n0% {\\n    -webkit-transform: translateY(-6px);\\n    transform: translateY(-6px);\\n}\\n50% {\\n    -webkit-transform: translateY(-2px);\\n    transform: translateY(-2px);\\n}\\n100% {\\n    -webkit-transform: translateY(-6px);\\n    transform: translateY(-6px);\\n}\\n}\\n@-webkit-keyframes hvr-icon-bob-float {\\n100% {\\n    -webkit-transform: translateY(-6px);\\n    transform: translateY(-6px);\\n}\\n}\\n@keyframes hvr-icon-bob-float {\\n100% {\\n    -webkit-transform: translateY(-6px);\\n    transform: translateY(-6px);\\n}\\n}\\n.hvr-icon-bob {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-bob .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n}\\n.hvr-icon-bob:hover .hvr-icon, .hvr-icon-bob:focus .hvr-icon, .hvr-icon-bob:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-bob-float, hvr-icon-bob;\\n    animation-name: hvr-icon-bob-float, hvr-icon-bob;\\n    -webkit-animation-duration: .3s, 1.5s;\\n    animation-duration: .3s, 1.5s;\\n    -webkit-animation-delay: 0s, .3s;\\n    animation-delay: 0s, .3s;\\n    -webkit-animation-timing-function: ease-out, ease-in-out;\\n    animation-timing-function: ease-out, ease-in-out;\\n    -webkit-animation-iteration-count: 1, infinite;\\n    animation-iteration-count: 1, infinite;\\n    -webkit-animation-fill-mode: forwards;\\n    animation-fill-mode: forwards;\\n    -webkit-animation-direction: normal, alternate;\\n    animation-direction: normal, alternate;\\n}\\n\\n/* Icon Hang */\\n@-webkit-keyframes hvr-icon-hang {\\n0% {\\n    -webkit-transform: translateY(6px);\\n    transform: translateY(6px);\\n}\\n50% {\\n    -webkit-transform: translateY(2px);\\n    transform: translateY(2px);\\n}\\n100% {\\n    -webkit-transform: translateY(6px);\\n    transform: translateY(6px);\\n}\\n}\\n@keyframes hvr-icon-hang {\\n0% {\\n    -webkit-transform: translateY(6px);\\n    transform: translateY(6px);\\n}\\n50% {\\n    -webkit-transform: translateY(2px);\\n    transform: translateY(2px);\\n}\\n100% {\\n    -webkit-transform: translateY(6px);\\n    transform: translateY(6px);\\n}\\n}\\n@-webkit-keyframes hvr-icon-hang-sink {\\n100% {\\n    -webkit-transform: translateY(6px);\\n    transform: translateY(6px);\\n}\\n}\\n@keyframes hvr-icon-hang-sink {\\n100% {\\n    -webkit-transform: translateY(6px);\\n    transform: translateY(6px);\\n}\\n}\\n.hvr-icon-hang {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-hang .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n}\\n.hvr-icon-hang:hover .hvr-icon, .hvr-icon-hang:focus .hvr-icon, .hvr-icon-hang:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-hang-sink, hvr-icon-hang;\\n    animation-name: hvr-icon-hang-sink, hvr-icon-hang;\\n    -webkit-animation-duration: .3s, 1.5s;\\n    animation-duration: .3s, 1.5s;\\n    -webkit-animation-delay: 0s, .3s;\\n    animation-delay: 0s, .3s;\\n    -webkit-animation-timing-function: ease-out, ease-in-out;\\n    animation-timing-function: ease-out, ease-in-out;\\n    -webkit-animation-iteration-count: 1, infinite;\\n    animation-iteration-count: 1, infinite;\\n    -webkit-animation-fill-mode: forwards;\\n    animation-fill-mode: forwards;\\n    -webkit-animation-direction: normal, alternate;\\n    animation-direction: normal, alternate;\\n}\\n\\n/* Icon Wobble Horizontal */\\n@-webkit-keyframes hvr-icon-wobble-horizontal {\\n16.65% {\\n    -webkit-transform: translateX(6px);\\n    transform: translateX(6px);\\n}\\n33.3% {\\n    -webkit-transform: translateX(-5px);\\n    transform: translateX(-5px);\\n}\\n49.95% {\\n    -webkit-transform: translateX(4px);\\n    transform: translateX(4px);\\n}\\n66.6% {\\n    -webkit-transform: translateX(-2px);\\n    transform: translateX(-2px);\\n}\\n83.25% {\\n    -webkit-transform: translateX(1px);\\n    transform: translateX(1px);\\n}\\n100% {\\n    -webkit-transform: translateX(0);\\n    transform: translateX(0);\\n}\\n}\\n@keyframes hvr-icon-wobble-horizontal {\\n16.65% {\\n    -webkit-transform: translateX(6px);\\n    transform: translateX(6px);\\n}\\n33.3% {\\n    -webkit-transform: translateX(-5px);\\n    transform: translateX(-5px);\\n}\\n49.95% {\\n    -webkit-transform: translateX(4px);\\n    transform: translateX(4px);\\n}\\n66.6% {\\n    -webkit-transform: translateX(-2px);\\n    transform: translateX(-2px);\\n}\\n83.25% {\\n    -webkit-transform: translateX(1px);\\n    transform: translateX(1px);\\n}\\n100% {\\n    -webkit-transform: translateX(0);\\n    transform: translateX(0);\\n}\\n}\\n.hvr-icon-wobble-horizontal {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-wobble-horizontal .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n}\\n.hvr-icon-wobble-horizontal:hover .hvr-icon, .hvr-icon-wobble-horizontal:focus .hvr-icon, .hvr-icon-wobble-horizontal:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-wobble-horizontal;\\n    animation-name: hvr-icon-wobble-horizontal;\\n    -webkit-animation-duration: 1s;\\n    animation-duration: 1s;\\n    -webkit-animation-timing-function: ease-in-out;\\n    animation-timing-function: ease-in-out;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* Icon Wobble Vertical */\\n@-webkit-keyframes hvr-icon-wobble-vertical {\\n16.65% {\\n    -webkit-transform: translateY(6px);\\n    transform: translateY(6px);\\n}\\n33.3% {\\n    -webkit-transform: translateY(-5px);\\n    transform: translateY(-5px);\\n}\\n49.95% {\\n    -webkit-transform: translateY(4px);\\n    transform: translateY(4px);\\n}\\n66.6% {\\n    -webkit-transform: translateY(-2px);\\n    transform: translateY(-2px);\\n}\\n83.25% {\\n    -webkit-transform: translateY(1px);\\n    transform: translateY(1px);\\n}\\n100% {\\n    -webkit-transform: translateY(0);\\n    transform: translateY(0);\\n}\\n}\\n@keyframes hvr-icon-wobble-vertical {\\n16.65% {\\n    -webkit-transform: translateY(6px);\\n    transform: translateY(6px);\\n}\\n33.3% {\\n    -webkit-transform: translateY(-5px);\\n    transform: translateY(-5px);\\n}\\n49.95% {\\n    -webkit-transform: translateY(4px);\\n    transform: translateY(4px);\\n}\\n66.6% {\\n    -webkit-transform: translateY(-2px);\\n    transform: translateY(-2px);\\n}\\n83.25% {\\n    -webkit-transform: translateY(1px);\\n    transform: translateY(1px);\\n}\\n100% {\\n    -webkit-transform: translateY(0);\\n    transform: translateY(0);\\n}\\n}\\n.hvr-icon-wobble-vertical {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-wobble-vertical .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n}\\n.hvr-icon-wobble-vertical:hover .hvr-icon, .hvr-icon-wobble-vertical:focus .hvr-icon, .hvr-icon-wobble-vertical:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-wobble-vertical;\\n    animation-name: hvr-icon-wobble-vertical;\\n    -webkit-animation-duration: 1s;\\n    animation-duration: 1s;\\n    -webkit-animation-timing-function: ease-in-out;\\n    animation-timing-function: ease-in-out;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* Icon Buzz */\\n@-webkit-keyframes hvr-icon-buzz {\\n50% {\\n    -webkit-transform: translateX(3px) rotate(2deg);\\n    transform: translateX(3px) rotate(2deg);\\n}\\n100% {\\n    -webkit-transform: translateX(-3px) rotate(-2deg);\\n    transform: translateX(-3px) rotate(-2deg);\\n}\\n}\\n@keyframes hvr-icon-buzz {\\n50% {\\n    -webkit-transform: translateX(3px) rotate(2deg);\\n    transform: translateX(3px) rotate(2deg);\\n}\\n100% {\\n    -webkit-transform: translateX(-3px) rotate(-2deg);\\n    transform: translateX(-3px) rotate(-2deg);\\n}\\n}\\n.hvr-icon-buzz {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-buzz .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n}\\n.hvr-icon-buzz:hover .hvr-icon, .hvr-icon-buzz:focus .hvr-icon, .hvr-icon-buzz:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-buzz;\\n    animation-name: hvr-icon-buzz;\\n    -webkit-animation-duration: 0.15s;\\n    animation-duration: 0.15s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: infinite;\\n    animation-iteration-count: infinite;\\n}\\n\\n/* Icon Buzz Out */\\n@-webkit-keyframes hvr-icon-buzz-out {\\n10% {\\n    -webkit-transform: translateX(3px) rotate(2deg);\\n    transform: translateX(3px) rotate(2deg);\\n}\\n20% {\\n    -webkit-transform: translateX(-3px) rotate(-2deg);\\n    transform: translateX(-3px) rotate(-2deg);\\n}\\n30% {\\n    -webkit-transform: translateX(3px) rotate(2deg);\\n    transform: translateX(3px) rotate(2deg);\\n}\\n40% {\\n    -webkit-transform: translateX(-3px) rotate(-2deg);\\n    transform: translateX(-3px) rotate(-2deg);\\n}\\n50% {\\n    -webkit-transform: translateX(2px) rotate(1deg);\\n    transform: translateX(2px) rotate(1deg);\\n}\\n60% {\\n    -webkit-transform: translateX(-2px) rotate(-1deg);\\n    transform: translateX(-2px) rotate(-1deg);\\n}\\n70% {\\n    -webkit-transform: translateX(2px) rotate(1deg);\\n    transform: translateX(2px) rotate(1deg);\\n}\\n80% {\\n    -webkit-transform: translateX(-2px) rotate(-1deg);\\n    transform: translateX(-2px) rotate(-1deg);\\n}\\n90% {\\n    -webkit-transform: translateX(1px) rotate(0);\\n    transform: translateX(1px) rotate(0);\\n}\\n100% {\\n    -webkit-transform: translateX(-1px) rotate(0);\\n    transform: translateX(-1px) rotate(0);\\n}\\n}\\n@keyframes hvr-icon-buzz-out {\\n10% {\\n    -webkit-transform: translateX(3px) rotate(2deg);\\n    transform: translateX(3px) rotate(2deg);\\n}\\n20% {\\n    -webkit-transform: translateX(-3px) rotate(-2deg);\\n    transform: translateX(-3px) rotate(-2deg);\\n}\\n30% {\\n    -webkit-transform: translateX(3px) rotate(2deg);\\n    transform: translateX(3px) rotate(2deg);\\n}\\n40% {\\n    -webkit-transform: translateX(-3px) rotate(-2deg);\\n    transform: translateX(-3px) rotate(-2deg);\\n}\\n50% {\\n    -webkit-transform: translateX(2px) rotate(1deg);\\n    transform: translateX(2px) rotate(1deg);\\n}\\n60% {\\n    -webkit-transform: translateX(-2px) rotate(-1deg);\\n    transform: translateX(-2px) rotate(-1deg);\\n}\\n70% {\\n    -webkit-transform: translateX(2px) rotate(1deg);\\n    transform: translateX(2px) rotate(1deg);\\n}\\n80% {\\n    -webkit-transform: translateX(-2px) rotate(-1deg);\\n    transform: translateX(-2px) rotate(-1deg);\\n}\\n90% {\\n    -webkit-transform: translateX(1px) rotate(0);\\n    transform: translateX(1px) rotate(0);\\n}\\n100% {\\n    -webkit-transform: translateX(-1px) rotate(0);\\n    transform: translateX(-1px) rotate(0);\\n}\\n}\\n.hvr-icon-buzz-out {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  -webkit-transition-duration: 0.3s;\\n  transition-duration: 0.3s;\\n}\\n.hvr-icon-buzz-out .hvr-icon {\\n    -webkit-transform: translateZ(0);\\n    transform: translateZ(0);\\n}\\n.hvr-icon-buzz-out:hover .hvr-icon, .hvr-icon-buzz-out:focus .hvr-icon, .hvr-icon-buzz-out:active .hvr-icon {\\n    -webkit-animation-name: hvr-icon-buzz-out;\\n    animation-name: hvr-icon-buzz-out;\\n    -webkit-animation-duration: 0.75s;\\n    animation-duration: 0.75s;\\n    -webkit-animation-timing-function: linear;\\n    animation-timing-function: linear;\\n    -webkit-animation-iteration-count: 1;\\n    animation-iteration-count: 1;\\n}\\n\\n/* CURLS */\\n/* Curl Top Left */\\n.hvr-curl-top-left {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n}\\n.hvr-curl-top-left:before {\\n    pointer-events: none;\\n    position: absolute;\\n    content: '';\\n    height: 0;\\n    width: 0;\\n    top: 0;\\n    left: 0;\\n    background: white;\\n    /* IE9 */\\n    background: linear-gradient(135deg, white 45%, #aaa 50%, #ccc 56%, white 80%);\\n    filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr='#ffffff', endColorstr='#000000');\\n    /*For IE7-8-9*/\\n    z-index: 1000;\\n    box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.4);\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: width, height;\\n    transition-property: width, height;\\n}\\n.hvr-curl-top-left:hover:before, .hvr-curl-top-left:focus:before, .hvr-curl-top-left:active:before {\\n    width: 25px;\\n    height: 25px;\\n}\\n\\n/* Curl Top Right */\\n.hvr-curl-top-right {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n}\\n.hvr-curl-top-right:before {\\n    pointer-events: none;\\n    position: absolute;\\n    content: '';\\n    height: 0;\\n    width: 0;\\n    top: 0;\\n    right: 0;\\n    background: white;\\n    /* IE9 */\\n    background: linear-gradient(225deg, white 45%, #aaa 50%, #ccc 56%, white 80%);\\n    box-shadow: -1px 1px 1px rgba(0, 0, 0, 0.4);\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: width, height;\\n    transition-property: width, height;\\n}\\n.hvr-curl-top-right:hover:before, .hvr-curl-top-right:focus:before, .hvr-curl-top-right:active:before {\\n    width: 25px;\\n    height: 25px;\\n}\\n\\n/* Curl Bottom Right */\\n.hvr-curl-bottom-right {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n}\\n.hvr-curl-bottom-right:before {\\n    pointer-events: none;\\n    position: absolute;\\n    content: '';\\n    height: 0;\\n    width: 0;\\n    bottom: 0;\\n    right: 0;\\n    background: white;\\n    /* IE9 */\\n    background: linear-gradient(315deg, white 45%, #aaa 50%, #ccc 56%, white 80%);\\n    box-shadow: -1px -1px 1px rgba(0, 0, 0, 0.4);\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: width, height;\\n    transition-property: width, height;\\n}\\n.hvr-curl-bottom-right:hover:before, .hvr-curl-bottom-right:focus:before, .hvr-curl-bottom-right:active:before {\\n    width: 25px;\\n    height: 25px;\\n}\\n\\n/* Curl Bottom Left */\\n.hvr-curl-bottom-left {\\n  display: inline-block;\\n  vertical-align: middle;\\n  -webkit-transform: perspective(1px) translateZ(0);\\n  transform: perspective(1px) translateZ(0);\\n  box-shadow: 0 0 1px rgba(0, 0, 0, 0);\\n  position: relative;\\n}\\n.hvr-curl-bottom-left:before {\\n    pointer-events: none;\\n    position: absolute;\\n    content: '';\\n    height: 0;\\n    width: 0;\\n    bottom: 0;\\n    left: 0;\\n    background: white;\\n    /* IE9 */\\n    background: linear-gradient(45deg, white 45%, #aaa 50%, #ccc 56%, white 80%);\\n    box-shadow: 1px -1px 1px rgba(0, 0, 0, 0.4);\\n    -webkit-transition-duration: 0.3s;\\n    transition-duration: 0.3s;\\n    -webkit-transition-property: width, height;\\n    transition-property: width, height;\\n}\\n.hvr-curl-bottom-left:hover:before, .hvr-curl-bottom-left:focus:before, .hvr-curl-bottom-left:active:before {\\n    width: 25px;\\n    height: 25px;\\n}\\n#annotation-toolbar-popover {\\n  display: inline-block;\\n  position: absolute;\\n  text-align: center;\\n  font-size: 1rem;\\n}\\n#annotation-toolbar-popover #annotation-toolbar {\\n    background-color: white;\\n    border-radius: 20px;\\n    display: inline-block;\\n}\\n#annotation-toolbar-popover .shadow-down {\\n    box-shadow: 0 2px 4px 2px rgba(39, 43, 49, 0.2) !important;\\n}\\n#annotation-toolbar-popover .shadow-up {\\n    box-shadow: 0 -2px 4px 2px rgba(39, 43, 49, 0.2) !important;\\n}\\n.annotation-toolbar-item {\\n  margin: 0.125rem;\\n  cursor: pointer;\\n}\\n.dot {\\n  height: 20px;\\n  width: 20px;\\n  background-color: #bbb;\\n  border-radius: 50%;\\n  display: inline-block;\\n  line-height: 20px;\\n}\\n.arrow-down {\\n  width: 0;\\n  height: 0;\\n  border-left: 5px solid transparent;\\n  border-right: 5px solid transparent;\\n  border-top: 5px solid white;\\n  transform: rotate(0deg);\\n  -webkit-transform: rotate(0deg);\\n}\\n.arrow-up {\\n  width: 0;\\n  height: 0;\\n  border-left: 5px solid transparent;\\n  border-right: 5px solid transparent;\\n  border-top: 5px solid white;\\n  transform: rotate(180deg);\\n  -webkit-transform: rotate(180deg);\\n}\\n\", \"\"]);\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss&\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return '@media ' + item[2] + '{' + content + '}';\n      } else {\n        return content;\n      }\n    }).join('');\n  }; // import a list of modules into the list\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === 'string') {\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (i = 0; i < modules.length; i++) {\n      var item = modules[i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || '';\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n  return '/*# ' + data + ' */';\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCOztBQUVoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1Q0FBdUMsZ0JBQWdCO0FBQ3ZELE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMLElBQUk7OztBQUdKO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLG1CQUFtQixpQkFBaUI7QUFDcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZSxvQkFBb0I7QUFDbkMsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxjQUFjO0FBQ25FO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuICdAbWVkaWEgJyArIGl0ZW1bMl0gKyAneycgKyBjb250ZW50ICsgJ30nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IG1vZHVsZXNbaV07IC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG4gICAgICAvLyB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG4gICAgICAvLyBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cbiAgICAgIGlmIChpdGVtWzBdID09IG51bGwgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgaXRlbVsyXSA9ICcoJyArIGl0ZW1bMl0gKyAnKSBhbmQgKCcgKyBtZWRpYVF1ZXJ5ICsgJyknO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuICByZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n");

/***/ }),

/***/ "./node_modules/diff-match-patch/index.js":
/*!************************************************!*\
  !*** ./node_modules/diff-match-patch/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  return [op, text];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/diff-match-patch/index.js\n");

/***/ }),

/***/ "./node_modules/dom-anchor-text-position/index.js":
/*!********************************************************!*\
  !*** ./node_modules/dom-anchor-text-position/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib */ \"./node_modules/dom-anchor-text-position/lib/index.js\")\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFuY2hvci10ZXh0LXBvc2l0aW9uL2luZGV4LmpzP2Q4MjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsbUVBQU8iLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZG9tLWFuY2hvci10ZXh0LXBvc2l0aW9uL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYicpXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/dom-anchor-text-position/index.js\n");

/***/ }),

/***/ "./node_modules/dom-anchor-text-position/lib/index.js":
/*!************************************************************!*\
  !*** ./node_modules/dom-anchor-text-position/lib/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromRange = fromRange;\nexports.toRange = toRange;\n\nvar _domSeek = _interopRequireDefault(__webpack_require__(/*! dom-seek */ \"./node_modules/dom-seek/index.js\"));\n\nvar _rangeToString = _interopRequireDefault(__webpack_require__(/*! ./range-to-string */ \"./node_modules/dom-anchor-text-position/lib/range-to-string.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar SHOW_TEXT = 4;\n\nfunction fromRange(root, range) {\n  if (root === undefined) {\n    throw new Error('missing required parameter \"root\"');\n  }\n\n  if (range === undefined) {\n    throw new Error('missing required parameter \"range\"');\n  }\n\n  var document = root.ownerDocument;\n  var prefix = document.createRange();\n  var startNode = range.startContainer;\n  var startOffset = range.startOffset;\n  prefix.setStart(root, 0);\n  prefix.setEnd(startNode, startOffset);\n  var start = (0, _rangeToString[\"default\"])(prefix).length;\n  var end = start + (0, _rangeToString[\"default\"])(range).length;\n  return {\n    start: start,\n    end: end\n  };\n}\n\nfunction toRange(root) {\n  var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (root === undefined) {\n    throw new Error('missing required parameter \"root\"');\n  }\n\n  var document = root.ownerDocument;\n  var range = document.createRange();\n  var iter = document.createNodeIterator(root, SHOW_TEXT);\n  var start = selector.start || 0;\n  var end = selector.end || start;\n  var startOffset = start - (0, _domSeek[\"default\"])(iter, start);\n  var startNode = iter.referenceNode;\n  var remainder = end - start + startOffset;\n  var endOffset = remainder - (0, _domSeek[\"default\"])(iter, remainder);\n  var endNode = iter.referenceNode;\n  range.setStart(startNode, startOffset);\n  range.setEnd(endNode, endOffset);\n  return range;\n}\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFuY2hvci10ZXh0LXBvc2l0aW9uL2xpYi9pbmRleC5qcz9lOTJiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQSxzQ0FBc0MsbUJBQU8sQ0FBQyxrREFBVTs7QUFFeEQsNENBQTRDLG1CQUFPLENBQUMseUZBQW1COztBQUV2RSxzQ0FBc0MsdUNBQXVDLGtCQUFrQjs7QUFFL0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kb20tYW5jaG9yLXRleHQtcG9zaXRpb24vbGliL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmZyb21SYW5nZSA9IGZyb21SYW5nZTtcbmV4cG9ydHMudG9SYW5nZSA9IHRvUmFuZ2U7XG5cbnZhciBfZG9tU2VlayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1zZWVrXCIpKTtcblxudmFyIF9yYW5nZVRvU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yYW5nZS10by1zdHJpbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxudmFyIFNIT1dfVEVYVCA9IDQ7XG5cbmZ1bmN0aW9uIGZyb21SYW5nZShyb290LCByYW5nZSkge1xuICBpZiAocm9vdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlciBcInJvb3RcIicpO1xuICB9XG5cbiAgaWYgKHJhbmdlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyIFwicmFuZ2VcIicpO1xuICB9XG5cbiAgdmFyIGRvY3VtZW50ID0gcm9vdC5vd25lckRvY3VtZW50O1xuICB2YXIgcHJlZml4ID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgdmFyIHN0YXJ0Tm9kZSA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xuICB2YXIgc3RhcnRPZmZzZXQgPSByYW5nZS5zdGFydE9mZnNldDtcbiAgcHJlZml4LnNldFN0YXJ0KHJvb3QsIDApO1xuICBwcmVmaXguc2V0RW5kKHN0YXJ0Tm9kZSwgc3RhcnRPZmZzZXQpO1xuICB2YXIgc3RhcnQgPSAoMCwgX3JhbmdlVG9TdHJpbmdbXCJkZWZhdWx0XCJdKShwcmVmaXgpLmxlbmd0aDtcbiAgdmFyIGVuZCA9IHN0YXJ0ICsgKDAsIF9yYW5nZVRvU3RyaW5nW1wiZGVmYXVsdFwiXSkocmFuZ2UpLmxlbmd0aDtcbiAgcmV0dXJuIHtcbiAgICBzdGFydDogc3RhcnQsXG4gICAgZW5kOiBlbmRcbiAgfTtcbn1cblxuZnVuY3Rpb24gdG9SYW5nZShyb290KSB7XG4gIHZhciBzZWxlY3RvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKHJvb3QgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXIgXCJyb290XCInKTtcbiAgfVxuXG4gIHZhciBkb2N1bWVudCA9IHJvb3Qub3duZXJEb2N1bWVudDtcbiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgdmFyIGl0ZXIgPSBkb2N1bWVudC5jcmVhdGVOb2RlSXRlcmF0b3Iocm9vdCwgU0hPV19URVhUKTtcbiAgdmFyIHN0YXJ0ID0gc2VsZWN0b3Iuc3RhcnQgfHwgMDtcbiAgdmFyIGVuZCA9IHNlbGVjdG9yLmVuZCB8fCBzdGFydDtcbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gc3RhcnQgLSAoMCwgX2RvbVNlZWtbXCJkZWZhdWx0XCJdKShpdGVyLCBzdGFydCk7XG4gIHZhciBzdGFydE5vZGUgPSBpdGVyLnJlZmVyZW5jZU5vZGU7XG4gIHZhciByZW1haW5kZXIgPSBlbmQgLSBzdGFydCArIHN0YXJ0T2Zmc2V0O1xuICB2YXIgZW5kT2Zmc2V0ID0gcmVtYWluZGVyIC0gKDAsIF9kb21TZWVrW1wiZGVmYXVsdFwiXSkoaXRlciwgcmVtYWluZGVyKTtcbiAgdmFyIGVuZE5vZGUgPSBpdGVyLnJlZmVyZW5jZU5vZGU7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0Tm9kZSwgc3RhcnRPZmZzZXQpO1xuICByYW5nZS5zZXRFbmQoZW5kTm9kZSwgZW5kT2Zmc2V0KTtcbiAgcmV0dXJuIHJhbmdlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/dom-anchor-text-position/lib/index.js\n");

/***/ }),

/***/ "./node_modules/dom-anchor-text-position/lib/range-to-string.js":
/*!**********************************************************************!*\
  !*** ./node_modules/dom-anchor-text-position/lib/range-to-string.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = rangeToString;\n\n/**\n * Return the next node after `node` in a tree order traversal of the document.\n */\nfunction nextNode(node, skipChildren) {\n  if (!skipChildren && node.firstChild) {\n    return node.firstChild;\n  }\n\n  do {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n\n    node = node.parentNode;\n  } while (node);\n  /* istanbul ignore next */\n\n\n  return node;\n}\n\nfunction firstNode(range) {\n  if (range.startContainer.nodeType === Node.ELEMENT_NODE) {\n    var node = range.startContainer.childNodes[range.startOffset];\n    return node || nextNode(range.startContainer, true\n    /* skip children */\n    );\n  }\n\n  return range.startContainer;\n}\n\nfunction firstNodeAfter(range) {\n  if (range.endContainer.nodeType === Node.ELEMENT_NODE) {\n    var node = range.endContainer.childNodes[range.endOffset];\n    return node || nextNode(range.endContainer, true\n    /* skip children */\n    );\n  }\n\n  return nextNode(range.endContainer);\n}\n\nfunction forEachNodeInRange(range, cb) {\n  var node = firstNode(range);\n  var pastEnd = firstNodeAfter(range);\n\n  while (node !== pastEnd) {\n    cb(node);\n    node = nextNode(node);\n  }\n}\n/**\n * A ponyfill for Range.toString().\n * Spec: https://dom.spec.whatwg.org/#dom-range-stringifier\n *\n * Works around the buggy Range.toString() implementation in IE and Edge.\n * See https://github.com/tilgovi/dom-anchor-text-position/issues/4\n */\n\n\nfunction rangeToString(range) {\n  // This is a fairly direct translation of the Range.toString() implementation\n  // in Blink.\n  var text = '';\n  forEachNodeInRange(range, function (node) {\n    if (node.nodeType !== Node.TEXT_NODE) {\n      return;\n    }\n\n    var start = node === range.startContainer ? range.startOffset : 0;\n    var end = node === range.endContainer ? range.endOffset : node.textContent.length;\n    text += node.textContent.slice(start, end);\n  });\n  return text;\n}\n//# sourceMappingURL=range-to-string.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFuY2hvci10ZXh0LXBvc2l0aW9uL2xpYi9yYW5nZS10by1zdHJpbmcuanM/YTQ1OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZG9tLWFuY2hvci10ZXh0LXBvc2l0aW9uL2xpYi9yYW5nZS10by1zdHJpbmcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gcmFuZ2VUb1N0cmluZztcblxuLyoqXG4gKiBSZXR1cm4gdGhlIG5leHQgbm9kZSBhZnRlciBgbm9kZWAgaW4gYSB0cmVlIG9yZGVyIHRyYXZlcnNhbCBvZiB0aGUgZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIG5leHROb2RlKG5vZGUsIHNraXBDaGlsZHJlbikge1xuICBpZiAoIXNraXBDaGlsZHJlbiAmJiBub2RlLmZpcnN0Q2hpbGQpIHtcbiAgICByZXR1cm4gbm9kZS5maXJzdENoaWxkO1xuICB9XG5cbiAgZG8ge1xuICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSB7XG4gICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcbiAgICB9XG5cbiAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICB9IHdoaWxlIChub2RlKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuXG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBmaXJzdE5vZGUocmFuZ2UpIHtcbiAgaWYgKHJhbmdlLnN0YXJ0Q29udGFpbmVyLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgIHZhciBub2RlID0gcmFuZ2Uuc3RhcnRDb250YWluZXIuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldF07XG4gICAgcmV0dXJuIG5vZGUgfHwgbmV4dE5vZGUocmFuZ2Uuc3RhcnRDb250YWluZXIsIHRydWVcbiAgICAvKiBza2lwIGNoaWxkcmVuICovXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiByYW5nZS5zdGFydENvbnRhaW5lcjtcbn1cblxuZnVuY3Rpb24gZmlyc3ROb2RlQWZ0ZXIocmFuZ2UpIHtcbiAgaWYgKHJhbmdlLmVuZENvbnRhaW5lci5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICB2YXIgbm9kZSA9IHJhbmdlLmVuZENvbnRhaW5lci5jaGlsZE5vZGVzW3JhbmdlLmVuZE9mZnNldF07XG4gICAgcmV0dXJuIG5vZGUgfHwgbmV4dE5vZGUocmFuZ2UuZW5kQ29udGFpbmVyLCB0cnVlXG4gICAgLyogc2tpcCBjaGlsZHJlbiAqL1xuICAgICk7XG4gIH1cblxuICByZXR1cm4gbmV4dE5vZGUocmFuZ2UuZW5kQ29udGFpbmVyKTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaE5vZGVJblJhbmdlKHJhbmdlLCBjYikge1xuICB2YXIgbm9kZSA9IGZpcnN0Tm9kZShyYW5nZSk7XG4gIHZhciBwYXN0RW5kID0gZmlyc3ROb2RlQWZ0ZXIocmFuZ2UpO1xuXG4gIHdoaWxlIChub2RlICE9PSBwYXN0RW5kKSB7XG4gICAgY2Iobm9kZSk7XG4gICAgbm9kZSA9IG5leHROb2RlKG5vZGUpO1xuICB9XG59XG4vKipcbiAqIEEgcG9ueWZpbGwgZm9yIFJhbmdlLnRvU3RyaW5nKCkuXG4gKiBTcGVjOiBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yYW5nZS1zdHJpbmdpZmllclxuICpcbiAqIFdvcmtzIGFyb3VuZCB0aGUgYnVnZ3kgUmFuZ2UudG9TdHJpbmcoKSBpbXBsZW1lbnRhdGlvbiBpbiBJRSBhbmQgRWRnZS5cbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdGlsZ292aS9kb20tYW5jaG9yLXRleHQtcG9zaXRpb24vaXNzdWVzLzRcbiAqL1xuXG5cbmZ1bmN0aW9uIHJhbmdlVG9TdHJpbmcocmFuZ2UpIHtcbiAgLy8gVGhpcyBpcyBhIGZhaXJseSBkaXJlY3QgdHJhbnNsYXRpb24gb2YgdGhlIFJhbmdlLnRvU3RyaW5nKCkgaW1wbGVtZW50YXRpb25cbiAgLy8gaW4gQmxpbmsuXG4gIHZhciB0ZXh0ID0gJyc7XG4gIGZvckVhY2hOb2RlSW5SYW5nZShyYW5nZSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3RhcnQgPSBub2RlID09PSByYW5nZS5zdGFydENvbnRhaW5lciA/IHJhbmdlLnN0YXJ0T2Zmc2V0IDogMDtcbiAgICB2YXIgZW5kID0gbm9kZSA9PT0gcmFuZ2UuZW5kQ29udGFpbmVyID8gcmFuZ2UuZW5kT2Zmc2V0IDogbm9kZS50ZXh0Q29udGVudC5sZW5ndGg7XG4gICAgdGV4dCArPSBub2RlLnRleHRDb250ZW50LnNsaWNlKHN0YXJ0LCBlbmQpO1xuICB9KTtcbiAgcmV0dXJuIHRleHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYW5nZS10by1zdHJpbmcuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/dom-anchor-text-position/lib/range-to-string.js\n");

/***/ }),

/***/ "./node_modules/dom-anchor-text-quote/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/dom-anchor-text-quote/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib */ \"./node_modules/dom-anchor-text-quote/lib/index.js\");\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFuY2hvci10ZXh0LXF1b3RlL2luZGV4LmpzP2Q5ZjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsZ0VBQU8iLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZG9tLWFuY2hvci10ZXh0LXF1b3RlL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYicpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/dom-anchor-text-quote/index.js\n");

/***/ }),

/***/ "./node_modules/dom-anchor-text-quote/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/dom-anchor-text-quote/lib/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromRange = fromRange;\nexports.fromTextPosition = fromTextPosition;\nexports.toRange = toRange;\nexports.toTextPosition = toTextPosition;\n\nvar _diffMatchPatch = __webpack_require__(/*! diff-match-patch */ \"./node_modules/diff-match-patch/index.js\");\n\nvar _diffMatchPatch2 = _interopRequireDefault(_diffMatchPatch);\n\nvar _domAnchorTextPosition = __webpack_require__(/*! dom-anchor-text-position */ \"./node_modules/dom-anchor-text-quote/node_modules/dom-anchor-text-position/index.js\");\n\nvar textPosition = _interopRequireWildcard(_domAnchorTextPosition);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// The DiffMatchPatch bitap has a hard 32-character pattern length limit.\nvar SLICE_LENGTH = 32;\nvar SLICE_RE = new RegExp('(.|[\\r\\n]){1,' + String(SLICE_LENGTH) + '}', 'g');\nvar CONTEXT_LENGTH = SLICE_LENGTH;\n\nfunction fromRange(root, range) {\n  if (root === undefined) {\n    throw new Error('missing required parameter \"root\"');\n  }\n  if (range === undefined) {\n    throw new Error('missing required parameter \"range\"');\n  }\n\n  var position = textPosition.fromRange(root, range);\n  return fromTextPosition(root, position);\n}\n\nfunction fromTextPosition(root, selector) {\n  if (root === undefined) {\n    throw new Error('missing required parameter \"root\"');\n  }\n  if (selector === undefined) {\n    throw new Error('missing required parameter \"selector\"');\n  }\n\n  var start = selector.start;\n\n  if (start === undefined) {\n    throw new Error('selector missing required property \"start\"');\n  }\n  if (start < 0) {\n    throw new Error('property \"start\" must be a non-negative integer');\n  }\n\n  var end = selector.end;\n\n  if (end === undefined) {\n    throw new Error('selector missing required property \"end\"');\n  }\n  if (end < 0) {\n    throw new Error('property \"end\" must be a non-negative integer');\n  }\n\n  var exact = root.textContent.substr(start, end - start);\n\n  var prefixStart = Math.max(0, start - CONTEXT_LENGTH);\n  var prefix = root.textContent.substr(prefixStart, start - prefixStart);\n\n  var suffixEnd = Math.min(root.textContent.length, end + CONTEXT_LENGTH);\n  var suffix = root.textContent.substr(end, suffixEnd - end);\n\n  return { exact: exact, prefix: prefix, suffix: suffix };\n}\n\nfunction toRange(root, selector) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var position = toTextPosition(root, selector, options);\n  if (position === null) {\n    return null;\n  } else {\n    return textPosition.toRange(root, position);\n  }\n}\n\nfunction toTextPosition(root, selector) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (root === undefined) {\n    throw new Error('missing required parameter \"root\"');\n  }\n  if (selector === undefined) {\n    throw new Error('missing required parameter \"selector\"');\n  }\n\n  var exact = selector.exact;\n\n  if (exact === undefined) {\n    throw new Error('selector missing required property \"exact\"');\n  }\n\n  var prefix = selector.prefix,\n      suffix = selector.suffix;\n  var hint = options.hint;\n\n  var dmp = new _diffMatchPatch2.default();\n\n  dmp.Match_Distance = root.textContent.length * 2;\n\n  // Work around a hard limit of the DiffMatchPatch bitap implementation.\n  // The search pattern must be no more than SLICE_LENGTH characters.\n  var slices = exact.match(SLICE_RE);\n  var loc = hint === undefined ? root.textContent.length / 2 | 0 : hint;\n  var start = Number.POSITIVE_INFINITY;\n  var end = Number.NEGATIVE_INFINITY;\n  var result = -1;\n  var havePrefix = prefix !== undefined;\n  var haveSuffix = suffix !== undefined;\n  var foundPrefix = false;\n\n  // If the prefix is known then search for that first.\n  if (havePrefix) {\n    result = dmp.match_main(root.textContent, prefix, loc);\n    if (result > -1) {\n      loc = result + prefix.length;\n      foundPrefix = true;\n    }\n  }\n\n  // If we have a suffix, and the prefix wasn't found, then search for it.\n  if (haveSuffix && !foundPrefix) {\n    result = dmp.match_main(root.textContent, suffix, loc + exact.length);\n    if (result > -1) {\n      loc = result - exact.length;\n    }\n  }\n\n  // Search for the first slice.\n  var firstSlice = slices.shift();\n  result = dmp.match_main(root.textContent, firstSlice, loc);\n  if (result > -1) {\n    start = result;\n    loc = end = start + firstSlice.length;\n  } else {\n    return null;\n  }\n\n  // Create a fold function that will reduce slices to positional extents.\n  var foldSlices = function foldSlices(acc, slice) {\n    if (!acc) {\n      // A search for an earlier slice of the pattern failed to match.\n      return null;\n    }\n\n    var result = dmp.match_main(root.textContent, slice, acc.loc);\n    if (result === -1) {\n      return null;\n    }\n\n    // The next slice should follow this one closely.\n    acc.loc = result + slice.length;\n\n    // Expand the start and end to a quote that includes all the slices.\n    acc.start = Math.min(acc.start, result);\n    acc.end = Math.max(acc.end, result + slice.length);\n\n    return acc;\n  };\n\n  // Use the fold function to establish the full quote extents.\n  // Expect the slices to be close to one another.\n  // This distance is deliberately generous for now.\n  dmp.Match_Distance = 64;\n  var acc = slices.reduce(foldSlices, { start: start, end: end, loc: loc });\n  if (!acc) {\n    return null;\n  }\n\n  return { start: acc.start, end: acc.end };\n}\n//# sourceMappingURL=data:application/json;base64,\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/dom-anchor-text-quote/lib/index.js\n");

/***/ }),

/***/ "./node_modules/dom-anchor-text-quote/node_modules/dom-anchor-text-position/index.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/dom-anchor-text-quote/node_modules/dom-anchor-text-position/index.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib */ \"./node_modules/dom-anchor-text-quote/node_modules/dom-anchor-text-position/lib/index.js\")\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFuY2hvci10ZXh0LXF1b3RlL25vZGVfbW9kdWxlcy9kb20tYW5jaG9yLXRleHQtcG9zaXRpb24vaW5kZXguanM/YjU1MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyxzR0FBTyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kb20tYW5jaG9yLXRleHQtcXVvdGUvbm9kZV9tb2R1bGVzL2RvbS1hbmNob3ItdGV4dC1wb3NpdGlvbi9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWInKVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/dom-anchor-text-quote/node_modules/dom-anchor-text-position/index.js\n");

/***/ }),

/***/ "./node_modules/dom-anchor-text-quote/node_modules/dom-anchor-text-position/lib/index.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/dom-anchor-text-quote/node_modules/dom-anchor-text-position/lib/index.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromRange = fromRange;\nexports.toRange = toRange;\n\nvar _domNodeIterator = __webpack_require__(/*! dom-node-iterator */ \"./node_modules/dom-node-iterator/index.js\");\n\nvar _domNodeIterator2 = _interopRequireDefault(_domNodeIterator);\n\nvar _domSeek = __webpack_require__(/*! dom-seek */ \"./node_modules/dom-anchor-text-quote/node_modules/dom-seek/index.js\");\n\nvar _domSeek2 = _interopRequireDefault(_domSeek);\n\nvar _rangeToString = __webpack_require__(/*! ./range-to-string */ \"./node_modules/dom-anchor-text-quote/node_modules/dom-anchor-text-position/lib/range-to-string.js\");\n\nvar _rangeToString2 = _interopRequireDefault(_rangeToString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SHOW_TEXT = 4;\n\nfunction fromRange(root, range) {\n  if (root === undefined) {\n    throw new Error('missing required parameter \"root\"');\n  }\n  if (range === undefined) {\n    throw new Error('missing required parameter \"range\"');\n  }\n\n  var document = root.ownerDocument;\n  var prefix = document.createRange();\n\n  var startNode = range.startContainer;\n  var startOffset = range.startOffset;\n\n  prefix.setStart(root, 0);\n  prefix.setEnd(startNode, startOffset);\n\n  var start = (0, _rangeToString2.default)(prefix).length;\n  var end = start + (0, _rangeToString2.default)(range).length;\n\n  return {\n    start: start,\n    end: end\n  };\n}\n\nfunction toRange(root) {\n  var selector = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  if (root === undefined) {\n    throw new Error('missing required parameter \"root\"');\n  }\n\n  var document = root.ownerDocument;\n  var range = document.createRange();\n  var iter = (0, _domNodeIterator2.default)(root, SHOW_TEXT);\n\n  var start = selector.start || 0;\n  var end = selector.end || start;\n  var count = (0, _domSeek2.default)(iter, start);\n  var remainder = start - count;\n\n  if (iter.pointerBeforeReferenceNode) {\n    range.setStart(iter.referenceNode, remainder);\n  } else {\n    range.setStart(iter.nextNode(), remainder);\n    iter.previousNode();\n  }\n\n  var length = end - start + remainder;\n  count = (0, _domSeek2.default)(iter, length);\n  remainder = length - count;\n\n  if (iter.pointerBeforeReferenceNode) {\n    range.setEnd(iter.referenceNode, remainder);\n  } else {\n    range.setEnd(iter.nextNode(), remainder);\n  }\n\n  return range;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztRQU9nQixTLEdBQUEsUztRQTJCQSxPLEdBQUEsTzs7QUFsQ2hCOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7O0FBRUEsSUFBTSxZQUFZLENBQWxCOztBQUVPLFNBQVMsU0FBVCxDQUFtQixJQUFuQixFQUF5QixLQUF6QixFQUFnQztBQUNyQyxNQUFJLFNBQVMsU0FBYixFQUF3QjtBQUN0QixVQUFNLElBQUksS0FBSixDQUFVLG1DQUFWLENBQU47QUFDRDtBQUNELE1BQUksVUFBVSxTQUFkLEVBQXlCO0FBQ3ZCLFVBQU0sSUFBSSxLQUFKLENBQVUsb0NBQVYsQ0FBTjtBQUNEOztBQUVELE1BQUksV0FBVyxLQUFLLGFBQXBCO0FBQ0EsTUFBSSxTQUFTLFNBQVMsV0FBVCxFQUFiOztBQUVBLE1BQUksWUFBWSxNQUFNLGNBQXRCO0FBQ0EsTUFBSSxjQUFjLE1BQU0sV0FBeEI7O0FBRUEsU0FBTyxRQUFQLENBQWdCLElBQWhCLEVBQXNCLENBQXRCO0FBQ0EsU0FBTyxNQUFQLENBQWMsU0FBZCxFQUF5QixXQUF6Qjs7QUFFQSxNQUFJLFFBQVEsNkJBQWMsTUFBZCxFQUFzQixNQUFsQztBQUNBLE1BQUksTUFBTSxRQUFRLDZCQUFjLEtBQWQsRUFBcUIsTUFBdkM7O0FBRUEsU0FBTztBQUNMLFdBQU8sS0FERjtBQUVMLFNBQUs7QUFGQSxHQUFQO0FBSUQ7O0FBR00sU0FBUyxPQUFULENBQWlCLElBQWpCLEVBQXNDO0FBQUEsTUFBZixRQUFlLHlEQUFKLEVBQUk7O0FBQzNDLE1BQUksU0FBUyxTQUFiLEVBQXdCO0FBQ3RCLFVBQU0sSUFBSSxLQUFKLENBQVUsbUNBQVYsQ0FBTjtBQUNEOztBQUVELE1BQUksV0FBVyxLQUFLLGFBQXBCO0FBQ0EsTUFBSSxRQUFRLFNBQVMsV0FBVCxFQUFaO0FBQ0EsTUFBSSxPQUFPLCtCQUFtQixJQUFuQixFQUF5QixTQUF6QixDQUFYOztBQUVBLE1BQUksUUFBUSxTQUFTLEtBQVQsSUFBa0IsQ0FBOUI7QUFDQSxNQUFJLE1BQU0sU0FBUyxHQUFULElBQWdCLEtBQTFCO0FBQ0EsTUFBSSxRQUFRLHVCQUFLLElBQUwsRUFBVyxLQUFYLENBQVo7QUFDQSxNQUFJLFlBQVksUUFBUSxLQUF4Qjs7QUFFQSxNQUFJLEtBQUssMEJBQVQsRUFBcUM7QUFDbkMsVUFBTSxRQUFOLENBQWUsS0FBSyxhQUFwQixFQUFtQyxTQUFuQztBQUNELEdBRkQsTUFFTztBQUNMLFVBQU0sUUFBTixDQUFlLEtBQUssUUFBTCxFQUFmLEVBQWdDLFNBQWhDO0FBQ0EsU0FBSyxZQUFMO0FBQ0Q7O0FBRUQsTUFBSSxTQUFVLE1BQU0sS0FBUCxHQUFnQixTQUE3QjtBQUNBLFVBQVEsdUJBQUssSUFBTCxFQUFXLE1BQVgsQ0FBUjtBQUNBLGNBQVksU0FBUyxLQUFyQjs7QUFFQSxNQUFJLEtBQUssMEJBQVQsRUFBcUM7QUFDbkMsVUFBTSxNQUFOLENBQWEsS0FBSyxhQUFsQixFQUFpQyxTQUFqQztBQUNELEdBRkQsTUFFTztBQUNMLFVBQU0sTUFBTixDQUFhLEtBQUssUUFBTCxFQUFiLEVBQThCLFNBQTlCO0FBQ0Q7O0FBRUQsU0FBTyxLQUFQO0FBQ0QiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTm9kZUl0ZXJhdG9yIGZyb20gJ2RvbS1ub2RlLWl0ZXJhdG9yJ1xuaW1wb3J0IHNlZWsgZnJvbSAnZG9tLXNlZWsnXG5cbmltcG9ydCByYW5nZVRvU3RyaW5nIGZyb20gJy4vcmFuZ2UtdG8tc3RyaW5nJ1xuXG5jb25zdCBTSE9XX1RFWFQgPSA0XG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUmFuZ2Uocm9vdCwgcmFuZ2UpIHtcbiAgaWYgKHJvb3QgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXIgXCJyb290XCInKVxuICB9XG4gIGlmIChyYW5nZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlciBcInJhbmdlXCInKVxuICB9XG5cbiAgbGV0IGRvY3VtZW50ID0gcm9vdC5vd25lckRvY3VtZW50XG4gIGxldCBwcmVmaXggPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpXG5cbiAgbGV0IHN0YXJ0Tm9kZSA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyXG4gIGxldCBzdGFydE9mZnNldCA9IHJhbmdlLnN0YXJ0T2Zmc2V0XG5cbiAgcHJlZml4LnNldFN0YXJ0KHJvb3QsIDApXG4gIHByZWZpeC5zZXRFbmQoc3RhcnROb2RlLCBzdGFydE9mZnNldClcblxuICBsZXQgc3RhcnQgPSByYW5nZVRvU3RyaW5nKHByZWZpeCkubGVuZ3RoXG4gIGxldCBlbmQgPSBzdGFydCArIHJhbmdlVG9TdHJpbmcocmFuZ2UpLmxlbmd0aFxuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIGVuZDogZW5kLFxuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHRvUmFuZ2Uocm9vdCwgc2VsZWN0b3IgPSB7fSkge1xuICBpZiAocm9vdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlciBcInJvb3RcIicpXG4gIH1cblxuICBsZXQgZG9jdW1lbnQgPSByb290Lm93bmVyRG9jdW1lbnRcbiAgbGV0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKVxuICBsZXQgaXRlciA9IGNyZWF0ZU5vZGVJdGVyYXRvcihyb290LCBTSE9XX1RFWFQpXG5cbiAgbGV0IHN0YXJ0ID0gc2VsZWN0b3Iuc3RhcnQgfHwgMFxuICBsZXQgZW5kID0gc2VsZWN0b3IuZW5kIHx8IHN0YXJ0XG4gIGxldCBjb3VudCA9IHNlZWsoaXRlciwgc3RhcnQpXG4gIGxldCByZW1haW5kZXIgPSBzdGFydCAtIGNvdW50XG5cbiAgaWYgKGl0ZXIucG9pbnRlckJlZm9yZVJlZmVyZW5jZU5vZGUpIHtcbiAgICByYW5nZS5zZXRTdGFydChpdGVyLnJlZmVyZW5jZU5vZGUsIHJlbWFpbmRlcilcbiAgfSBlbHNlIHtcbiAgICByYW5nZS5zZXRTdGFydChpdGVyLm5leHROb2RlKCksIHJlbWFpbmRlcilcbiAgICBpdGVyLnByZXZpb3VzTm9kZSgpXG4gIH1cblxuICBsZXQgbGVuZ3RoID0gKGVuZCAtIHN0YXJ0KSArIHJlbWFpbmRlclxuICBjb3VudCA9IHNlZWsoaXRlciwgbGVuZ3RoKVxuICByZW1haW5kZXIgPSBsZW5ndGggLSBjb3VudFxuXG4gIGlmIChpdGVyLnBvaW50ZXJCZWZvcmVSZWZlcmVuY2VOb2RlKSB7XG4gICAgcmFuZ2Uuc2V0RW5kKGl0ZXIucmVmZXJlbmNlTm9kZSwgcmVtYWluZGVyKVxuICB9IGVsc2Uge1xuICAgIHJhbmdlLnNldEVuZChpdGVyLm5leHROb2RlKCksIHJlbWFpbmRlcilcbiAgfVxuXG4gIHJldHVybiByYW5nZVxufVxuIl19\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/dom-anchor-text-quote/node_modules/dom-anchor-text-position/lib/index.js\n");

/***/ }),

/***/ "./node_modules/dom-anchor-text-quote/node_modules/dom-anchor-text-position/lib/range-to-string.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/dom-anchor-text-quote/node_modules/dom-anchor-text-position/lib/range-to-string.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rangeToString;\n/* global Node */\n\n/**\n * Return the next node after `node` in a tree order traversal of the document.\n */\nfunction nextNode(node, skipChildren) {\n  if (!skipChildren && node.firstChild) {\n    return node.firstChild;\n  }\n\n  do {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n    node = node.parentNode;\n  } while (node);\n\n  /* istanbul ignore next */\n  return node;\n}\n\nfunction firstNode(range) {\n  if (range.startContainer.nodeType === Node.ELEMENT_NODE) {\n    var node = range.startContainer.childNodes[range.startOffset];\n    return node || nextNode(range.startContainer, true /* skip children */);\n  }\n  return range.startContainer;\n}\n\nfunction firstNodeAfter(range) {\n  if (range.endContainer.nodeType === Node.ELEMENT_NODE) {\n    var node = range.endContainer.childNodes[range.endOffset];\n    return node || nextNode(range.endContainer, true /* skip children */);\n  }\n  return nextNode(range.endContainer);\n}\n\nfunction forEachNodeInRange(range, cb) {\n  var node = firstNode(range);\n  var pastEnd = firstNodeAfter(range);\n  while (node !== pastEnd) {\n    cb(node);\n    node = nextNode(node);\n  }\n}\n\n/**\n * A ponyfill for Range.toString().\n * Spec: https://dom.spec.whatwg.org/#dom-range-stringifier\n *\n * Works around the buggy Range.toString() implementation in IE and Edge.\n * See https://github.com/tilgovi/dom-anchor-text-position/issues/4\n */\nfunction rangeToString(range) {\n  // This is a fairly direct translation of the Range.toString() implementation\n  // in Blink.\n  var text = '';\n  forEachNodeInRange(range, function (node) {\n    if (node.nodeType !== Node.TEXT_NODE) {\n      return;\n    }\n    var start = node === range.startContainer ? range.startOffset : 0;\n    var end = node === range.endContainer ? range.endOffset : node.textContent.length;\n    text += node.textContent.slice(start, end);\n  });\n  return text;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yYW5nZS10by1zdHJpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7a0JBcUR3QixhO0FBckR4Qjs7QUFFQTs7O0FBR0EsU0FBUyxRQUFULENBQWtCLElBQWxCLEVBQXdCLFlBQXhCLEVBQXNDO0FBQ3BDLE1BQUksQ0FBQyxZQUFELElBQWlCLEtBQUssVUFBMUIsRUFBc0M7QUFDcEMsV0FBTyxLQUFLLFVBQVo7QUFDRDs7QUFFRCxLQUFHO0FBQ0QsUUFBSSxLQUFLLFdBQVQsRUFBc0I7QUFDcEIsYUFBTyxLQUFLLFdBQVo7QUFDRDtBQUNELFdBQU8sS0FBSyxVQUFaO0FBQ0QsR0FMRCxRQUtTLElBTFQ7O0FBT0E7QUFDQSxTQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFTLFNBQVQsQ0FBbUIsS0FBbkIsRUFBMEI7QUFDeEIsTUFBSSxNQUFNLGNBQU4sQ0FBcUIsUUFBckIsS0FBa0MsS0FBSyxZQUEzQyxFQUF5RDtBQUN2RCxRQUFNLE9BQU8sTUFBTSxjQUFOLENBQXFCLFVBQXJCLENBQWdDLE1BQU0sV0FBdEMsQ0FBYjtBQUNBLFdBQU8sUUFBUSxTQUFTLE1BQU0sY0FBZixFQUErQixJQUEvQixDQUFvQyxtQkFBcEMsQ0FBZjtBQUNEO0FBQ0QsU0FBTyxNQUFNLGNBQWI7QUFDRDs7QUFFRCxTQUFTLGNBQVQsQ0FBd0IsS0FBeEIsRUFBK0I7QUFDN0IsTUFBSSxNQUFNLFlBQU4sQ0FBbUIsUUFBbkIsS0FBZ0MsS0FBSyxZQUF6QyxFQUF1RDtBQUNyRCxRQUFNLE9BQU8sTUFBTSxZQUFOLENBQW1CLFVBQW5CLENBQThCLE1BQU0sU0FBcEMsQ0FBYjtBQUNBLFdBQU8sUUFBUSxTQUFTLE1BQU0sWUFBZixFQUE2QixJQUE3QixDQUFrQyxtQkFBbEMsQ0FBZjtBQUNEO0FBQ0QsU0FBTyxTQUFTLE1BQU0sWUFBZixDQUFQO0FBQ0Q7O0FBRUQsU0FBUyxrQkFBVCxDQUE0QixLQUE1QixFQUFtQyxFQUFuQyxFQUF1QztBQUNyQyxNQUFJLE9BQU8sVUFBVSxLQUFWLENBQVg7QUFDQSxNQUFNLFVBQVUsZUFBZSxLQUFmLENBQWhCO0FBQ0EsU0FBTyxTQUFTLE9BQWhCLEVBQXlCO0FBQ3ZCLE9BQUcsSUFBSDtBQUNBLFdBQU8sU0FBUyxJQUFULENBQVA7QUFDRDtBQUNGOztBQUVEOzs7Ozs7O0FBT2UsU0FBUyxhQUFULENBQXVCLEtBQXZCLEVBQThCO0FBQzNDO0FBQ0E7QUFDQSxNQUFJLE9BQU8sRUFBWDtBQUNBLHFCQUFtQixLQUFuQixFQUEwQixVQUFDLElBQUQsRUFBVTtBQUNsQyxRQUFJLEtBQUssUUFBTCxLQUFrQixLQUFLLFNBQTNCLEVBQXNDO0FBQ3BDO0FBQ0Q7QUFDRCxRQUFNLFFBQVEsU0FBUyxNQUFNLGNBQWYsR0FBZ0MsTUFBTSxXQUF0QyxHQUFvRCxDQUFsRTtBQUNBLFFBQU0sTUFBTSxTQUFTLE1BQU0sWUFBZixHQUE4QixNQUFNLFNBQXBDLEdBQWdELEtBQUssV0FBTCxDQUFpQixNQUE3RTtBQUNBLFlBQVEsS0FBSyxXQUFMLENBQWlCLEtBQWpCLENBQXVCLEtBQXZCLEVBQThCLEdBQTlCLENBQVI7QUFDRCxHQVBEO0FBUUEsU0FBTyxJQUFQO0FBQ0QiLCJmaWxlIjoicmFuZ2UtdG8tc3RyaW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIE5vZGUgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIG5leHQgbm9kZSBhZnRlciBgbm9kZWAgaW4gYSB0cmVlIG9yZGVyIHRyYXZlcnNhbCBvZiB0aGUgZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIG5leHROb2RlKG5vZGUsIHNraXBDaGlsZHJlbikge1xuICBpZiAoIXNraXBDaGlsZHJlbiAmJiBub2RlLmZpcnN0Q2hpbGQpIHtcbiAgICByZXR1cm4gbm9kZS5maXJzdENoaWxkXG4gIH1cblxuICBkbyB7XG4gICAgaWYgKG5vZGUubmV4dFNpYmxpbmcpIHtcbiAgICAgIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGVcbiAgfSB3aGlsZSAobm9kZSlcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiBmaXJzdE5vZGUocmFuZ2UpIHtcbiAgaWYgKHJhbmdlLnN0YXJ0Q29udGFpbmVyLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgIGNvbnN0IG5vZGUgPSByYW5nZS5zdGFydENvbnRhaW5lci5jaGlsZE5vZGVzW3JhbmdlLnN0YXJ0T2Zmc2V0XVxuICAgIHJldHVybiBub2RlIHx8IG5leHROb2RlKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCB0cnVlIC8qIHNraXAgY2hpbGRyZW4gKi8pXG4gIH1cbiAgcmV0dXJuIHJhbmdlLnN0YXJ0Q29udGFpbmVyXG59XG5cbmZ1bmN0aW9uIGZpcnN0Tm9kZUFmdGVyKHJhbmdlKSB7XG4gIGlmIChyYW5nZS5lbmRDb250YWluZXIubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgY29uc3Qgbm9kZSA9IHJhbmdlLmVuZENvbnRhaW5lci5jaGlsZE5vZGVzW3JhbmdlLmVuZE9mZnNldF1cbiAgICByZXR1cm4gbm9kZSB8fCBuZXh0Tm9kZShyYW5nZS5lbmRDb250YWluZXIsIHRydWUgLyogc2tpcCBjaGlsZHJlbiAqLylcbiAgfVxuICByZXR1cm4gbmV4dE5vZGUocmFuZ2UuZW5kQ29udGFpbmVyKVxufVxuXG5mdW5jdGlvbiBmb3JFYWNoTm9kZUluUmFuZ2UocmFuZ2UsIGNiKSB7XG4gIGxldCBub2RlID0gZmlyc3ROb2RlKHJhbmdlKVxuICBjb25zdCBwYXN0RW5kID0gZmlyc3ROb2RlQWZ0ZXIocmFuZ2UpXG4gIHdoaWxlIChub2RlICE9PSBwYXN0RW5kKSB7XG4gICAgY2Iobm9kZSlcbiAgICBub2RlID0gbmV4dE5vZGUobm9kZSlcbiAgfVxufVxuXG4vKipcbiAqIEEgcG9ueWZpbGwgZm9yIFJhbmdlLnRvU3RyaW5nKCkuXG4gKiBTcGVjOiBodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yYW5nZS1zdHJpbmdpZmllclxuICpcbiAqIFdvcmtzIGFyb3VuZCB0aGUgYnVnZ3kgUmFuZ2UudG9TdHJpbmcoKSBpbXBsZW1lbnRhdGlvbiBpbiBJRSBhbmQgRWRnZS5cbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdGlsZ292aS9kb20tYW5jaG9yLXRleHQtcG9zaXRpb24vaXNzdWVzLzRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmFuZ2VUb1N0cmluZyhyYW5nZSkge1xuICAvLyBUaGlzIGlzIGEgZmFpcmx5IGRpcmVjdCB0cmFuc2xhdGlvbiBvZiB0aGUgUmFuZ2UudG9TdHJpbmcoKSBpbXBsZW1lbnRhdGlvblxuICAvLyBpbiBCbGluay5cbiAgbGV0IHRleHQgPSAnJ1xuICBmb3JFYWNoTm9kZUluUmFuZ2UocmFuZ2UsIChub2RlKSA9PiB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3Qgc3RhcnQgPSBub2RlID09PSByYW5nZS5zdGFydENvbnRhaW5lciA/IHJhbmdlLnN0YXJ0T2Zmc2V0IDogMFxuICAgIGNvbnN0IGVuZCA9IG5vZGUgPT09IHJhbmdlLmVuZENvbnRhaW5lciA/IHJhbmdlLmVuZE9mZnNldCA6IG5vZGUudGV4dENvbnRlbnQubGVuZ3RoXG4gICAgdGV4dCArPSBub2RlLnRleHRDb250ZW50LnNsaWNlKHN0YXJ0LCBlbmQpXG4gIH0pXG4gIHJldHVybiB0ZXh0XG59XG5cbiJdfQ==\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/dom-anchor-text-quote/node_modules/dom-anchor-text-position/lib/range-to-string.js\n");

/***/ }),

/***/ "./node_modules/dom-anchor-text-quote/node_modules/dom-seek/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/dom-anchor-text-quote/node_modules/dom-seek/index.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib */ \"./node_modules/dom-anchor-text-quote/node_modules/dom-seek/lib/index.js\")['default'];\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWFuY2hvci10ZXh0LXF1b3RlL25vZGVfbW9kdWxlcy9kb20tc2Vlay9pbmRleC5qcz8yZjY3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLHNGQUFPIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2RvbS1hbmNob3ItdGV4dC1xdW90ZS9ub2RlX21vZHVsZXMvZG9tLXNlZWsvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliJylbJ2RlZmF1bHQnXTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/dom-anchor-text-quote/node_modules/dom-seek/index.js\n");

/***/ }),

/***/ "./node_modules/dom-anchor-text-quote/node_modules/dom-seek/lib/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/dom-anchor-text-quote/node_modules/dom-seek/lib/index.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports['default'] = seek;\n\nvar _ancestors = __webpack_require__(/*! ancestors */ \"./node_modules/ancestors/index.js\");\n\nvar _ancestors2 = _interopRequireDefault(_ancestors);\n\nvar _indexOf = __webpack_require__(/*! index-of */ \"./node_modules/index-of/index.js\");\n\nvar _indexOf2 = _interopRequireDefault(_indexOf);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar E_SHOW = 'Argument 1 of seek must use filter NodeFilter.SHOW_TEXT.';\nvar E_WHERE = 'Argument 2 of seek must be a number or a Text Node.';\n\nvar SHOW_TEXT = 4;\nvar TEXT_NODE = 3;\n\nfunction seek(iter, where) {\n  if (iter.whatToShow !== SHOW_TEXT) {\n    throw new Error(E_SHOW);\n  }\n\n  var count = 0;\n  var node = iter.referenceNode;\n  var predicates = null;\n\n  if (isNumber(where)) {\n    predicates = {\n      forward: function forward() {\n        return count < where;\n      },\n      backward: function backward() {\n        return count > where;\n      }\n    };\n  } else if (isText(where)) {\n    var forward = before(node, where) ? function () {\n      return false;\n    } : function () {\n      return node !== where;\n    };\n    var backward = function backward() {\n      return node != where || !iter.pointerBeforeReferenceNode;\n    };\n    predicates = { forward: forward, backward: backward };\n  } else {\n    throw new Error(E_WHERE);\n  }\n\n  while (predicates.forward() && (node = iter.nextNode()) !== null) {\n    count += node.nodeValue.length;\n  }\n\n  while (predicates.backward() && (node = iter.previousNode()) !== null) {\n    count -= node.nodeValue.length;\n  }\n\n  return count;\n}\n\nfunction isNumber(n) {\n  return !isNaN(parseInt(n)) && isFinite(n);\n}\n\nfunction isText(node) {\n  return node.nodeType === TEXT_NODE;\n}\n\nfunction before(ref, node) {\n  if (ref === node) return false;\n\n  var common = null;\n  var left = [ref].concat((0, _ancestors2['default'])(ref)).reverse();\n  var right = [node].concat((0, _ancestors2['default'])(node)).reverse();\n\n  while (left[0] === right[0]) {\n    common = left.shift();\n    right.shift();\n  }\n\n  left = left[0];\n  right = right[0];\n\n  var l = (0, _indexOf2['default'])(common.childNodes, left);\n  var r = (0, _indexOf2['default'])(common.childNodes, right);\n\n  return l > r;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJzZWVrIiwiRV9TSE9XIiwiRV9XSEVSRSIsIlNIT1dfVEVYVCIsIlRFWFRfTk9ERSIsIml0ZXIiLCJ3aGVyZSIsIndoYXRUb1Nob3ciLCJFcnJvciIsImNvdW50Iiwibm9kZSIsInJlZmVyZW5jZU5vZGUiLCJwcmVkaWNhdGVzIiwiaXNOdW1iZXIiLCJmb3J3YXJkIiwiYmFja3dhcmQiLCJpc1RleHQiLCJiZWZvcmUiLCJwb2ludGVyQmVmb3JlUmVmZXJlbmNlTm9kZSIsIm5leHROb2RlIiwibm9kZVZhbHVlIiwibGVuZ3RoIiwicHJldmlvdXNOb2RlIiwibiIsImlzTmFOIiwicGFyc2VJbnQiLCJpc0Zpbml0ZSIsIm5vZGVUeXBlIiwicmVmIiwiY29tbW9uIiwibGVmdCIsImNvbmNhdCIsInJldmVyc2UiLCJyaWdodCIsInNoaWZ0IiwibCIsImNoaWxkTm9kZXMiLCJyIl0sIm1hcHBpbmdzIjoiOzs7cUJBVXdCQSxJOztBQVZ4Qjs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQyxTQUFTLDBEQUFmO0FBQ0EsSUFBTUMsVUFBVSxxREFBaEI7O0FBRUEsSUFBTUMsWUFBWSxDQUFsQjtBQUNBLElBQU1DLFlBQVksQ0FBbEI7O0FBR2UsU0FBU0osSUFBVCxDQUFjSyxJQUFkLEVBQW9CQyxLQUFwQixFQUEyQjtBQUN4QyxNQUFJRCxLQUFLRSxVQUFMLEtBQW9CSixTQUF4QixFQUFtQztBQUNqQyxVQUFNLElBQUlLLEtBQUosQ0FBVVAsTUFBVixDQUFOO0FBQ0Q7O0FBRUQsTUFBSVEsUUFBUSxDQUFaO0FBQ0EsTUFBSUMsT0FBT0wsS0FBS00sYUFBaEI7QUFDQSxNQUFJQyxhQUFhLElBQWpCOztBQUVBLE1BQUlDLFNBQVNQLEtBQVQsQ0FBSixFQUFxQjtBQUNuQk0saUJBQWE7QUFDWEUsZUFBUztBQUFBLGVBQU1MLFFBQVFILEtBQWQ7QUFBQSxPQURFO0FBRVhTLGdCQUFVO0FBQUEsZUFBTU4sUUFBUUgsS0FBZDtBQUFBO0FBRkMsS0FBYjtBQUlELEdBTEQsTUFLTyxJQUFJVSxPQUFPVixLQUFQLENBQUosRUFBbUI7QUFDeEIsUUFBSVEsVUFBVUcsT0FBT1AsSUFBUCxFQUFhSixLQUFiLElBQXNCO0FBQUEsYUFBTSxLQUFOO0FBQUEsS0FBdEIsR0FBb0M7QUFBQSxhQUFNSSxTQUFTSixLQUFmO0FBQUEsS0FBbEQ7QUFDQSxRQUFJUyxXQUFXLFNBQVhBLFFBQVc7QUFBQSxhQUFNTCxRQUFRSixLQUFSLElBQWlCLENBQUNELEtBQUthLDBCQUE3QjtBQUFBLEtBQWY7QUFDQU4saUJBQWEsRUFBQ0UsZ0JBQUQsRUFBVUMsa0JBQVYsRUFBYjtBQUNELEdBSk0sTUFJQTtBQUNMLFVBQU0sSUFBSVAsS0FBSixDQUFVTixPQUFWLENBQU47QUFDRDs7QUFFRCxTQUFPVSxXQUFXRSxPQUFYLE1BQXdCLENBQUNKLE9BQU9MLEtBQUtjLFFBQUwsRUFBUixNQUE2QixJQUE1RCxFQUFrRTtBQUNoRVYsYUFBU0MsS0FBS1UsU0FBTCxDQUFlQyxNQUF4QjtBQUNEOztBQUVELFNBQU9ULFdBQVdHLFFBQVgsTUFBeUIsQ0FBQ0wsT0FBT0wsS0FBS2lCLFlBQUwsRUFBUixNQUFpQyxJQUFqRSxFQUF1RTtBQUNyRWIsYUFBU0MsS0FBS1UsU0FBTCxDQUFlQyxNQUF4QjtBQUNEOztBQUVELFNBQU9aLEtBQVA7QUFDRDs7QUFHRCxTQUFTSSxRQUFULENBQWtCVSxDQUFsQixFQUFxQjtBQUNuQixTQUFPLENBQUNDLE1BQU1DLFNBQVNGLENBQVQsQ0FBTixDQUFELElBQXVCRyxTQUFTSCxDQUFULENBQTlCO0FBQ0Q7O0FBR0QsU0FBU1AsTUFBVCxDQUFnQk4sSUFBaEIsRUFBc0I7QUFDcEIsU0FBT0EsS0FBS2lCLFFBQUwsS0FBa0J2QixTQUF6QjtBQUNEOztBQUdELFNBQVNhLE1BQVQsQ0FBZ0JXLEdBQWhCLEVBQXFCbEIsSUFBckIsRUFBMkI7QUFDekIsTUFBSWtCLFFBQVFsQixJQUFaLEVBQWtCLE9BQU8sS0FBUDs7QUFFbEIsTUFBSW1CLFNBQVMsSUFBYjtBQUNBLE1BQUlDLE9BQU8sQ0FBQ0YsR0FBRCxFQUFNRyxNQUFOLENBQWEsNEJBQVVILEdBQVYsQ0FBYixFQUE2QkksT0FBN0IsRUFBWDtBQUNBLE1BQUlDLFFBQVEsQ0FBQ3ZCLElBQUQsRUFBT3FCLE1BQVAsQ0FBYyw0QkFBVXJCLElBQVYsQ0FBZCxFQUErQnNCLE9BQS9CLEVBQVo7O0FBRUEsU0FBT0YsS0FBSyxDQUFMLE1BQVlHLE1BQU0sQ0FBTixDQUFuQixFQUE2QjtBQUMzQkosYUFBU0MsS0FBS0ksS0FBTCxFQUFUO0FBQ0FELFVBQU1DLEtBQU47QUFDRDs7QUFFREosU0FBT0EsS0FBSyxDQUFMLENBQVA7QUFDQUcsVUFBUUEsTUFBTSxDQUFOLENBQVI7O0FBRUEsTUFBSUUsSUFBSSwwQkFBUU4sT0FBT08sVUFBZixFQUEyQk4sSUFBM0IsQ0FBUjtBQUNBLE1BQUlPLElBQUksMEJBQVFSLE9BQU9PLFVBQWYsRUFBMkJILEtBQTNCLENBQVI7O0FBRUEsU0FBT0UsSUFBSUUsQ0FBWDtBQUNEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFuY2VzdG9ycyBmcm9tICdhbmNlc3RvcnMnXG5pbXBvcnQgaW5kZXhPZiBmcm9tICdpbmRleC1vZidcblxuY29uc3QgRV9TSE9XID0gJ0FyZ3VtZW50IDEgb2Ygc2VlayBtdXN0IHVzZSBmaWx0ZXIgTm9kZUZpbHRlci5TSE9XX1RFWFQuJ1xuY29uc3QgRV9XSEVSRSA9ICdBcmd1bWVudCAyIG9mIHNlZWsgbXVzdCBiZSBhIG51bWJlciBvciBhIFRleHQgTm9kZS4nXG5cbmNvbnN0IFNIT1dfVEVYVCA9IDRcbmNvbnN0IFRFWFRfTk9ERSA9IDNcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZWVrKGl0ZXIsIHdoZXJlKSB7XG4gIGlmIChpdGVyLndoYXRUb1Nob3cgIT09IFNIT1dfVEVYVCkge1xuICAgIHRocm93IG5ldyBFcnJvcihFX1NIT1cpXG4gIH1cblxuICBsZXQgY291bnQgPSAwXG4gIGxldCBub2RlID0gaXRlci5yZWZlcmVuY2VOb2RlXG4gIGxldCBwcmVkaWNhdGVzID0gbnVsbFxuXG4gIGlmIChpc051bWJlcih3aGVyZSkpIHtcbiAgICBwcmVkaWNhdGVzID0ge1xuICAgICAgZm9yd2FyZDogKCkgPT4gY291bnQgPCB3aGVyZSxcbiAgICAgIGJhY2t3YXJkOiAoKSA9PiBjb3VudCA+IHdoZXJlLFxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1RleHQod2hlcmUpKSB7XG4gICAgbGV0IGZvcndhcmQgPSBiZWZvcmUobm9kZSwgd2hlcmUpID8gKCkgPT4gZmFsc2UgOiAoKSA9PiBub2RlICE9PSB3aGVyZVxuICAgIGxldCBiYWNrd2FyZCA9ICgpID0+IG5vZGUgIT0gd2hlcmUgfHwgIWl0ZXIucG9pbnRlckJlZm9yZVJlZmVyZW5jZU5vZGVcbiAgICBwcmVkaWNhdGVzID0ge2ZvcndhcmQsIGJhY2t3YXJkfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihFX1dIRVJFKVxuICB9XG5cbiAgd2hpbGUgKHByZWRpY2F0ZXMuZm9yd2FyZCgpICYmIChub2RlID0gaXRlci5uZXh0Tm9kZSgpKSAhPT0gbnVsbCkge1xuICAgIGNvdW50ICs9IG5vZGUubm9kZVZhbHVlLmxlbmd0aFxuICB9XG5cbiAgd2hpbGUgKHByZWRpY2F0ZXMuYmFja3dhcmQoKSAmJiAobm9kZSA9IGl0ZXIucHJldmlvdXNOb2RlKCkpICE9PSBudWxsKSB7XG4gICAgY291bnQgLT0gbm9kZS5ub2RlVmFsdWUubGVuZ3RoXG4gIH1cblxuICByZXR1cm4gY291bnRcbn1cblxuXG5mdW5jdGlvbiBpc051bWJlcihuKSB7XG4gIHJldHVybiAhaXNOYU4ocGFyc2VJbnQobikpICYmIGlzRmluaXRlKG4pXG59XG5cblxuZnVuY3Rpb24gaXNUZXh0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IFRFWFRfTk9ERVxufVxuXG5cbmZ1bmN0aW9uIGJlZm9yZShyZWYsIG5vZGUpIHtcbiAgaWYgKHJlZiA9PT0gbm9kZSkgcmV0dXJuIGZhbHNlXG5cbiAgbGV0IGNvbW1vbiA9IG51bGxcbiAgbGV0IGxlZnQgPSBbcmVmXS5jb25jYXQoYW5jZXN0b3JzKHJlZikpLnJldmVyc2UoKVxuICBsZXQgcmlnaHQgPSBbbm9kZV0uY29uY2F0KGFuY2VzdG9ycyhub2RlKSkucmV2ZXJzZSgpXG5cbiAgd2hpbGUgKGxlZnRbMF0gPT09IHJpZ2h0WzBdKSB7XG4gICAgY29tbW9uID0gbGVmdC5zaGlmdCgpXG4gICAgcmlnaHQuc2hpZnQoKVxuICB9XG5cbiAgbGVmdCA9IGxlZnRbMF1cbiAgcmlnaHQgPSByaWdodFswXVxuXG4gIGxldCBsID0gaW5kZXhPZihjb21tb24uY2hpbGROb2RlcywgbGVmdClcbiAgbGV0IHIgPSBpbmRleE9mKGNvbW1vbi5jaGlsZE5vZGVzLCByaWdodClcblxuICByZXR1cm4gbCA+IHJcbn1cbiJdfQ==\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/dom-anchor-text-quote/node_modules/dom-seek/lib/index.js\n");

/***/ }),

/***/ "./node_modules/dom-node-iterator/implementation.js":
/*!**********************************************************!*\
  !*** ./node_modules/dom-node-iterator/implementation.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/implementation */ \"./node_modules/dom-node-iterator/lib/implementation.js\")['default'];\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLW5vZGUtaXRlcmF0b3IvaW1wbGVtZW50YXRpb24uanM/MDg1MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyxvRkFBc0IiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZG9tLW5vZGUtaXRlcmF0b3IvaW1wbGVtZW50YXRpb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2ltcGxlbWVudGF0aW9uJylbJ2RlZmF1bHQnXTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/dom-node-iterator/implementation.js\n");

/***/ }),

/***/ "./node_modules/dom-node-iterator/index.js":
/*!*************************************************!*\
  !*** ./node_modules/dom-node-iterator/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib */ \"./node_modules/dom-node-iterator/lib/index.js\")['default'];\nmodule.exports.getPolyfill = __webpack_require__(/*! ./polyfill */ \"./node_modules/dom-node-iterator/polyfill.js\");\nmodule.exports.implementation = __webpack_require__(/*! ./implementation */ \"./node_modules/dom-node-iterator/implementation.js\");\nmodule.exports.shim = __webpack_require__(/*! ./shim */ \"./node_modules/dom-node-iterator/shim.js\");\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLW5vZGUtaXRlcmF0b3IvaW5kZXguanM/ZWVlOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyw0REFBTztBQUNoQyw2QkFBNkIsbUJBQU8sQ0FBQyxnRUFBWTtBQUNqRCxnQ0FBZ0MsbUJBQU8sQ0FBQyw0RUFBa0I7QUFDMUQsc0JBQXNCLG1CQUFPLENBQUMsd0RBQVEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZG9tLW5vZGUtaXRlcmF0b3IvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliJylbJ2RlZmF1bHQnXTtcbm1vZHVsZS5leHBvcnRzLmdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xubW9kdWxlLmV4cG9ydHMuaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cy5zaGltID0gcmVxdWlyZSgnLi9zaGltJyk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/dom-node-iterator/index.js\n");

/***/ }),

/***/ "./node_modules/dom-node-iterator/lib/adapter.js":
/*!*******************************************************!*\
  !*** ./node_modules/dom-node-iterator/lib/adapter.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nexports['default'] = createNodeIterator;\n\n\nfunction createNodeIterator(root) {\n  var whatToShow = arguments.length <= 1 || arguments[1] === undefined ? 0xFFFFFFFF : arguments[1];\n  var filter = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  var doc = root.nodeType == 9 || root.ownerDocument;\n  var iter = doc.createNodeIterator(root, whatToShow, filter, false);\n  return new NodeIterator(iter, root, whatToShow, filter);\n}\n\nvar NodeIterator = function () {\n  function NodeIterator(iter, root, whatToShow, filter) {\n    _classCallCheck(this, NodeIterator);\n\n    this.root = root;\n    this.whatToShow = whatToShow;\n    this.filter = filter;\n    this.referenceNode = root;\n    this.pointerBeforeReferenceNode = true;\n    this._iter = iter;\n  }\n\n  NodeIterator.prototype.nextNode = function nextNode() {\n    var result = this._iter.nextNode();\n    this.pointerBeforeReferenceNode = false;\n    if (result === null) return null;\n    this.referenceNode = result;\n    return this.referenceNode;\n  };\n\n  NodeIterator.prototype.previousNode = function previousNode() {\n    var result = this._iter.previousNode();\n    this.pointerBeforeReferenceNode = true;\n    if (result === null) return null;\n    this.referenceNode = result;\n    return this.referenceNode;\n  };\n\n  NodeIterator.prototype.toString = function toString() {\n    return '[object NodeIterator]';\n  };\n\n  return NodeIterator;\n}();\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGFwdGVyLmpzIl0sIm5hbWVzIjpbImNyZWF0ZU5vZGVJdGVyYXRvciIsInJvb3QiLCJ3aGF0VG9TaG93IiwiZmlsdGVyIiwiZG9jIiwibm9kZVR5cGUiLCJvd25lckRvY3VtZW50IiwiaXRlciIsIk5vZGVJdGVyYXRvciIsInJlZmVyZW5jZU5vZGUiLCJwb2ludGVyQmVmb3JlUmVmZXJlbmNlTm9kZSIsIl9pdGVyIiwibmV4dE5vZGUiLCJyZXN1bHQiLCJwcmV2aW91c05vZGUiLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O3FCQUFlQSxrQjs7O0FBR2YsU0FBU0Esa0JBQVQsQ0FBNEJDLElBQTVCLEVBQTBFO0FBQUEsTUFBeENDLFVBQXdDLHlEQUEzQixVQUEyQjtBQUFBLE1BQWZDLE1BQWUseURBQU4sSUFBTTs7QUFDeEUsTUFBTUMsTUFBT0gsS0FBS0ksUUFBTCxJQUFpQixDQUFsQixJQUF3QkosS0FBS0ssYUFBekM7QUFDQSxNQUFNQyxPQUFPSCxJQUFJSixrQkFBSixDQUF1QkMsSUFBdkIsRUFBNkJDLFVBQTdCLEVBQXlDQyxNQUF6QyxFQUFpRCxLQUFqRCxDQUFiO0FBQ0EsU0FBTyxJQUFJSyxZQUFKLENBQWlCRCxJQUFqQixFQUF1Qk4sSUFBdkIsRUFBNkJDLFVBQTdCLEVBQXlDQyxNQUF6QyxDQUFQO0FBQ0Q7O0lBR0tLLFk7QUFDSix3QkFBWUQsSUFBWixFQUFrQk4sSUFBbEIsRUFBd0JDLFVBQXhCLEVBQW9DQyxNQUFwQyxFQUE0QztBQUFBOztBQUMxQyxTQUFLRixJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxVQUFMLEdBQWtCQSxVQUFsQjtBQUNBLFNBQUtDLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtNLGFBQUwsR0FBcUJSLElBQXJCO0FBQ0EsU0FBS1MsMEJBQUwsR0FBa0MsSUFBbEM7QUFDQSxTQUFLQyxLQUFMLEdBQWFKLElBQWI7QUFDRDs7eUJBRURLLFEsdUJBQVc7QUFDVCxRQUFNQyxTQUFTLEtBQUtGLEtBQUwsQ0FBV0MsUUFBWCxFQUFmO0FBQ0EsU0FBS0YsMEJBQUwsR0FBa0MsS0FBbEM7QUFDQSxRQUFJRyxXQUFXLElBQWYsRUFBcUIsT0FBTyxJQUFQO0FBQ3JCLFNBQUtKLGFBQUwsR0FBcUJJLE1BQXJCO0FBQ0EsV0FBTyxLQUFLSixhQUFaO0FBQ0QsRzs7eUJBRURLLFksMkJBQWU7QUFDYixRQUFNRCxTQUFTLEtBQUtGLEtBQUwsQ0FBV0csWUFBWCxFQUFmO0FBQ0EsU0FBS0osMEJBQUwsR0FBa0MsSUFBbEM7QUFDQSxRQUFJRyxXQUFXLElBQWYsRUFBcUIsT0FBTyxJQUFQO0FBQ3JCLFNBQUtKLGFBQUwsR0FBcUJJLE1BQXJCO0FBQ0EsV0FBTyxLQUFLSixhQUFaO0FBQ0QsRzs7eUJBRURNLFEsdUJBQVc7QUFDVCxXQUFPLHVCQUFQO0FBQ0QsRyIsImZpbGUiOiJhZGFwdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY3JlYXRlTm9kZUl0ZXJhdG9yXG5cblxuZnVuY3Rpb24gY3JlYXRlTm9kZUl0ZXJhdG9yKHJvb3QsIHdoYXRUb1Nob3cgPSAweEZGRkZGRkZGLCBmaWx0ZXIgPSBudWxsKSB7XG4gIGNvbnN0IGRvYyA9IChyb290Lm5vZGVUeXBlID09IDkpIHx8IHJvb3Qub3duZXJEb2N1bWVudFxuICBjb25zdCBpdGVyID0gZG9jLmNyZWF0ZU5vZGVJdGVyYXRvcihyb290LCB3aGF0VG9TaG93LCBmaWx0ZXIsIGZhbHNlKVxuICByZXR1cm4gbmV3IE5vZGVJdGVyYXRvcihpdGVyLCByb290LCB3aGF0VG9TaG93LCBmaWx0ZXIpXG59XG5cblxuY2xhc3MgTm9kZUl0ZXJhdG9yIHtcbiAgY29uc3RydWN0b3IoaXRlciwgcm9vdCwgd2hhdFRvU2hvdywgZmlsdGVyKSB7XG4gICAgdGhpcy5yb290ID0gcm9vdFxuICAgIHRoaXMud2hhdFRvU2hvdyA9IHdoYXRUb1Nob3dcbiAgICB0aGlzLmZpbHRlciA9IGZpbHRlclxuICAgIHRoaXMucmVmZXJlbmNlTm9kZSA9IHJvb3RcbiAgICB0aGlzLnBvaW50ZXJCZWZvcmVSZWZlcmVuY2VOb2RlID0gdHJ1ZVxuICAgIHRoaXMuX2l0ZXIgPSBpdGVyXG4gIH1cblxuICBuZXh0Tm9kZSgpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9pdGVyLm5leHROb2RlKClcbiAgICB0aGlzLnBvaW50ZXJCZWZvcmVSZWZlcmVuY2VOb2RlID0gZmFsc2VcbiAgICBpZiAocmVzdWx0ID09PSBudWxsKSByZXR1cm4gbnVsbFxuICAgIHRoaXMucmVmZXJlbmNlTm9kZSA9IHJlc3VsdFxuICAgIHJldHVybiB0aGlzLnJlZmVyZW5jZU5vZGVcbiAgfVxuXG4gIHByZXZpb3VzTm9kZSgpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9pdGVyLnByZXZpb3VzTm9kZSgpXG4gICAgdGhpcy5wb2ludGVyQmVmb3JlUmVmZXJlbmNlTm9kZSA9IHRydWVcbiAgICBpZiAocmVzdWx0ID09PSBudWxsKSByZXR1cm4gbnVsbFxuICAgIHRoaXMucmVmZXJlbmNlTm9kZSA9IHJlc3VsdFxuICAgIHJldHVybiB0aGlzLnJlZmVyZW5jZU5vZGVcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCBOb2RlSXRlcmF0b3JdJ1xuICB9XG59XG4iXX0=\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLW5vZGUtaXRlcmF0b3IvbGliL2FkYXB0ZXIuanM/NmNlOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7QUFFQSxpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2Sjs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDO0FBQ0QsMkNBQTJDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2RvbS1ub2RlLWl0ZXJhdG9yL2xpYi9hZGFwdGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGVOb2RlSXRlcmF0b3I7XG5cblxuZnVuY3Rpb24gY3JlYXRlTm9kZUl0ZXJhdG9yKHJvb3QpIHtcbiAgdmFyIHdoYXRUb1Nob3cgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyAweEZGRkZGRkZGIDogYXJndW1lbnRzWzFdO1xuICB2YXIgZmlsdGVyID0gYXJndW1lbnRzLmxlbmd0aCA8PSAyIHx8IGFyZ3VtZW50c1syXSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGFyZ3VtZW50c1syXTtcblxuICB2YXIgZG9jID0gcm9vdC5ub2RlVHlwZSA9PSA5IHx8IHJvb3Qub3duZXJEb2N1bWVudDtcbiAgdmFyIGl0ZXIgPSBkb2MuY3JlYXRlTm9kZUl0ZXJhdG9yKHJvb3QsIHdoYXRUb1Nob3csIGZpbHRlciwgZmFsc2UpO1xuICByZXR1cm4gbmV3IE5vZGVJdGVyYXRvcihpdGVyLCByb290LCB3aGF0VG9TaG93LCBmaWx0ZXIpO1xufVxuXG52YXIgTm9kZUl0ZXJhdG9yID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBOb2RlSXRlcmF0b3IoaXRlciwgcm9vdCwgd2hhdFRvU2hvdywgZmlsdGVyKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vZGVJdGVyYXRvcik7XG5cbiAgICB0aGlzLnJvb3QgPSByb290O1xuICAgIHRoaXMud2hhdFRvU2hvdyA9IHdoYXRUb1Nob3c7XG4gICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgdGhpcy5yZWZlcmVuY2VOb2RlID0gcm9vdDtcbiAgICB0aGlzLnBvaW50ZXJCZWZvcmVSZWZlcmVuY2VOb2RlID0gdHJ1ZTtcbiAgICB0aGlzLl9pdGVyID0gaXRlcjtcbiAgfVxuXG4gIE5vZGVJdGVyYXRvci5wcm90b3R5cGUubmV4dE5vZGUgPSBmdW5jdGlvbiBuZXh0Tm9kZSgpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5faXRlci5uZXh0Tm9kZSgpO1xuICAgIHRoaXMucG9pbnRlckJlZm9yZVJlZmVyZW5jZU5vZGUgPSBmYWxzZTtcbiAgICBpZiAocmVzdWx0ID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLnJlZmVyZW5jZU5vZGUgPSByZXN1bHQ7XG4gICAgcmV0dXJuIHRoaXMucmVmZXJlbmNlTm9kZTtcbiAgfTtcblxuICBOb2RlSXRlcmF0b3IucHJvdG90eXBlLnByZXZpb3VzTm9kZSA9IGZ1bmN0aW9uIHByZXZpb3VzTm9kZSgpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5faXRlci5wcmV2aW91c05vZGUoKTtcbiAgICB0aGlzLnBvaW50ZXJCZWZvcmVSZWZlcmVuY2VOb2RlID0gdHJ1ZTtcbiAgICBpZiAocmVzdWx0ID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLnJlZmVyZW5jZU5vZGUgPSByZXN1bHQ7XG4gICAgcmV0dXJuIHRoaXMucmVmZXJlbmNlTm9kZTtcbiAgfTtcblxuICBOb2RlSXRlcmF0b3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0IE5vZGVJdGVyYXRvcl0nO1xuICB9O1xuXG4gIHJldHVybiBOb2RlSXRlcmF0b3I7XG59KCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTloWkdGd2RHVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYkltTnlaV0YwWlU1dlpHVkpkR1Z5WVhSdmNpSXNJbkp2YjNRaUxDSjNhR0YwVkc5VGFHOTNJaXdpWm1sc2RHVnlJaXdpWkc5aklpd2libTlrWlZSNWNHVWlMQ0p2ZDI1bGNrUnZZM1Z0Wlc1MElpd2lhWFJsY2lJc0lrNXZaR1ZKZEdWeVlYUnZjaUlzSW5KbFptVnlaVzVqWlU1dlpHVWlMQ0p3YjJsdWRHVnlRbVZtYjNKbFVtVm1aWEpsYm1ObFRtOWtaU0lzSWw5cGRHVnlJaXdpYm1WNGRFNXZaR1VpTENKeVpYTjFiSFFpTENKd2NtVjJhVzkxYzA1dlpHVWlMQ0owYjFOMGNtbHVaeUpkTENKdFlYQndhVzVuY3lJNklqczdPenM3TzNGQ1FVRmxRU3hyUWpzN08wRkJSMllzVTBGQlUwRXNhMEpCUVZRc1EwRkJORUpETEVsQlFUVkNMRVZCUVRCRk8wRkJRVUVzVFVGQmVFTkRMRlZCUVhkRExIbEVRVUV6UWl4VlFVRXlRanRCUVVGQkxFMUJRV1pETEUxQlFXVXNlVVJCUVU0c1NVRkJUVHM3UVVGRGVFVXNUVUZCVFVNc1RVRkJUMGdzUzBGQlMwa3NVVUZCVEN4SlFVRnBRaXhEUVVGc1FpeEpRVUYzUWtvc1MwRkJTMHNzWVVGQmVrTTdRVUZEUVN4TlFVRk5ReXhQUVVGUFNDeEpRVUZKU2l4clFrRkJTaXhEUVVGMVFrTXNTVUZCZGtJc1JVRkJOa0pETEZWQlFUZENMRVZCUVhsRFF5eE5RVUY2UXl4RlFVRnBSQ3hMUVVGcVJDeERRVUZpTzBGQlEwRXNVMEZCVHl4SlFVRkpTeXhaUVVGS0xFTkJRV2xDUkN4SlFVRnFRaXhGUVVGMVFrNHNTVUZCZGtJc1JVRkJOa0pETEZWQlFUZENMRVZCUVhsRFF5eE5RVUY2UXl4RFFVRlFPMEZCUTBRN08wbEJSMHRMTEZrN1FVRkRTaXgzUWtGQldVUXNTVUZCV2l4RlFVRnJRazRzU1VGQmJFSXNSVUZCZDBKRExGVkJRWGhDTEVWQlFXOURReXhOUVVGd1F5eEZRVUUwUXp0QlFVRkJPenRCUVVNeFF5eFRRVUZMUml4SlFVRk1MRWRCUVZsQkxFbEJRVm83UVVGRFFTeFRRVUZMUXl4VlFVRk1MRWRCUVd0Q1FTeFZRVUZzUWp0QlFVTkJMRk5CUVV0RExFMUJRVXdzUjBGQlkwRXNUVUZCWkR0QlFVTkJMRk5CUVV0TkxHRkJRVXdzUjBGQmNVSlNMRWxCUVhKQ08wRkJRMEVzVTBGQlMxTXNNRUpCUVV3c1IwRkJhME1zU1VGQmJFTTdRVUZEUVN4VFFVRkxReXhMUVVGTUxFZEJRV0ZLTEVsQlFXSTdRVUZEUkRzN2VVSkJSVVJMTEZFc2RVSkJRVmM3UVVGRFZDeFJRVUZOUXl4VFFVRlRMRXRCUVV0R0xFdEJRVXdzUTBGQlYwTXNVVUZCV0N4RlFVRm1PMEZCUTBFc1UwRkJTMFlzTUVKQlFVd3NSMEZCYTBNc1MwRkJiRU03UVVGRFFTeFJRVUZKUnl4WFFVRlhMRWxCUVdZc1JVRkJjVUlzVDBGQlR5eEpRVUZRTzBGQlEzSkNMRk5CUVV0S0xHRkJRVXdzUjBGQmNVSkpMRTFCUVhKQ08wRkJRMEVzVjBGQlR5eExRVUZMU2l4aFFVRmFPMEZCUTBRc1J6czdlVUpCUlVSTExGa3NNa0pCUVdVN1FVRkRZaXhSUVVGTlJDeFRRVUZUTEV0QlFVdEdMRXRCUVV3c1EwRkJWMGNzV1VGQldDeEZRVUZtTzBGQlEwRXNVMEZCUzBvc01FSkJRVXdzUjBGQmEwTXNTVUZCYkVNN1FVRkRRU3hSUVVGSlJ5eFhRVUZYTEVsQlFXWXNSVUZCY1VJc1QwRkJUeXhKUVVGUU8wRkJRM0pDTEZOQlFVdEtMR0ZCUVV3c1IwRkJjVUpKTEUxQlFYSkNPMEZCUTBFc1YwRkJUeXhMUVVGTFNpeGhRVUZhTzBGQlEwUXNSenM3ZVVKQlJVUk5MRkVzZFVKQlFWYzdRVUZEVkN4WFFVRlBMSFZDUVVGUU8wRkJRMFFzUnlJc0ltWnBiR1VpT2lKaFpHRndkR1Z5TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laWGh3YjNKMElHUmxabUYxYkhRZ1kzSmxZWFJsVG05a1pVbDBaWEpoZEc5eVhHNWNibHh1Wm5WdVkzUnBiMjRnWTNKbFlYUmxUbTlrWlVsMFpYSmhkRzl5S0hKdmIzUXNJSGRvWVhSVWIxTm9iM2NnUFNBd2VFWkdSa1pHUmtaR0xDQm1hV3gwWlhJZ1BTQnVkV3hzS1NCN1hHNGdJR052Ym5OMElHUnZZeUE5SUNoeWIyOTBMbTV2WkdWVWVYQmxJRDA5SURrcElIeDhJSEp2YjNRdWIzZHVaWEpFYjJOMWJXVnVkRnh1SUNCamIyNXpkQ0JwZEdWeUlEMGdaRzlqTG1OeVpXRjBaVTV2WkdWSmRHVnlZWFJ2Y2loeWIyOTBMQ0IzYUdGMFZHOVRhRzkzTENCbWFXeDBaWElzSUdaaGJITmxLVnh1SUNCeVpYUjFjbTRnYm1WM0lFNXZaR1ZKZEdWeVlYUnZjaWhwZEdWeUxDQnliMjkwTENCM2FHRjBWRzlUYUc5M0xDQm1hV3gwWlhJcFhHNTlYRzVjYmx4dVkyeGhjM01nVG05a1pVbDBaWEpoZEc5eUlIdGNiaUFnWTI5dWMzUnlkV04wYjNJb2FYUmxjaXdnY205dmRDd2dkMmhoZEZSdlUyaHZkeXdnWm1sc2RHVnlLU0I3WEc0Z0lDQWdkR2hwY3k1eWIyOTBJRDBnY205dmRGeHVJQ0FnSUhSb2FYTXVkMmhoZEZSdlUyaHZkeUE5SUhkb1lYUlViMU5vYjNkY2JpQWdJQ0IwYUdsekxtWnBiSFJsY2lBOUlHWnBiSFJsY2x4dUlDQWdJSFJvYVhNdWNtVm1aWEpsYm1ObFRtOWtaU0E5SUhKdmIzUmNiaUFnSUNCMGFHbHpMbkJ2YVc1MFpYSkNaV1p2Y21WU1pXWmxjbVZ1WTJWT2IyUmxJRDBnZEhKMVpWeHVJQ0FnSUhSb2FYTXVYMmwwWlhJZ1BTQnBkR1Z5WEc0Z0lIMWNibHh1SUNCdVpYaDBUbTlrWlNncElIdGNiaUFnSUNCamIyNXpkQ0J5WlhOMWJIUWdQU0IwYUdsekxsOXBkR1Z5TG01bGVIUk9iMlJsS0NsY2JpQWdJQ0IwYUdsekxuQnZhVzUwWlhKQ1pXWnZjbVZTWldabGNtVnVZMlZPYjJSbElEMGdabUZzYzJWY2JpQWdJQ0JwWmlBb2NtVnpkV3gwSUQwOVBTQnVkV3hzS1NCeVpYUjFjbTRnYm5Wc2JGeHVJQ0FnSUhSb2FYTXVjbVZtWlhKbGJtTmxUbTlrWlNBOUlISmxjM1ZzZEZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbFptVnlaVzVqWlU1dlpHVmNiaUFnZlZ4dVhHNGdJSEJ5WlhacGIzVnpUbTlrWlNncElIdGNiaUFnSUNCamIyNXpkQ0J5WlhOMWJIUWdQU0IwYUdsekxsOXBkR1Z5TG5CeVpYWnBiM1Z6VG05a1pTZ3BYRzRnSUNBZ2RHaHBjeTV3YjJsdWRHVnlRbVZtYjNKbFVtVm1aWEpsYm1ObFRtOWtaU0E5SUhSeWRXVmNiaUFnSUNCcFppQW9jbVZ6ZFd4MElEMDlQU0J1ZFd4c0tTQnlaWFIxY200Z2JuVnNiRnh1SUNBZ0lIUm9hWE11Y21WbVpYSmxibU5sVG05a1pTQTlJSEpsYzNWc2RGeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxabVZ5Wlc1alpVNXZaR1ZjYmlBZ2ZWeHVYRzRnSUhSdlUzUnlhVzVuS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUFuVzI5aWFtVmpkQ0JPYjJSbFNYUmxjbUYwYjNKZEoxeHVJQ0I5WEc1OVhHNGlYWDA9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/dom-node-iterator/lib/adapter.js\n");

/***/ }),

/***/ "./node_modules/dom-node-iterator/lib/builtin.js":
/*!*******************************************************!*\
  !*** ./node_modules/dom-node-iterator/lib/builtin.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports[\"default\"] = createNodeIterator;\n\n\nfunction createNodeIterator(root) {\n  var whatToShow = arguments.length <= 1 || arguments[1] === undefined ? 0xFFFFFFFF : arguments[1];\n  var filter = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  var doc = root.ownerDocument;\n  return doc.createNodeIterator.call(doc, root, whatToShow, filter);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9idWlsdGluLmpzIl0sIm5hbWVzIjpbImNyZWF0ZU5vZGVJdGVyYXRvciIsInJvb3QiLCJ3aGF0VG9TaG93IiwiZmlsdGVyIiwiZG9jIiwib3duZXJEb2N1bWVudCIsImNhbGwiXSwibWFwcGluZ3MiOiI7OztxQkFBZUEsa0I7OztBQUdmLFNBQVNBLGtCQUFULENBQTRCQyxJQUE1QixFQUEwRTtBQUFBLE1BQXhDQyxVQUF3Qyx5REFBM0IsVUFBMkI7QUFBQSxNQUFmQyxNQUFlLHlEQUFOLElBQU07O0FBQ3hFLE1BQU1DLE1BQU1ILEtBQUtJLGFBQWpCO0FBQ0EsU0FBT0QsSUFBSUosa0JBQUosQ0FBdUJNLElBQXZCLENBQTRCRixHQUE1QixFQUFpQ0gsSUFBakMsRUFBdUNDLFVBQXZDLEVBQW1EQyxNQUFuRCxDQUFQO0FBQ0QiLCJmaWxlIjoiYnVpbHRpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNyZWF0ZU5vZGVJdGVyYXRvclxuXG5cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVJdGVyYXRvcihyb290LCB3aGF0VG9TaG93ID0gMHhGRkZGRkZGRiwgZmlsdGVyID0gbnVsbCkge1xuICBjb25zdCBkb2MgPSByb290Lm93bmVyRG9jdW1lbnRcbiAgcmV0dXJuIGRvYy5jcmVhdGVOb2RlSXRlcmF0b3IuY2FsbChkb2MsIHJvb3QsIHdoYXRUb1Nob3csIGZpbHRlcilcbn1cbiJdfQ==\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLW5vZGUtaXRlcmF0b3IvbGliL2J1aWx0aW4uanM/YWZhNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2RvbS1ub2RlLWl0ZXJhdG9yL2xpYi9idWlsdGluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGNyZWF0ZU5vZGVJdGVyYXRvcjtcblxuXG5mdW5jdGlvbiBjcmVhdGVOb2RlSXRlcmF0b3Iocm9vdCkge1xuICB2YXIgd2hhdFRvU2hvdyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/IDB4RkZGRkZGRkYgOiBhcmd1bWVudHNbMV07XG4gIHZhciBmaWx0ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyBudWxsIDogYXJndW1lbnRzWzJdO1xuXG4gIHZhciBkb2MgPSByb290Lm93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiBkb2MuY3JlYXRlTm9kZUl0ZXJhdG9yLmNhbGwoZG9jLCByb290LCB3aGF0VG9TaG93LCBmaWx0ZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5aWRXbHNkR2x1TG1weklsMHNJbTVoYldWeklqcGJJbU55WldGMFpVNXZaR1ZKZEdWeVlYUnZjaUlzSW5KdmIzUWlMQ0ozYUdGMFZHOVRhRzkzSWl3aVptbHNkR1Z5SWl3aVpHOWpJaXdpYjNkdVpYSkViMk4xYldWdWRDSXNJbU5oYkd3aVhTd2liV0Z3Y0dsdVozTWlPaUk3T3p0eFFrRkJaVUVzYTBJN096dEJRVWRtTEZOQlFWTkJMR3RDUVVGVUxFTkJRVFJDUXl4SlFVRTFRaXhGUVVFd1JUdEJRVUZCTEUxQlFYaERReXhWUVVGM1F5eDVSRUZCTTBJc1ZVRkJNa0k3UVVGQlFTeE5RVUZtUXl4TlFVRmxMSGxFUVVGT0xFbEJRVTA3TzBGQlEzaEZMRTFCUVUxRExFMUJRVTFJTEV0QlFVdEpMR0ZCUVdwQ08wRkJRMEVzVTBGQlQwUXNTVUZCU1Vvc2EwSkJRVW9zUTBGQmRVSk5MRWxCUVhaQ0xFTkJRVFJDUml4SFFVRTFRaXhGUVVGcFEwZ3NTVUZCYWtNc1JVRkJkVU5ETEZWQlFYWkRMRVZCUVcxRVF5eE5RVUZ1UkN4RFFVRlFPMEZCUTBRaUxDSm1hV3hsSWpvaVluVnBiSFJwYmk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVY0Y0c5eWRDQmtaV1poZFd4MElHTnlaV0YwWlU1dlpHVkpkR1Z5WVhSdmNseHVYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVTV2WkdWSmRHVnlZWFJ2Y2loeWIyOTBMQ0IzYUdGMFZHOVRhRzkzSUQwZ01IaEdSa1pHUmtaR1Jpd2dabWxzZEdWeUlEMGdiblZzYkNrZ2UxeHVJQ0JqYjI1emRDQmtiMk1nUFNCeWIyOTBMbTkzYm1WeVJHOWpkVzFsYm5SY2JpQWdjbVYwZFhKdUlHUnZZeTVqY21WaGRHVk9iMlJsU1hSbGNtRjBiM0l1WTJGc2JDaGtiMk1zSUhKdmIzUXNJSGRvWVhSVWIxTm9iM2NzSUdacGJIUmxjaWxjYm4xY2JpSmRmUT09Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/dom-node-iterator/lib/builtin.js\n");

/***/ }),

/***/ "./node_modules/dom-node-iterator/lib/implementation.js":
/*!**************************************************************!*\
  !*** ./node_modules/dom-node-iterator/lib/implementation.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nexports['default'] = createNodeIterator;\n\n\nfunction createNodeIterator(root) {\n  var whatToShow = arguments.length <= 1 || arguments[1] === undefined ? 0xFFFFFFFF : arguments[1];\n  var filter = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];\n\n  return new NodeIterator(root, whatToShow, filter);\n}\n\nvar NodeIterator = function () {\n  function NodeIterator(root, whatToShow, filter) {\n    _classCallCheck(this, NodeIterator);\n\n    this.root = root;\n    this.whatToShow = whatToShow;\n    this.filter = filter;\n    this.referenceNode = root;\n    this.pointerBeforeReferenceNode = true;\n    this._filter = function (node) {\n      return filter ? filter(node) === 1 : true;\n    };\n    this._show = function (node) {\n      return whatToShow >> node.nodeType - 1 & 1 === 1;\n    };\n  }\n\n  NodeIterator.prototype.nextNode = function nextNode() {\n    var before = this.pointerBeforeReferenceNode;\n    this.pointerBeforeReferenceNode = false;\n\n    var node = this.referenceNode;\n    if (before && this._show(node) && this._filter(node)) return node;\n\n    do {\n      if (node.firstChild) {\n        node = node.firstChild;\n        continue;\n      }\n\n      do {\n        if (node === this.root) return null;\n        if (node.nextSibling) break;\n        node = node.parentNode;\n      } while (node);\n\n      node = node.nextSibling;\n    } while (!this._show(node) || !this._filter(node));\n\n    this.referenceNode = node;\n    this.pointerBeforeReferenceNode = false;\n    return node;\n  };\n\n  NodeIterator.prototype.previousNode = function previousNode() {\n    var before = this.pointerBeforeReferenceNode;\n    this.pointerBeforeReferenceNode = true;\n\n    var node = this.referenceNode;\n    if (!before && this._show(node) && this._filter(node)) return node;\n\n    do {\n      if (node === this.root) return null;\n\n      if (node.previousSibling) {\n        node = node.previousSibling;\n        while (node.lastChild) {\n          node = node.lastChild;\n        }continue;\n      }\n\n      node = node.parentNode;\n    } while (!this._show(node) || !this._filter(node));\n\n    this.referenceNode = node;\n    this.pointerBeforeReferenceNode = true;\n    return node;\n  };\n\n  NodeIterator.prototype.toString = function toString() {\n    return '[object NodeIterator]';\n  };\n\n  return NodeIterator;\n}();\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbXBsZW1lbnRhdGlvbi5qcyJdLCJuYW1lcyI6WyJjcmVhdGVOb2RlSXRlcmF0b3IiLCJyb290Iiwid2hhdFRvU2hvdyIsImZpbHRlciIsIk5vZGVJdGVyYXRvciIsInJlZmVyZW5jZU5vZGUiLCJwb2ludGVyQmVmb3JlUmVmZXJlbmNlTm9kZSIsIl9maWx0ZXIiLCJub2RlIiwiX3Nob3ciLCJub2RlVHlwZSIsIm5leHROb2RlIiwiYmVmb3JlIiwiZmlyc3RDaGlsZCIsIm5leHRTaWJsaW5nIiwicGFyZW50Tm9kZSIsInByZXZpb3VzTm9kZSIsInByZXZpb3VzU2libGluZyIsImxhc3RDaGlsZCIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7cUJBQWVBLGtCOzs7QUFHZixTQUFTQSxrQkFBVCxDQUE0QkMsSUFBNUIsRUFBMEU7QUFBQSxNQUF4Q0MsVUFBd0MseURBQTNCLFVBQTJCO0FBQUEsTUFBZkMsTUFBZSx5REFBTixJQUFNOztBQUN4RSxTQUFPLElBQUlDLFlBQUosQ0FBaUJILElBQWpCLEVBQXVCQyxVQUF2QixFQUFtQ0MsTUFBbkMsQ0FBUDtBQUNEOztJQUdLQyxZO0FBQ0osd0JBQVlILElBQVosRUFBa0JDLFVBQWxCLEVBQThCQyxNQUE5QixFQUFzQztBQUFBOztBQUNwQyxTQUFLRixJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxVQUFMLEdBQWtCQSxVQUFsQjtBQUNBLFNBQUtDLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtFLGFBQUwsR0FBcUJKLElBQXJCO0FBQ0EsU0FBS0ssMEJBQUwsR0FBa0MsSUFBbEM7QUFDQSxTQUFLQyxPQUFMLEdBQWUsVUFBQ0MsSUFBRDtBQUFBLGFBQVVMLFNBQVNBLE9BQU9LLElBQVAsTUFBaUIsQ0FBMUIsR0FBOEIsSUFBeEM7QUFBQSxLQUFmO0FBQ0EsU0FBS0MsS0FBTCxHQUFhLFVBQUNELElBQUQ7QUFBQSxhQUFVTixjQUFjTSxLQUFLRSxRQUFMLEdBQWdCLENBQTlCLEdBQWtDLE1BQU0sQ0FBbEQ7QUFBQSxLQUFiO0FBQ0Q7O3lCQUVEQyxRLHVCQUFXO0FBQ1QsUUFBTUMsU0FBUyxLQUFLTiwwQkFBcEI7QUFDQSxTQUFLQSwwQkFBTCxHQUFrQyxLQUFsQzs7QUFFQSxRQUFJRSxPQUFPLEtBQUtILGFBQWhCO0FBQ0EsUUFBSU8sVUFBVSxLQUFLSCxLQUFMLENBQVdELElBQVgsQ0FBVixJQUE4QixLQUFLRCxPQUFMLENBQWFDLElBQWIsQ0FBbEMsRUFBc0QsT0FBT0EsSUFBUDs7QUFFdEQsT0FBRztBQUNELFVBQUlBLEtBQUtLLFVBQVQsRUFBcUI7QUFDbkJMLGVBQU9BLEtBQUtLLFVBQVo7QUFDQTtBQUNEOztBQUVELFNBQUc7QUFDRCxZQUFJTCxTQUFTLEtBQUtQLElBQWxCLEVBQXdCLE9BQU8sSUFBUDtBQUN4QixZQUFJTyxLQUFLTSxXQUFULEVBQXNCO0FBQ3RCTixlQUFPQSxLQUFLTyxVQUFaO0FBQ0QsT0FKRCxRQUlTUCxJQUpUOztBQU1BQSxhQUFPQSxLQUFLTSxXQUFaO0FBQ0QsS0FiRCxRQWFRLENBQUMsS0FBS0wsS0FBTCxDQUFXRCxJQUFYLENBQUQsSUFBcUIsQ0FBQyxLQUFLRCxPQUFMLENBQWFDLElBQWIsQ0FiOUI7O0FBZUEsU0FBS0gsYUFBTCxHQUFxQkcsSUFBckI7QUFDQSxTQUFLRiwwQkFBTCxHQUFrQyxLQUFsQztBQUNBLFdBQU9FLElBQVA7QUFDRCxHOzt5QkFFRFEsWSwyQkFBZTtBQUNiLFFBQU1KLFNBQVMsS0FBS04sMEJBQXBCO0FBQ0EsU0FBS0EsMEJBQUwsR0FBa0MsSUFBbEM7O0FBRUEsUUFBSUUsT0FBTyxLQUFLSCxhQUFoQjtBQUNBLFFBQUksQ0FBQ08sTUFBRCxJQUFXLEtBQUtILEtBQUwsQ0FBV0QsSUFBWCxDQUFYLElBQStCLEtBQUtELE9BQUwsQ0FBYUMsSUFBYixDQUFuQyxFQUF1RCxPQUFPQSxJQUFQOztBQUV2RCxPQUFHO0FBQ0QsVUFBSUEsU0FBUyxLQUFLUCxJQUFsQixFQUF3QixPQUFPLElBQVA7O0FBRXhCLFVBQUlPLEtBQUtTLGVBQVQsRUFBMEI7QUFDeEJULGVBQU9BLEtBQUtTLGVBQVo7QUFDQSxlQUFPVCxLQUFLVSxTQUFaO0FBQXVCVixpQkFBT0EsS0FBS1UsU0FBWjtBQUF2QixTQUNBO0FBQ0Q7O0FBRURWLGFBQU9BLEtBQUtPLFVBQVo7QUFDRCxLQVZELFFBVVEsQ0FBQyxLQUFLTixLQUFMLENBQVdELElBQVgsQ0FBRCxJQUFxQixDQUFDLEtBQUtELE9BQUwsQ0FBYUMsSUFBYixDQVY5Qjs7QUFZQSxTQUFLSCxhQUFMLEdBQXFCRyxJQUFyQjtBQUNBLFNBQUtGLDBCQUFMLEdBQWtDLElBQWxDO0FBQ0EsV0FBT0UsSUFBUDtBQUNELEc7O3lCQUVEVyxRLHVCQUFXO0FBQ1QsV0FBTyx1QkFBUDtBQUNELEciLCJmaWxlIjoiaW1wbGVtZW50YXRpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjcmVhdGVOb2RlSXRlcmF0b3JcblxuXG5mdW5jdGlvbiBjcmVhdGVOb2RlSXRlcmF0b3Iocm9vdCwgd2hhdFRvU2hvdyA9IDB4RkZGRkZGRkYsIGZpbHRlciA9IG51bGwpIHtcbiAgcmV0dXJuIG5ldyBOb2RlSXRlcmF0b3Iocm9vdCwgd2hhdFRvU2hvdywgZmlsdGVyKVxufVxuXG5cbmNsYXNzIE5vZGVJdGVyYXRvciB7XG4gIGNvbnN0cnVjdG9yKHJvb3QsIHdoYXRUb1Nob3csIGZpbHRlcikge1xuICAgIHRoaXMucm9vdCA9IHJvb3RcbiAgICB0aGlzLndoYXRUb1Nob3cgPSB3aGF0VG9TaG93XG4gICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXJcbiAgICB0aGlzLnJlZmVyZW5jZU5vZGUgPSByb290XG4gICAgdGhpcy5wb2ludGVyQmVmb3JlUmVmZXJlbmNlTm9kZSA9IHRydWVcbiAgICB0aGlzLl9maWx0ZXIgPSAobm9kZSkgPT4gZmlsdGVyID8gZmlsdGVyKG5vZGUpID09PSAxIDogdHJ1ZVxuICAgIHRoaXMuX3Nob3cgPSAobm9kZSkgPT4gd2hhdFRvU2hvdyA+PiBub2RlLm5vZGVUeXBlIC0gMSAmIDEgPT09IDFcbiAgfVxuXG4gIG5leHROb2RlKCkge1xuICAgIGNvbnN0IGJlZm9yZSA9IHRoaXMucG9pbnRlckJlZm9yZVJlZmVyZW5jZU5vZGVcbiAgICB0aGlzLnBvaW50ZXJCZWZvcmVSZWZlcmVuY2VOb2RlID0gZmFsc2VcblxuICAgIGxldCBub2RlID0gdGhpcy5yZWZlcmVuY2VOb2RlXG4gICAgaWYgKGJlZm9yZSAmJiB0aGlzLl9zaG93KG5vZGUpICYmIHRoaXMuX2ZpbHRlcihub2RlKSkgcmV0dXJuIG5vZGVcblxuICAgIGRvIHtcbiAgICAgIGlmIChub2RlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUuZmlyc3RDaGlsZFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChub2RlID09PSB0aGlzLnJvb3QpIHJldHVybiBudWxsXG4gICAgICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSBicmVha1xuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlXG4gICAgICB9IHdoaWxlIChub2RlKVxuXG4gICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZ1xuICAgIH0gd2hpbGUoIXRoaXMuX3Nob3cobm9kZSkgfHwgIXRoaXMuX2ZpbHRlcihub2RlKSlcblxuICAgIHRoaXMucmVmZXJlbmNlTm9kZSA9IG5vZGVcbiAgICB0aGlzLnBvaW50ZXJCZWZvcmVSZWZlcmVuY2VOb2RlID0gZmFsc2VcbiAgICByZXR1cm4gbm9kZVxuICB9XG5cbiAgcHJldmlvdXNOb2RlKCkge1xuICAgIGNvbnN0IGJlZm9yZSA9IHRoaXMucG9pbnRlckJlZm9yZVJlZmVyZW5jZU5vZGVcbiAgICB0aGlzLnBvaW50ZXJCZWZvcmVSZWZlcmVuY2VOb2RlID0gdHJ1ZVxuXG4gICAgbGV0IG5vZGUgPSB0aGlzLnJlZmVyZW5jZU5vZGVcbiAgICBpZiAoIWJlZm9yZSAmJiB0aGlzLl9zaG93KG5vZGUpICYmIHRoaXMuX2ZpbHRlcihub2RlKSkgcmV0dXJuIG5vZGVcblxuICAgIGRvIHtcbiAgICAgIGlmIChub2RlID09PSB0aGlzLnJvb3QpIHJldHVybiBudWxsXG5cbiAgICAgIGlmIChub2RlLnByZXZpb3VzU2libGluZykge1xuICAgICAgICBub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmdcbiAgICAgICAgd2hpbGUgKG5vZGUubGFzdENoaWxkKSBub2RlID0gbm9kZS5sYXN0Q2hpbGRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZVxuICAgIH0gd2hpbGUoIXRoaXMuX3Nob3cobm9kZSkgfHwgIXRoaXMuX2ZpbHRlcihub2RlKSlcblxuICAgIHRoaXMucmVmZXJlbmNlTm9kZSA9IG5vZGVcbiAgICB0aGlzLnBvaW50ZXJCZWZvcmVSZWZlcmVuY2VOb2RlID0gdHJ1ZVxuICAgIHJldHVybiBub2RlXG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgTm9kZUl0ZXJhdG9yXSdcbiAgfVxufVxuIl19\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/dom-node-iterator/lib/implementation.js\n");

/***/ }),

/***/ "./node_modules/dom-node-iterator/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/dom-node-iterator/lib/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _polyfill = __webpack_require__(/*! ./polyfill */ \"./node_modules/dom-node-iterator/lib/polyfill.js\");\n\nvar _polyfill2 = _interopRequireDefault(_polyfill);\n\nvar _implementation = __webpack_require__(/*! ./implementation */ \"./node_modules/dom-node-iterator/lib/implementation.js\");\n\nvar _implementation2 = _interopRequireDefault(_implementation);\n\nvar _shim = __webpack_require__(/*! ./shim */ \"./node_modules/dom-node-iterator/lib/shim.js\");\n\nvar _shim2 = _interopRequireDefault(_shim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar polyfill = (0, _polyfill2['default'])();\npolyfill.implementation = _implementation2['default'];\npolyfill.shim = _shim2['default'];\n\nexports['default'] = polyfill;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwb2x5ZmlsbCIsImltcGxlbWVudGF0aW9uIiwic2hpbSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBTUEsV0FBVyw0QkFBakI7QUFDQUEsU0FBU0MsY0FBVDtBQUNBRCxTQUFTRSxJQUFUOztxQkFFZUYsUSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmF1bHQgYXMgZ2V0UG9seWZpbGwgfSBmcm9tICcuL3BvbHlmaWxsJ1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBpbXBsZW1lbnRhdGlvbiB9IGZyb20gJy4vaW1wbGVtZW50YXRpb24nXG5pbXBvcnQgeyBkZWZhdWx0IGFzIHNoaW0gfSBmcm9tICcuL3NoaW0nXG5cbmNvbnN0IHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKVxucG9seWZpbGwuaW1wbGVtZW50YXRpb24gPSBpbXBsZW1lbnRhdGlvblxucG9seWZpbGwuc2hpbSA9IHNoaW1cblxuZXhwb3J0IGRlZmF1bHQgcG9seWZpbGxcbiJdfQ==\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLW5vZGUtaXRlcmF0b3IvbGliL2luZGV4LmpzP2NhYzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7O0FBRUEsZ0JBQWdCLG1CQUFPLENBQUMsb0VBQVk7O0FBRXBDOztBQUVBLHNCQUFzQixtQkFBTyxDQUFDLGdGQUFrQjs7QUFFaEQ7O0FBRUEsWUFBWSxtQkFBTyxDQUFDLDREQUFROztBQUU1Qjs7QUFFQSxzQ0FBc0MsdUNBQXVDLGtCQUFrQjs7QUFFL0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2RvbS1ub2RlLWl0ZXJhdG9yL2xpYi9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9wb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxudmFyIF9wb2x5ZmlsbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb2x5ZmlsbCk7XG5cbnZhciBfaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBfaW1wbGVtZW50YXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1wbGVtZW50YXRpb24pO1xuXG52YXIgX3NoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIF9zaGltMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoaW0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBwb2x5ZmlsbCA9ICgwLCBfcG9seWZpbGwyWydkZWZhdWx0J10pKCk7XG5wb2x5ZmlsbC5pbXBsZW1lbnRhdGlvbiA9IF9pbXBsZW1lbnRhdGlvbjJbJ2RlZmF1bHQnXTtcbnBvbHlmaWxsLnNoaW0gPSBfc2hpbTJbJ2RlZmF1bHQnXTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gcG9seWZpbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlwYm1SbGVDNXFjeUpkTENKdVlXMWxjeUk2V3lKd2IyeDVabWxzYkNJc0ltbHRjR3hsYldWdWRHRjBhVzl1SWl3aWMyaHBiU0pkTENKdFlYQndhVzVuY3lJNklqczdPenRCUVVGQk96czdPMEZCUTBFN096czdRVUZEUVRzN096czdPMEZCUlVFc1NVRkJUVUVzVjBGQlZ5dzBRa0ZCYWtJN1FVRkRRVUVzVTBGQlUwTXNZMEZCVkR0QlFVTkJSQ3hUUVVGVFJTeEpRVUZVT3p0eFFrRkZaVVlzVVNJc0ltWnBiR1VpT2lKcGJtUmxlQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN0lHUmxabUYxYkhRZ1lYTWdaMlYwVUc5c2VXWnBiR3dnZlNCbWNtOXRJQ2N1TDNCdmJIbG1hV3hzSjF4dWFXMXdiM0owSUhzZ1pHVm1ZWFZzZENCaGN5QnBiWEJzWlcxbGJuUmhkR2x2YmlCOUlHWnliMjBnSnk0dmFXMXdiR1Z0Wlc1MFlYUnBiMjRuWEc1cGJYQnZjblFnZXlCa1pXWmhkV3gwSUdGeklITm9hVzBnZlNCbWNtOXRJQ2N1TDNOb2FXMG5YRzVjYm1OdmJuTjBJSEJ2YkhsbWFXeHNJRDBnWjJWMFVHOXNlV1pwYkd3b0tWeHVjRzlzZVdacGJHd3VhVzF3YkdWdFpXNTBZWFJwYjI0Z1BTQnBiWEJzWlcxbGJuUmhkR2x2Ymx4dWNHOXNlV1pwYkd3dWMyaHBiU0E5SUhOb2FXMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdjRzlzZVdacGJHeGNiaUpkZlE9PSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/dom-node-iterator/lib/index.js\n");

/***/ }),

/***/ "./node_modules/dom-node-iterator/lib/polyfill.js":
/*!********************************************************!*\
  !*** ./node_modules/dom-node-iterator/lib/polyfill.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports['default'] = getPolyfill;\n\nvar _adapter = __webpack_require__(/*! ./adapter */ \"./node_modules/dom-node-iterator/lib/adapter.js\");\n\nvar _adapter2 = _interopRequireDefault(_adapter);\n\nvar _builtin = __webpack_require__(/*! ./builtin */ \"./node_modules/dom-node-iterator/lib/builtin.js\");\n\nvar _builtin2 = _interopRequireDefault(_builtin);\n\nvar _implementation = __webpack_require__(/*! ./implementation */ \"./node_modules/dom-node-iterator/lib/implementation.js\");\n\nvar _implementation2 = _interopRequireDefault(_implementation);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction getPolyfill() {\n  try {\n    var doc = typeof document === 'undefined' ? {} : document;\n    var iter = (0, _builtin2['default'])(doc, 0xFFFFFFFF, null, false);\n    if (iter.referenceNode === doc) return _builtin2['default'];\n    return _adapter2['default'];\n  } catch (_) {\n    return _implementation2['default'];\n  }\n} /*global document*/\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wb2x5ZmlsbC5qcyJdLCJuYW1lcyI6WyJnZXRQb2x5ZmlsbCIsImRvYyIsImRvY3VtZW50IiwiaXRlciIsInJlZmVyZW5jZU5vZGUiLCJfIl0sIm1hcHBpbmdzIjoiOzs7cUJBTXdCQSxXOztBQUx4Qjs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUdlLFNBQVNBLFdBQVQsR0FBdUI7QUFDcEMsTUFBSTtBQUNGLFFBQU1DLE1BQU0sT0FBT0MsUUFBUCxLQUFxQixXQUFyQixHQUFtQyxFQUFuQyxHQUF3Q0EsUUFBcEQ7QUFDQSxRQUFNQyxPQUFPLDBCQUFRRixHQUFSLEVBQWEsVUFBYixFQUF5QixJQUF6QixFQUErQixLQUEvQixDQUFiO0FBQ0EsUUFBSUUsS0FBS0MsYUFBTCxLQUF1QkgsR0FBM0IsRUFBZ0M7QUFDaEM7QUFDRCxHQUxELENBS0UsT0FBT0ksQ0FBUCxFQUFVO0FBQ1Y7QUFDRDtBQUNGLEMsQ0FmRCIsImZpbGUiOiJwb2x5ZmlsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIGRvY3VtZW50Ki9cbmltcG9ydCBhZGFwdGVyIGZyb20gJy4vYWRhcHRlcidcbmltcG9ydCBidWlsdGluIGZyb20gJy4vYnVpbHRpbidcbmltcG9ydCBpbXBsZW1lbnRhdGlvbiBmcm9tICcuL2ltcGxlbWVudGF0aW9uJ1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuICB0cnkge1xuICAgIGNvbnN0IGRvYyA9IHR5cGVvZihkb2N1bWVudCkgPT09ICd1bmRlZmluZWQnID8ge30gOiBkb2N1bWVudFxuICAgIGNvbnN0IGl0ZXIgPSBidWlsdGluKGRvYywgMHhGRkZGRkZGRiwgbnVsbCwgZmFsc2UpXG4gICAgaWYgKGl0ZXIucmVmZXJlbmNlTm9kZSA9PT0gZG9jKSByZXR1cm4gYnVpbHRpblxuICAgIHJldHVybiBhZGFwdGVyXG4gIH0gY2F0Y2ggKF8pIHtcbiAgICByZXR1cm4gaW1wbGVtZW50YXRpb25cbiAgfVxufVxuIl19\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLW5vZGUtaXRlcmF0b3IvbGliL3BvbHlmaWxsLmpzPzk0NWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTs7QUFFQSxlQUFlLG1CQUFPLENBQUMsa0VBQVc7O0FBRWxDOztBQUVBLGVBQWUsbUJBQU8sQ0FBQyxrRUFBVzs7QUFFbEM7O0FBRUEsc0JBQXNCLG1CQUFPLENBQUMsZ0ZBQWtCOztBQUVoRDs7QUFFQSxzQ0FBc0MsdUNBQXVDLGtCQUFrQjs7QUFFL0Y7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLENBQUM7QUFDRCwyQ0FBMkMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZG9tLW5vZGUtaXRlcmF0b3IvbGliL3BvbHlmaWxsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0gZ2V0UG9seWZpbGw7XG5cbnZhciBfYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcicpO1xuXG52YXIgX2FkYXB0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWRhcHRlcik7XG5cbnZhciBfYnVpbHRpbiA9IHJlcXVpcmUoJy4vYnVpbHRpbicpO1xuXG52YXIgX2J1aWx0aW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnVpbHRpbik7XG5cbnZhciBfaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbnZhciBfaW1wbGVtZW50YXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1wbGVtZW50YXRpb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuICB0cnkge1xuICAgIHZhciBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8ge30gOiBkb2N1bWVudDtcbiAgICB2YXIgaXRlciA9ICgwLCBfYnVpbHRpbjJbJ2RlZmF1bHQnXSkoZG9jLCAweEZGRkZGRkZGLCBudWxsLCBmYWxzZSk7XG4gICAgaWYgKGl0ZXIucmVmZXJlbmNlTm9kZSA9PT0gZG9jKSByZXR1cm4gX2J1aWx0aW4yWydkZWZhdWx0J107XG4gICAgcmV0dXJuIF9hZGFwdGVyMlsnZGVmYXVsdCddO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIF9pbXBsZW1lbnRhdGlvbjJbJ2RlZmF1bHQnXTtcbiAgfVxufSAvKmdsb2JhbCBkb2N1bWVudCovXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTl3YjJ4NVptbHNiQzVxY3lKZExDSnVZVzFsY3lJNld5Sm5aWFJRYjJ4NVptbHNiQ0lzSW1Sdll5SXNJbVJ2WTNWdFpXNTBJaXdpYVhSbGNpSXNJbkpsWm1WeVpXNWpaVTV2WkdVaUxDSmZJbDBzSW0xaGNIQnBibWR6SWpvaU96czdjVUpCVFhkQ1FTeFhPenRCUVV4NFFqczdPenRCUVVOQk96czdPMEZCUTBFN096czdPenRCUVVkbExGTkJRVk5CTEZkQlFWUXNSMEZCZFVJN1FVRkRjRU1zVFVGQlNUdEJRVU5HTEZGQlFVMURMRTFCUVUwc1QwRkJUME1zVVVGQlVDeExRVUZ4UWl4WFFVRnlRaXhIUVVGdFF5eEZRVUZ1UXl4SFFVRjNRMEVzVVVGQmNFUTdRVUZEUVN4UlFVRk5ReXhQUVVGUExEQkNRVUZSUml4SFFVRlNMRVZCUVdFc1ZVRkJZaXhGUVVGNVFpeEpRVUY2UWl4RlFVRXJRaXhMUVVFdlFpeERRVUZpTzBGQlEwRXNVVUZCU1VVc1MwRkJTME1zWVVGQlRDeExRVUYxUWtnc1IwRkJNMElzUlVGQlowTTdRVUZEYUVNN1FVRkRSQ3hIUVV4RUxFTkJTMFVzVDBGQlQwa3NRMEZCVUN4RlFVRlZPMEZCUTFZN1FVRkRSRHRCUVVOR0xFTXNRMEZtUkNJc0ltWnBiR1VpT2lKd2IyeDVabWxzYkM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxWjJ4dlltRnNJR1J2WTNWdFpXNTBLaTljYm1sdGNHOXlkQ0JoWkdGd2RHVnlJR1p5YjIwZ0p5NHZZV1JoY0hSbGNpZGNibWx0Y0c5eWRDQmlkV2xzZEdsdUlHWnliMjBnSnk0dlluVnBiSFJwYmlkY2JtbHRjRzl5ZENCcGJYQnNaVzFsYm5SaGRHbHZiaUJtY205dElDY3VMMmx0Y0d4bGJXVnVkR0YwYVc5dUoxeHVYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJR2RsZEZCdmJIbG1hV3hzS0NrZ2UxeHVJQ0IwY25rZ2UxeHVJQ0FnSUdOdmJuTjBJR1J2WXlBOUlIUjVjR1Z2Wmloa2IyTjFiV1Z1ZENrZ1BUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2UzMGdPaUJrYjJOMWJXVnVkRnh1SUNBZ0lHTnZibk4wSUdsMFpYSWdQU0JpZFdsc2RHbHVLR1J2WXl3Z01IaEdSa1pHUmtaR1Jpd2diblZzYkN3Z1ptRnNjMlVwWEc0Z0lDQWdhV1lnS0dsMFpYSXVjbVZtWlhKbGJtTmxUbTlrWlNBOVBUMGdaRzlqS1NCeVpYUjFjbTRnWW5WcGJIUnBibHh1SUNBZ0lISmxkSFZ5YmlCaFpHRndkR1Z5WEc0Z0lIMGdZMkYwWTJnZ0tGOHBJSHRjYmlBZ0lDQnlaWFIxY200Z2FXMXdiR1Z0Wlc1MFlYUnBiMjVjYmlBZ2ZWeHVmVnh1SWwxOSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/dom-node-iterator/lib/polyfill.js\n");

/***/ }),

/***/ "./node_modules/dom-node-iterator/lib/shim.js":
/*!****************************************************!*\
  !*** ./node_modules/dom-node-iterator/lib/shim.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports['default'] = shim;\n\nvar _builtin = __webpack_require__(/*! ./builtin */ \"./node_modules/dom-node-iterator/lib/builtin.js\");\n\nvar _builtin2 = _interopRequireDefault(_builtin);\n\nvar _polyfill = __webpack_require__(/*! ./polyfill */ \"./node_modules/dom-node-iterator/lib/polyfill.js\");\n\nvar _polyfill2 = _interopRequireDefault(_polyfill);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/*global document*/\nfunction shim() {\n  var doc = typeof document === 'undefined' ? {} : document;\n  var polyfill = (0, _polyfill2['default'])();\n  if (polyfill !== _builtin2['default']) doc.createNodeIterator = polyfill;\n  return polyfill;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zaGltLmpzIl0sIm5hbWVzIjpbInNoaW0iLCJkb2MiLCJkb2N1bWVudCIsInBvbHlmaWxsIiwiY3JlYXRlTm9kZUl0ZXJhdG9yIl0sIm1hcHBpbmdzIjoiOzs7cUJBS3dCQSxJOztBQUp4Qjs7OztBQUNBOzs7Ozs7QUFGQTtBQUtlLFNBQVNBLElBQVQsR0FBZ0I7QUFDN0IsTUFBTUMsTUFBTSxPQUFPQyxRQUFQLEtBQXFCLFdBQXJCLEdBQW1DLEVBQW5DLEdBQXdDQSxRQUFwRDtBQUNBLE1BQU1DLFdBQVcsNEJBQWpCO0FBQ0EsTUFBSUEsaUNBQUosRUFBMEJGLElBQUlHLGtCQUFKLEdBQXlCRCxRQUF6QjtBQUMxQixTQUFPQSxRQUFQO0FBQ0QiLCJmaWxlIjoic2hpbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIGRvY3VtZW50Ki9cbmltcG9ydCBidWlsdGluIGZyb20gJy4vYnVpbHRpbidcbmltcG9ydCBnZXRQb2x5ZmlsbCBmcm9tICcuL3BvbHlmaWxsJ1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoaW0oKSB7XG4gIGNvbnN0IGRvYyA9IHR5cGVvZihkb2N1bWVudCkgPT09ICd1bmRlZmluZWQnID8ge30gOiBkb2N1bWVudFxuICBjb25zdCBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKClcbiAgaWYgKHBvbHlmaWxsICE9PSBidWlsdGluKSBkb2MuY3JlYXRlTm9kZUl0ZXJhdG9yID0gcG9seWZpbGxcbiAgcmV0dXJuIHBvbHlmaWxsXG59XG4iXX0=\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLW5vZGUtaXRlcmF0b3IvbGliL3NoaW0uanM/ODFiZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBOztBQUVBLGVBQWUsbUJBQU8sQ0FBQyxrRUFBVzs7QUFFbEM7O0FBRUEsZ0JBQWdCLG1CQUFPLENBQUMsb0VBQVk7O0FBRXBDOztBQUVBLHNDQUFzQyx1Q0FBdUMsa0JBQWtCOztBQUUvRjtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2RvbS1ub2RlLWl0ZXJhdG9yL2xpYi9zaGltLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0gc2hpbTtcblxudmFyIF9idWlsdGluID0gcmVxdWlyZSgnLi9idWlsdGluJyk7XG5cbnZhciBfYnVpbHRpbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9idWlsdGluKTtcblxudmFyIF9wb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxudmFyIF9wb2x5ZmlsbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb2x5ZmlsbCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLypnbG9iYWwgZG9jdW1lbnQqL1xuZnVuY3Rpb24gc2hpbSgpIHtcbiAgdmFyIGRvYyA9IHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcgPyB7fSA6IGRvY3VtZW50O1xuICB2YXIgcG9seWZpbGwgPSAoMCwgX3BvbHlmaWxsMlsnZGVmYXVsdCddKSgpO1xuICBpZiAocG9seWZpbGwgIT09IF9idWlsdGluMlsnZGVmYXVsdCddKSBkb2MuY3JlYXRlTm9kZUl0ZXJhdG9yID0gcG9seWZpbGw7XG4gIHJldHVybiBwb2x5ZmlsbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OXphR2x0TG1weklsMHNJbTVoYldWeklqcGJJbk5vYVcwaUxDSmtiMk1pTENKa2IyTjFiV1Z1ZENJc0luQnZiSGxtYVd4c0lpd2lZM0psWVhSbFRtOWtaVWwwWlhKaGRHOXlJbDBzSW0xaGNIQnBibWR6SWpvaU96czdjVUpCUzNkQ1FTeEpPenRCUVVwNFFqczdPenRCUVVOQk96czdPenM3UVVGR1FUdEJRVXRsTEZOQlFWTkJMRWxCUVZRc1IwRkJaMEk3UVVGRE4wSXNUVUZCVFVNc1RVRkJUU3hQUVVGUFF5eFJRVUZRTEV0QlFYRkNMRmRCUVhKQ0xFZEJRVzFETEVWQlFXNURMRWRCUVhkRFFTeFJRVUZ3UkR0QlFVTkJMRTFCUVUxRExGZEJRVmNzTkVKQlFXcENPMEZCUTBFc1RVRkJTVUVzYVVOQlFVb3NSVUZCTUVKR0xFbEJRVWxITEd0Q1FVRktMRWRCUVhsQ1JDeFJRVUY2UWp0QlFVTXhRaXhUUVVGUFFTeFJRVUZRTzBGQlEwUWlMQ0ptYVd4bElqb2ljMmhwYlM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxWjJ4dlltRnNJR1J2WTNWdFpXNTBLaTljYm1sdGNHOXlkQ0JpZFdsc2RHbHVJR1p5YjIwZ0p5NHZZblZwYkhScGJpZGNibWx0Y0c5eWRDQm5aWFJRYjJ4NVptbHNiQ0JtY205dElDY3VMM0J2YkhsbWFXeHNKMXh1WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUhOb2FXMG9LU0I3WEc0Z0lHTnZibk4wSUdSdll5QTlJSFI1Y0dWdlppaGtiMk4xYldWdWRDa2dQVDA5SUNkMWJtUmxabWx1WldRbklEOGdlMzBnT2lCa2IyTjFiV1Z1ZEZ4dUlDQmpiMjV6ZENCd2IyeDVabWxzYkNBOUlHZGxkRkJ2YkhsbWFXeHNLQ2xjYmlBZ2FXWWdLSEJ2YkhsbWFXeHNJQ0U5UFNCaWRXbHNkR2x1S1NCa2IyTXVZM0psWVhSbFRtOWtaVWwwWlhKaGRHOXlJRDBnY0c5c2VXWnBiR3hjYmlBZ2NtVjBkWEp1SUhCdmJIbG1hV3hzWEc1OVhHNGlYWDA9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/dom-node-iterator/lib/shim.js\n");

/***/ }),

/***/ "./node_modules/dom-node-iterator/polyfill.js":
/*!****************************************************!*\
  !*** ./node_modules/dom-node-iterator/polyfill.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/polyfill */ \"./node_modules/dom-node-iterator/lib/polyfill.js\")['default'];\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLW5vZGUtaXRlcmF0b3IvcG9seWZpbGwuanM/YWQyNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyx3RUFBZ0IiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZG9tLW5vZGUtaXRlcmF0b3IvcG9seWZpbGwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL3BvbHlmaWxsJylbJ2RlZmF1bHQnXTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/dom-node-iterator/polyfill.js\n");

/***/ }),

/***/ "./node_modules/dom-node-iterator/shim.js":
/*!************************************************!*\
  !*** ./node_modules/dom-node-iterator/shim.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/shim */ \"./node_modules/dom-node-iterator/lib/shim.js\")['default'];\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLW5vZGUtaXRlcmF0b3Ivc2hpbS5qcz9iMGZhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLGdFQUFZIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2RvbS1ub2RlLWl0ZXJhdG9yL3NoaW0uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL3NoaW0nKVsnZGVmYXVsdCddO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/dom-node-iterator/shim.js\n");

/***/ }),

/***/ "./node_modules/dom-seek/index.js":
/*!****************************************!*\
  !*** ./node_modules/dom-seek/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib */ \"./node_modules/dom-seek/lib/index.js\")['default'];\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLXNlZWsvaW5kZXguanM/N2QwZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyxtREFBTyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kb20tc2Vlay9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWInKVsnZGVmYXVsdCddO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/dom-seek/index.js\n");

/***/ }),

/***/ "./node_modules/dom-seek/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/dom-seek/lib/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = seek;\nvar E_END = 'Iterator exhausted before seek ended.';\nvar E_SHOW = 'Argument 1 of seek must use filter NodeFilter.SHOW_TEXT.';\nvar E_WHERE = 'Argument 2 of seek must be an integer or a Text Node.';\nvar DOCUMENT_POSITION_PRECEDING = 2;\nvar SHOW_TEXT = 4;\nvar TEXT_NODE = 3;\n\nfunction seek(iter, where) {\n  if (iter.whatToShow !== SHOW_TEXT) {\n    var error; // istanbul ignore next\n\n    try {\n      error = new DOMException(E_SHOW, 'InvalidStateError');\n    } catch (_unused) {\n      error = new Error(E_SHOW);\n      error.code = 11;\n      error.name = 'InvalidStateError';\n\n      error.toString = function () {\n        return \"InvalidStateError: \".concat(E_SHOW);\n      };\n    }\n\n    throw error;\n  }\n\n  var count = 0;\n  var node = iter.referenceNode;\n  var predicates = null;\n\n  if (isInteger(where)) {\n    predicates = {\n      forward: function forward() {\n        return count < where;\n      },\n      backward: function backward() {\n        return count > where || !iter.pointerBeforeReferenceNode;\n      }\n    };\n  } else if (isText(where)) {\n    var forward = before(node, where) ? function () {\n      return false;\n    } : function () {\n      return node !== where;\n    };\n\n    var backward = function backward() {\n      return node !== where || !iter.pointerBeforeReferenceNode;\n    };\n\n    predicates = {\n      forward: forward,\n      backward: backward\n    };\n  } else {\n    throw new TypeError(E_WHERE);\n  }\n\n  while (predicates.forward()) {\n    node = iter.nextNode();\n\n    if (node === null) {\n      throw new RangeError(E_END);\n    }\n\n    count += node.nodeValue.length;\n  }\n\n  if (iter.nextNode()) {\n    node = iter.previousNode();\n  }\n\n  while (predicates.backward()) {\n    node = iter.previousNode();\n\n    if (node === null) {\n      throw new RangeError(E_END);\n    }\n\n    count -= node.nodeValue.length;\n  }\n\n  if (!isText(iter.referenceNode)) {\n    throw new RangeError(E_END);\n  }\n\n  return count;\n}\n\nfunction isInteger(n) {\n  if (typeof n !== 'number') return false;\n  return isFinite(n) && Math.floor(n) === n;\n}\n\nfunction isText(node) {\n  return node.nodeType === TEXT_NODE;\n}\n\nfunction before(ref, node) {\n  return ref.compareDocumentPosition(node) & DOCUMENT_POSITION_PRECEDING;\n}\n//# sourceMappingURL=index.js.map\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLXNlZWsvbGliL2luZGV4LmpzP2IzYTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZG9tLXNlZWsvbGliL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHNlZWs7XG52YXIgRV9FTkQgPSAnSXRlcmF0b3IgZXhoYXVzdGVkIGJlZm9yZSBzZWVrIGVuZGVkLic7XG52YXIgRV9TSE9XID0gJ0FyZ3VtZW50IDEgb2Ygc2VlayBtdXN0IHVzZSBmaWx0ZXIgTm9kZUZpbHRlci5TSE9XX1RFWFQuJztcbnZhciBFX1dIRVJFID0gJ0FyZ3VtZW50IDIgb2Ygc2VlayBtdXN0IGJlIGFuIGludGVnZXIgb3IgYSBUZXh0IE5vZGUuJztcbnZhciBET0NVTUVOVF9QT1NJVElPTl9QUkVDRURJTkcgPSAyO1xudmFyIFNIT1dfVEVYVCA9IDQ7XG52YXIgVEVYVF9OT0RFID0gMztcblxuZnVuY3Rpb24gc2VlayhpdGVyLCB3aGVyZSkge1xuICBpZiAoaXRlci53aGF0VG9TaG93ICE9PSBTSE9XX1RFWFQpIHtcbiAgICB2YXIgZXJyb3I7IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbiAgICB0cnkge1xuICAgICAgZXJyb3IgPSBuZXcgRE9NRXhjZXB0aW9uKEVfU0hPVywgJ0ludmFsaWRTdGF0ZUVycm9yJyk7XG4gICAgfSBjYXRjaCAoX3VudXNlZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoRV9TSE9XKTtcbiAgICAgIGVycm9yLmNvZGUgPSAxMTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YWxpZFN0YXRlRXJyb3InO1xuXG4gICAgICBlcnJvci50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwiSW52YWxpZFN0YXRlRXJyb3I6IFwiLmNvbmNhdChFX1NIT1cpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIHZhciBjb3VudCA9IDA7XG4gIHZhciBub2RlID0gaXRlci5yZWZlcmVuY2VOb2RlO1xuICB2YXIgcHJlZGljYXRlcyA9IG51bGw7XG5cbiAgaWYgKGlzSW50ZWdlcih3aGVyZSkpIHtcbiAgICBwcmVkaWNhdGVzID0ge1xuICAgICAgZm9yd2FyZDogZnVuY3Rpb24gZm9yd2FyZCgpIHtcbiAgICAgICAgcmV0dXJuIGNvdW50IDwgd2hlcmU7XG4gICAgICB9LFxuICAgICAgYmFja3dhcmQ6IGZ1bmN0aW9uIGJhY2t3YXJkKCkge1xuICAgICAgICByZXR1cm4gY291bnQgPiB3aGVyZSB8fCAhaXRlci5wb2ludGVyQmVmb3JlUmVmZXJlbmNlTm9kZTtcbiAgICAgIH1cbiAgICB9O1xuICB9IGVsc2UgaWYgKGlzVGV4dCh3aGVyZSkpIHtcbiAgICB2YXIgZm9yd2FyZCA9IGJlZm9yZShub2RlLCB3aGVyZSkgPyBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub2RlICE9PSB3aGVyZTtcbiAgICB9O1xuXG4gICAgdmFyIGJhY2t3YXJkID0gZnVuY3Rpb24gYmFja3dhcmQoKSB7XG4gICAgICByZXR1cm4gbm9kZSAhPT0gd2hlcmUgfHwgIWl0ZXIucG9pbnRlckJlZm9yZVJlZmVyZW5jZU5vZGU7XG4gICAgfTtcblxuICAgIHByZWRpY2F0ZXMgPSB7XG4gICAgICBmb3J3YXJkOiBmb3J3YXJkLFxuICAgICAgYmFja3dhcmQ6IGJhY2t3YXJkXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVfV0hFUkUpO1xuICB9XG5cbiAgd2hpbGUgKHByZWRpY2F0ZXMuZm9yd2FyZCgpKSB7XG4gICAgbm9kZSA9IGl0ZXIubmV4dE5vZGUoKTtcblxuICAgIGlmIChub2RlID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihFX0VORCk7XG4gICAgfVxuXG4gICAgY291bnQgKz0gbm9kZS5ub2RlVmFsdWUubGVuZ3RoO1xuICB9XG5cbiAgaWYgKGl0ZXIubmV4dE5vZGUoKSkge1xuICAgIG5vZGUgPSBpdGVyLnByZXZpb3VzTm9kZSgpO1xuICB9XG5cbiAgd2hpbGUgKHByZWRpY2F0ZXMuYmFja3dhcmQoKSkge1xuICAgIG5vZGUgPSBpdGVyLnByZXZpb3VzTm9kZSgpO1xuXG4gICAgaWYgKG5vZGUgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKEVfRU5EKTtcbiAgICB9XG5cbiAgICBjb3VudCAtPSBub2RlLm5vZGVWYWx1ZS5sZW5ndGg7XG4gIH1cblxuICBpZiAoIWlzVGV4dChpdGVyLnJlZmVyZW5jZU5vZGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoRV9FTkQpO1xuICB9XG5cbiAgcmV0dXJuIGNvdW50O1xufVxuXG5mdW5jdGlvbiBpc0ludGVnZXIobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBpc0Zpbml0ZShuKSAmJiBNYXRoLmZsb29yKG4pID09PSBuO1xufVxuXG5mdW5jdGlvbiBpc1RleHQobm9kZSkge1xuICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFO1xufVxuXG5mdW5jdGlvbiBiZWZvcmUocmVmLCBub2RlKSB7XG4gIHJldHVybiByZWYuY29tcGFyZURvY3VtZW50UG9zaXRpb24obm9kZSkgJiBET0NVTUVOVF9QT1NJVElPTl9QUkVDRURJTkc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/dom-seek/lib/index.js\n");

/***/ }),

/***/ "./node_modules/elasticlunr/elasticlunr.js":
/*!*************************************************!*\
  !*** ./node_modules/elasticlunr/elasticlunr.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * elasticlunr - http://weixsong.github.io\n * Lightweight full-text search engine in Javascript for browser search and offline search. - 0.9.5\n *\n * Copyright (C) 2016 Oliver Nightingale\n * Copyright (C) 2016 Wei Song\n * MIT Licensed\n * @license\n */\n\n(function(){\n\n/*!\n * elasticlunr.js\n * Copyright (C) 2016 Oliver Nightingale\n * Copyright (C) 2016 Wei Song\n */\n\n/**\n * Convenience function for instantiating a new elasticlunr index and configuring it\n * with the default pipeline functions and the passed config function.\n *\n * When using this convenience function a new index will be created with the\n * following functions already in the pipeline:\n * \n * 1. elasticlunr.trimmer - trim non-word character\n * 2. elasticlunr.StopWordFilter - filters out any stop words before they enter the\n * index\n * 3. elasticlunr.stemmer - stems the tokens before entering the index.\n *\n *\n * Example:\n *\n *     var idx = elasticlunr(function () {\n *       this.addField('id');\n *       this.addField('title');\n *       this.addField('body');\n *       \n *       //this.setRef('id'); // default ref is 'id'\n *\n *       this.pipeline.add(function () {\n *         // some custom pipeline function\n *       });\n *     });\n * \n *    idx.addDoc({\n *      id: 1, \n *      title: 'Oracle released database 12g',\n *      body: 'Yestaday, Oracle has released their latest database, named 12g, more robust. this product will increase Oracle profit.'\n *    });\n * \n *    idx.addDoc({\n *      id: 2, \n *      title: 'Oracle released annual profit report',\n *      body: 'Yestaday, Oracle has released their annual profit report of 2015, total profit is 12.5 Billion.'\n *    });\n * \n *    # simple search\n *    idx.search('oracle database');\n * \n *    # search with query-time boosting\n *    idx.search('oracle database', {fields: {title: {boost: 2}, body: {boost: 1}}});\n *\n * @param {Function} config A function that will be called with the new instance\n * of the elasticlunr.Index as both its context and first parameter. It can be used to\n * customize the instance of new elasticlunr.Index.\n * @namespace\n * @module\n * @return {elasticlunr.Index}\n *\n */\nvar elasticlunr = function (config) {\n  var idx = new elasticlunr.Index;\n\n  idx.pipeline.add(\n    elasticlunr.trimmer,\n    elasticlunr.stopWordFilter,\n    elasticlunr.stemmer\n  );\n\n  if (config) config.call(idx, idx);\n\n  return idx;\n};\n\nelasticlunr.version = \"0.9.5\";\n\n// only used this to make elasticlunr.js compatible with lunr-languages\n// this is a trick to define a global alias of elasticlunr\nlunr = elasticlunr;\n\n/*!\n * elasticlunr.utils\n * Copyright (C) 2016 Oliver Nightingale\n * Copyright (C) 2016 Wei Song\n */\n\n/**\n * A namespace containing utils for the rest of the elasticlunr library\n */\nelasticlunr.utils = {};\n\n/**\n * Print a warning message to the console.\n *\n * @param {String} message The message to be printed.\n * @memberOf Utils\n */\nelasticlunr.utils.warn = (function (global) {\n  return function (message) {\n    if (global.console && console.warn) {\n      console.warn(message);\n    }\n  };\n})(this);\n\n/**\n * Convert an object to string.\n *\n * In the case of `null` and `undefined` the function returns\n * an empty string, in all other cases the result of calling\n * `toString` on the passed object is returned.\n *\n * @param {object} obj The object to convert to a string.\n * @return {String} string representation of the passed object.\n * @memberOf Utils\n */\nelasticlunr.utils.toString = function (obj) {\n  if (obj === void 0 || obj === null) {\n    return \"\";\n  }\n\n  return obj.toString();\n};\n/*!\n * elasticlunr.EventEmitter\n * Copyright (C) 2016 Oliver Nightingale\n * Copyright (C) 2016 Wei Song\n */\n\n/**\n * elasticlunr.EventEmitter is an event emitter for elasticlunr.\n * It manages adding and removing event handlers and triggering events and their handlers.\n *\n * Each event could has multiple corresponding functions,\n * these functions will be called as the sequence that they are added into the event.\n * \n * @constructor\n */\nelasticlunr.EventEmitter = function () {\n  this.events = {};\n};\n\n/**\n * Binds a handler function to a specific event(s).\n *\n * Can bind a single function to many different events in one call.\n *\n * @param {String} [eventName] The name(s) of events to bind this function to.\n * @param {Function} fn The function to call when an event is fired.\n * @memberOf EventEmitter\n */\nelasticlunr.EventEmitter.prototype.addListener = function () {\n  var args = Array.prototype.slice.call(arguments),\n      fn = args.pop(),\n      names = args;\n\n  if (typeof fn !== \"function\") throw new TypeError (\"last argument must be a function\");\n\n  names.forEach(function (name) {\n    if (!this.hasHandler(name)) this.events[name] = [];\n    this.events[name].push(fn);\n  }, this);\n};\n\n/**\n * Removes a handler function from a specific event.\n *\n * @param {String} eventName The name of the event to remove this function from.\n * @param {Function} fn The function to remove from an event.\n * @memberOf EventEmitter\n */\nelasticlunr.EventEmitter.prototype.removeListener = function (name, fn) {\n  if (!this.hasHandler(name)) return;\n\n  var fnIndex = this.events[name].indexOf(fn);\n  if (fnIndex === -1) return;\n\n  this.events[name].splice(fnIndex, 1);\n\n  if (this.events[name].length == 0) delete this.events[name];\n};\n\n/**\n * Call all functions that bounded to the given event.\n *\n * Additional data can be passed to the event handler as arguments to `emit`\n * after the event name.\n *\n * @param {String} eventName The name of the event to emit.\n * @memberOf EventEmitter\n */\nelasticlunr.EventEmitter.prototype.emit = function (name) {\n  if (!this.hasHandler(name)) return;\n\n  var args = Array.prototype.slice.call(arguments, 1);\n\n  this.events[name].forEach(function (fn) {\n    fn.apply(undefined, args);\n  }, this);\n};\n\n/**\n * Checks whether a handler has ever been stored against an event.\n *\n * @param {String} eventName The name of the event to check.\n * @private\n * @memberOf EventEmitter\n */\nelasticlunr.EventEmitter.prototype.hasHandler = function (name) {\n  return name in this.events;\n};\n/*!\n * elasticlunr.tokenizer\n * Copyright (C) 2016 Oliver Nightingale\n * Copyright (C) 2016 Wei Song\n */\n\n/**\n * A function for splitting a string into tokens.\n * Currently English is supported as default.\n * Uses `elasticlunr.tokenizer.seperator` to split strings, you could change\n * the value of this property to set how you want strings are split into tokens.\n * IMPORTANT: use elasticlunr.tokenizer.seperator carefully, if you are not familiar with\n * text process, then you'd better not change it.\n *\n * @module\n * @param {String} str The string that you want to tokenize.\n * @see elasticlunr.tokenizer.seperator\n * @return {Array}\n */\nelasticlunr.tokenizer = function (str) {\n  if (!arguments.length || str === null || str === undefined) return [];\n  if (Array.isArray(str)) {\n    var arr = str.filter(function(token) {\n      if (token === null || token === undefined) {\n        return false;\n      }\n\n      return true;\n    });\n\n    arr = arr.map(function (t) {\n      return elasticlunr.utils.toString(t).toLowerCase();\n    });\n\n    var out = [];\n    arr.forEach(function(item) {\n      var tokens = item.split(elasticlunr.tokenizer.seperator);\n      out = out.concat(tokens);\n    }, this);\n\n    return out;\n  }\n\n  return str.toString().trim().toLowerCase().split(elasticlunr.tokenizer.seperator);\n};\n\n/**\n * Default string seperator.\n */\nelasticlunr.tokenizer.defaultSeperator = /[\\s\\-]+/;\n\n/**\n * The sperator used to split a string into tokens. Override this property to change the behaviour of\n * `elasticlunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n *\n * @static\n * @see elasticlunr.tokenizer\n */\nelasticlunr.tokenizer.seperator = elasticlunr.tokenizer.defaultSeperator;\n\n/**\n * Set up customized string seperator\n *\n * @param {Object} sep The customized seperator that you want to use to tokenize a string.\n */\nelasticlunr.tokenizer.setSeperator = function(sep) {\n    if (sep !== null && sep !== undefined && typeof(sep) === 'object') {\n        elasticlunr.tokenizer.seperator = sep;\n    }\n}\n\n/**\n * Reset string seperator\n *\n */\nelasticlunr.tokenizer.resetSeperator = function() {\n    elasticlunr.tokenizer.seperator = elasticlunr.tokenizer.defaultSeperator;\n}\n\n/**\n * Get string seperator\n *\n */\nelasticlunr.tokenizer.getSeperator = function() {\n    return elasticlunr.tokenizer.seperator;\n}\n/*!\n * elasticlunr.Pipeline\n * Copyright (C) 2016 Oliver Nightingale\n * Copyright (C) 2016 Wei Song\n */\n\n/**\n * elasticlunr.Pipelines maintain an ordered list of functions to be applied to \n * both documents tokens and query tokens.\n *\n * An instance of elasticlunr.Index will contain a pipeline\n * with a trimmer, a stop word filter, an English stemmer. Extra\n * functions can be added before or after either of these functions or these\n * default functions can be removed.\n *\n * When run the pipeline, it will call each function in turn.\n *\n * The output of the functions in the pipeline will be passed to the next function\n * in the pipeline. To exclude a token from entering the index the function\n * should return undefined, the rest of the pipeline will not be called with\n * this token.\n *\n * For serialisation of pipelines to work, all functions used in an instance of\n * a pipeline should be registered with elasticlunr.Pipeline. Registered functions can\n * then be loaded. If trying to load a serialised pipeline that uses functions\n * that are not registered an error will be thrown.\n *\n * If not planning on serialising the pipeline then registering pipeline functions\n * is not necessary.\n *\n * @constructor\n */\nelasticlunr.Pipeline = function () {\n  this._queue = [];\n};\n\nelasticlunr.Pipeline.registeredFunctions = {};\n\n/**\n * Register a function in the pipeline.\n *\n * Functions that are used in the pipeline should be registered if the pipeline\n * needs to be serialised, or a serialised pipeline needs to be loaded.\n *\n * Registering a function does not add it to a pipeline, functions must still be\n * added to instances of the pipeline for them to be used when running a pipeline.\n *\n * @param {Function} fn The function to register.\n * @param {String} label The label to register this function with\n * @memberOf Pipeline\n */\nelasticlunr.Pipeline.registerFunction = function (fn, label) {\n  if (label in elasticlunr.Pipeline.registeredFunctions) {\n    elasticlunr.utils.warn('Overwriting existing registered function: ' + label);\n  }\n\n  fn.label = label;\n  elasticlunr.Pipeline.registeredFunctions[label] = fn;\n};\n\n/**\n * Get a registered function in the pipeline.\n *\n * @param {String} label The label of registered function.\n * @return {Function}\n * @memberOf Pipeline\n */\nelasticlunr.Pipeline.getRegisteredFunction = function (label) {\n  if ((label in elasticlunr.Pipeline.registeredFunctions) !== true) {\n    return null;\n  }\n\n  return elasticlunr.Pipeline.registeredFunctions[label];\n};\n\n/**\n * Warns if the function is not registered as a Pipeline function.\n *\n * @param {Function} fn The function to check for.\n * @private\n * @memberOf Pipeline\n */\nelasticlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions);\n\n  if (!isRegistered) {\n    elasticlunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn);\n  }\n};\n\n/**\n * Loads a previously serialised pipeline.\n *\n * All functions to be loaded must already be registered with elasticlunr.Pipeline.\n * If any function from the serialised data has not been registered then an\n * error will be thrown.\n *\n * @param {Object} serialised The serialised pipeline to load.\n * @return {elasticlunr.Pipeline}\n * @memberOf Pipeline\n */\nelasticlunr.Pipeline.load = function (serialised) {\n  var pipeline = new elasticlunr.Pipeline;\n\n  serialised.forEach(function (fnName) {\n    var fn = elasticlunr.Pipeline.getRegisteredFunction(fnName);\n\n    if (fn) {\n      pipeline.add(fn);\n    } else {\n      throw new Error('Cannot load un-registered function: ' + fnName);\n    }\n  });\n\n  return pipeline;\n};\n\n/**\n * Adds new functions to the end of the pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {Function} functions Any number of functions to add to the pipeline.\n * @memberOf Pipeline\n */\nelasticlunr.Pipeline.prototype.add = function () {\n  var fns = Array.prototype.slice.call(arguments);\n\n  fns.forEach(function (fn) {\n    elasticlunr.Pipeline.warnIfFunctionNotRegistered(fn);\n    this._queue.push(fn);\n  }, this);\n};\n\n/**\n * Adds a single function after a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n * If existingFn is not found, throw an Exception.\n *\n * @param {Function} existingFn A function that already exists in the pipeline.\n * @param {Function} newFn The new function to add to the pipeline.\n * @memberOf Pipeline\n */\nelasticlunr.Pipeline.prototype.after = function (existingFn, newFn) {\n  elasticlunr.Pipeline.warnIfFunctionNotRegistered(newFn);\n\n  var pos = this._queue.indexOf(existingFn);\n  if (pos === -1) {\n    throw new Error('Cannot find existingFn');\n  }\n\n  this._queue.splice(pos + 1, 0, newFn);\n};\n\n/**\n * Adds a single function before a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n * If existingFn is not found, throw an Exception.\n *\n * @param {Function} existingFn A function that already exists in the pipeline.\n * @param {Function} newFn The new function to add to the pipeline.\n * @memberOf Pipeline\n */\nelasticlunr.Pipeline.prototype.before = function (existingFn, newFn) {\n  elasticlunr.Pipeline.warnIfFunctionNotRegistered(newFn);\n\n  var pos = this._queue.indexOf(existingFn);\n  if (pos === -1) {\n    throw new Error('Cannot find existingFn');\n  }\n\n  this._queue.splice(pos, 0, newFn);\n};\n\n/**\n * Removes a function from the pipeline.\n *\n * @param {Function} fn The function to remove from the pipeline.\n * @memberOf Pipeline\n */\nelasticlunr.Pipeline.prototype.remove = function (fn) {\n  var pos = this._queue.indexOf(fn);\n  if (pos === -1) {\n    return;\n  }\n\n  this._queue.splice(pos, 1);\n};\n\n/**\n * Runs the current list of functions that registered in the pipeline against the\n * input tokens.\n *\n * @param {Array} tokens The tokens to run through the pipeline.\n * @return {Array}\n * @memberOf Pipeline\n */\nelasticlunr.Pipeline.prototype.run = function (tokens) {\n  var out = [],\n      tokenLength = tokens.length,\n      pipelineLength = this._queue.length;\n\n  for (var i = 0; i < tokenLength; i++) {\n    var token = tokens[i];\n\n    for (var j = 0; j < pipelineLength; j++) {\n      token = this._queue[j](token, i, tokens);\n      if (token === void 0 || token === null) break;\n    };\n\n    if (token !== void 0 && token !== null) out.push(token);\n  };\n\n  return out;\n};\n\n/**\n * Resets the pipeline by removing any existing processors.\n *\n * @memberOf Pipeline\n */\nelasticlunr.Pipeline.prototype.reset = function () {\n  this._queue = [];\n};\n\n /**\n  * Get the pipeline if user want to check the pipeline.\n  *\n  * @memberOf Pipeline\n  */\n elasticlunr.Pipeline.prototype.get = function () {\n   return this._queue;\n };\n\n/**\n * Returns a representation of the pipeline ready for serialisation.\n * Only serialize pipeline function's name. Not storing function, so when\n * loading the archived JSON index file, corresponding pipeline function is \n * added by registered function of elasticlunr.Pipeline.registeredFunctions\n *\n * Logs a warning if the function has not been registered.\n *\n * @return {Array}\n * @memberOf Pipeline\n */\nelasticlunr.Pipeline.prototype.toJSON = function () {\n  return this._queue.map(function (fn) {\n    elasticlunr.Pipeline.warnIfFunctionNotRegistered(fn);\n    return fn.label;\n  });\n};\n/*!\n * elasticlunr.Index\n * Copyright (C) 2016 Oliver Nightingale\n * Copyright (C) 2016 Wei Song\n */\n\n/**\n * elasticlunr.Index is object that manages a search index.  It contains the indexes\n * and stores all the tokens and document lookups.  It also provides the main\n * user facing API for the library.\n *\n * @constructor\n */\nelasticlunr.Index = function () {\n  this._fields = [];\n  this._ref = 'id';\n  this.pipeline = new elasticlunr.Pipeline;\n  this.documentStore = new elasticlunr.DocumentStore;\n  this.index = {};\n  this.eventEmitter = new elasticlunr.EventEmitter;\n  this._idfCache = {};\n\n  this.on('add', 'remove', 'update', (function () {\n    this._idfCache = {};\n  }).bind(this));\n};\n\n/**\n * Bind a handler to events being emitted by the index.\n *\n * The handler can be bound to many events at the same time.\n *\n * @param {String} [eventName] The name(s) of events to bind the function to.\n * @param {Function} fn The serialised set to load.\n * @memberOf Index\n */\nelasticlunr.Index.prototype.on = function () {\n  var args = Array.prototype.slice.call(arguments);\n  return this.eventEmitter.addListener.apply(this.eventEmitter, args);\n};\n\n/**\n * Removes a handler from an event being emitted by the index.\n *\n * @param {String} eventName The name of events to remove the function from.\n * @param {Function} fn The serialised set to load.\n * @memberOf Index\n */\nelasticlunr.Index.prototype.off = function (name, fn) {\n  return this.eventEmitter.removeListener(name, fn);\n};\n\n/**\n * Loads a previously serialised index.\n *\n * Issues a warning if the index being imported was serialised\n * by a different version of elasticlunr.\n *\n * @param {Object} serialisedData The serialised set to load.\n * @return {elasticlunr.Index}\n * @memberOf Index\n */\nelasticlunr.Index.load = function (serialisedData) {\n  if (serialisedData.version !== elasticlunr.version) {\n    elasticlunr.utils.warn('version mismatch: current '\n                    + elasticlunr.version + ' importing ' + serialisedData.version);\n  }\n\n  var idx = new this;\n\n  idx._fields = serialisedData.fields;\n  idx._ref = serialisedData.ref;\n  idx.documentStore = elasticlunr.DocumentStore.load(serialisedData.documentStore);\n  idx.pipeline = elasticlunr.Pipeline.load(serialisedData.pipeline);\n  idx.index = {};\n  for (var field in serialisedData.index) {\n    idx.index[field] = elasticlunr.InvertedIndex.load(serialisedData.index[field]);\n  }\n\n  return idx;\n};\n\n/**\n * Adds a field to the list of fields that will be searchable within documents in the index.\n *\n * Remember that inner index is build based on field, which means each field has one inverted index.\n *\n * Fields should be added before any documents are added to the index, fields\n * that are added after documents are added to the index will only apply to new\n * documents added to the index.\n *\n * @param {String} fieldName The name of the field within the document that should be indexed\n * @return {elasticlunr.Index}\n * @memberOf Index\n */\nelasticlunr.Index.prototype.addField = function (fieldName) {\n  this._fields.push(fieldName);\n  this.index[fieldName] = new elasticlunr.InvertedIndex;\n  return this;\n};\n\n/**\n * Sets the property used to uniquely identify documents added to the index,\n * by default this property is 'id'.\n *\n * This should only be changed before adding documents to the index, changing\n * the ref property without resetting the index can lead to unexpected results.\n *\n * @param {String} refName The property to use to uniquely identify the\n * documents in the index.\n * @param {Boolean} emitEvent Whether to emit add events, defaults to true\n * @return {elasticlunr.Index}\n * @memberOf Index\n */\nelasticlunr.Index.prototype.setRef = function (refName) {\n  this._ref = refName;\n  return this;\n};\n\n/**\n *\n * Set if the JSON format original documents are save into elasticlunr.DocumentStore\n *\n * Defaultly save all the original JSON documents.\n *\n * @param {Boolean} save Whether to save the original JSON documents.\n * @return {elasticlunr.Index}\n * @memberOf Index\n */\nelasticlunr.Index.prototype.saveDocument = function (save) {\n  this.documentStore = new elasticlunr.DocumentStore(save);\n  return this;\n};\n\n/**\n * Add a JSON format document to the index.\n *\n * This is the way new documents enter the index, this function will run the\n * fields from the document through the index's pipeline and then add it to\n * the index, it will then show up in search results.\n *\n * An 'add' event is emitted with the document that has been added and the index\n * the document has been added to. This event can be silenced by passing false\n * as the second argument to add.\n *\n * @param {Object} doc The JSON format document to add to the index.\n * @param {Boolean} emitEvent Whether or not to emit events, default true.\n * @memberOf Index\n */\nelasticlunr.Index.prototype.addDoc = function (doc, emitEvent) {\n  if (!doc) return;\n  var emitEvent = emitEvent === undefined ? true : emitEvent;\n\n  var docRef = doc[this._ref];\n\n  this.documentStore.addDoc(docRef, doc);\n  this._fields.forEach(function (field) {\n    var fieldTokens = this.pipeline.run(elasticlunr.tokenizer(doc[field]));\n    this.documentStore.addFieldLength(docRef, field, fieldTokens.length);\n\n    var tokenCount = {};\n    fieldTokens.forEach(function (token) {\n      if (token in tokenCount) tokenCount[token] += 1;\n      else tokenCount[token] = 1;\n    }, this);\n\n    for (var token in tokenCount) {\n      var termFrequency = tokenCount[token];\n      termFrequency = Math.sqrt(termFrequency);\n      this.index[field].addToken(token, { ref: docRef, tf: termFrequency });\n    }\n  }, this);\n\n  if (emitEvent) this.eventEmitter.emit('add', doc, this);\n};\n\n/**\n * Removes a document from the index by doc ref.\n *\n * To make sure documents no longer show up in search results they can be\n * removed from the index using this method.\n *\n * A 'remove' event is emitted with the document that has been removed and the index\n * the document has been removed from. This event can be silenced by passing false\n * as the second argument to remove.\n *\n * If user setting DocumentStore not storing the documents, then remove doc by docRef is not allowed.\n *\n * @param {String|Integer} docRef The document ref to remove from the index.\n * @param {Boolean} emitEvent Whether to emit remove events, defaults to true\n * @memberOf Index\n */\nelasticlunr.Index.prototype.removeDocByRef = function (docRef, emitEvent) {\n  if (!docRef) return;\n  if (this.documentStore.isDocStored() === false) {\n    return;\n  }\n\n  if (!this.documentStore.hasDoc(docRef)) return;\n  var doc = this.documentStore.getDoc(docRef);\n  this.removeDoc(doc, false);\n};\n\n/**\n * Removes a document from the index.\n * This remove operation could work even the original doc is not store in the DocumentStore.\n *\n * To make sure documents no longer show up in search results they can be\n * removed from the index using this method.\n *\n * A 'remove' event is emitted with the document that has been removed and the index\n * the document has been removed from. This event can be silenced by passing false\n * as the second argument to remove.\n *\n *\n * @param {Object} doc The document ref to remove from the index.\n * @param {Boolean} emitEvent Whether to emit remove events, defaults to true\n * @memberOf Index\n */\nelasticlunr.Index.prototype.removeDoc = function (doc, emitEvent) {\n  if (!doc) return;\n\n  var emitEvent = emitEvent === undefined ? true : emitEvent;\n\n  var docRef = doc[this._ref];\n  if (!this.documentStore.hasDoc(docRef)) return;\n\n  this.documentStore.removeDoc(docRef);\n\n  this._fields.forEach(function (field) {\n    var fieldTokens = this.pipeline.run(elasticlunr.tokenizer(doc[field]));\n    fieldTokens.forEach(function (token) {\n      this.index[field].removeToken(token, docRef);\n    }, this);\n  }, this);\n\n  if (emitEvent) this.eventEmitter.emit('remove', doc, this);\n};\n\n/**\n * Updates a document in the index.\n *\n * When a document contained within the index gets updated, fields changed,\n * added or removed, to make sure it correctly matched against search queries,\n * it should be updated in the index.\n *\n * This method is just a wrapper around `remove` and `add`\n *\n * An 'update' event is emitted with the document that has been updated and the index.\n * This event can be silenced by passing false as the second argument to update. Only\n * an update event will be fired, the 'add' and 'remove' events of the underlying calls\n * are silenced.\n *\n * @param {Object} doc The document to update in the index.\n * @param {Boolean} emitEvent Whether to emit update events, defaults to true\n * @see Index.prototype.remove\n * @see Index.prototype.add\n * @memberOf Index\n */\nelasticlunr.Index.prototype.updateDoc = function (doc, emitEvent) {\n  var emitEvent = emitEvent === undefined ? true : emitEvent;\n\n  this.removeDocByRef(doc[this._ref], false);\n  this.addDoc(doc, false);\n\n  if (emitEvent) this.eventEmitter.emit('update', doc, this);\n};\n\n/**\n * Calculates the inverse document frequency for a token within the index of a field.\n *\n * @param {String} token The token to calculate the idf of.\n * @param {String} field The field to compute idf.\n * @see Index.prototype.idf\n * @private\n * @memberOf Index\n */\nelasticlunr.Index.prototype.idf = function (term, field) {\n  var cacheKey = \"@\" + field + '/' + term;\n  if (Object.prototype.hasOwnProperty.call(this._idfCache, cacheKey)) return this._idfCache[cacheKey];\n\n  var df = this.index[field].getDocFreq(term);\n  var idf = 1 + Math.log(this.documentStore.length / (df + 1));\n  this._idfCache[cacheKey] = idf;\n\n  return idf;\n};\n\n/**\n * get fields of current index instance\n *\n * @return {Array}\n */\nelasticlunr.Index.prototype.getFields = function () {\n  return this._fields.slice();\n};\n\n/**\n * Searches the index using the passed query.\n * Queries should be a string, multiple words are allowed.\n *\n * If config is null, will search all fields defaultly, and lead to OR based query.\n * If config is specified, will search specified with query time boosting.\n *\n * All query tokens are passed through the same pipeline that document tokens\n * are passed through, so any language processing involved will be run on every\n * query term.\n *\n * Each query term is expanded, so that the term 'he' might be expanded to\n * 'hello' and 'help' if those terms were already included in the index.\n *\n * Matching documents are returned as an array of objects, each object contains\n * the matching document ref, as set for this index, and the similarity score\n * for this document against the query.\n *\n * @param {String} query The query to search the index with.\n * @param {JSON} userConfig The user query config, JSON format.\n * @return {Object}\n * @see Index.prototype.idf\n * @see Index.prototype.documentVector\n * @memberOf Index\n */\nelasticlunr.Index.prototype.search = function (query, userConfig) {\n  if (!query) return [];\n\n  var configStr = null;\n  if (userConfig != null) {\n    configStr = JSON.stringify(userConfig);\n  }\n\n  var config = new elasticlunr.Configuration(configStr, this.getFields()).get();\n\n  var queryTokens = this.pipeline.run(elasticlunr.tokenizer(query));\n\n  var queryResults = {};\n\n  for (var field in config) {\n    var fieldSearchResults = this.fieldSearch(queryTokens, field, config);\n    var fieldBoost = config[field].boost;\n\n    for (var docRef in fieldSearchResults) {\n      fieldSearchResults[docRef] = fieldSearchResults[docRef] * fieldBoost;\n    }\n\n    for (var docRef in fieldSearchResults) {\n      if (docRef in queryResults) {\n        queryResults[docRef] += fieldSearchResults[docRef];\n      } else {\n        queryResults[docRef] = fieldSearchResults[docRef];\n      }\n    }\n  }\n\n  var results = [];\n  for (var docRef in queryResults) {\n    results.push({ref: docRef, score: queryResults[docRef]});\n  }\n\n  results.sort(function (a, b) { return b.score - a.score; });\n  return results;\n};\n\n/**\n * search queryTokens in specified field.\n *\n * @param {Array} queryTokens The query tokens to query in this field.\n * @param {String} field Field to query in.\n * @param {elasticlunr.Configuration} config The user query config, JSON format.\n * @return {Object}\n */\nelasticlunr.Index.prototype.fieldSearch = function (queryTokens, fieldName, config) {\n  var booleanType = config[fieldName].bool;\n  var expand = config[fieldName].expand;\n  var boost = config[fieldName].boost;\n  var scores = null;\n  var docTokens = {};\n\n  // Do nothing if the boost is 0\n  if (boost === 0) {\n    return;\n  }\n\n  queryTokens.forEach(function (token) {\n    var tokens = [token];\n    if (expand == true) {\n      tokens = this.index[fieldName].expandToken(token);\n    }\n    // Consider every query token in turn. If expanded, each query token\n    // corresponds to a set of tokens, which is all tokens in the \n    // index matching the pattern queryToken* .\n    // For the set of tokens corresponding to a query token, find and score\n    // all matching documents. Store those scores in queryTokenScores, \n    // keyed by docRef.\n    // Then, depending on the value of booleanType, combine the scores\n    // for this query token with previous scores.  If booleanType is OR,\n    // then merge the scores by summing into the accumulated total, adding\n    // new document scores are required (effectively a union operator). \n    // If booleanType is AND, accumulate scores only if the document \n    // has previously been scored by another query token (an intersection\n    // operation0. \n    // Furthermore, since when booleanType is AND, additional \n    // query tokens can't add new documents to the result set, use the\n    // current document set to limit the processing of each new query \n    // token for efficiency (i.e., incremental intersection).\n    \n    var queryTokenScores = {};\n    tokens.forEach(function (key) {\n      var docs = this.index[fieldName].getDocs(key);\n      var idf = this.idf(key, fieldName);\n      \n      if (scores && booleanType == 'AND') {\n          // special case, we can rule out documents that have been\n          // already been filtered out because they weren't scored\n          // by previous query token passes.\n          var filteredDocs = {};\n          for (var docRef in scores) {\n              if (docRef in docs) {\n                  filteredDocs[docRef] = docs[docRef];\n              }\n          }\n          docs = filteredDocs;\n      }\n      // only record appeared token for retrieved documents for the\n      // original token, not for expaned token.\n      // beause for doing coordNorm for a retrieved document, coordNorm only care how many\n      // query token appear in that document.\n      // so expanded token should not be added into docTokens, if added, this will pollute the\n      // coordNorm\n      if (key == token) {\n        this.fieldSearchStats(docTokens, key, docs);\n      }\n\n      for (var docRef in docs) {\n        var tf = this.index[fieldName].getTermFrequency(key, docRef);\n        var fieldLength = this.documentStore.getFieldLength(docRef, fieldName);\n        var fieldLengthNorm = 1;\n        if (fieldLength != 0) {\n          fieldLengthNorm = 1 / Math.sqrt(fieldLength);\n        }\n\n        var penality = 1;\n        if (key != token) {\n          // currently I'm not sure if this penality is enough,\n          // need to do verification\n          penality = (1 - (key.length - token.length) / key.length) * 0.15;\n        }\n\n        var score = tf * idf * fieldLengthNorm * penality;\n\n        if (docRef in queryTokenScores) {\n          queryTokenScores[docRef] += score;\n        } else {\n          queryTokenScores[docRef] = score;\n        }\n      }\n    }, this);\n    \n    scores = this.mergeScores(scores, queryTokenScores, booleanType);\n  }, this);\n\n  scores = this.coordNorm(scores, docTokens, queryTokens.length);\n  return scores;\n};\n\n/**\n * Merge the scores from one set of tokens into an accumulated score table.\n * Exact operation depends on the op parameter. If op is 'AND', then only the\n * intersection of the two score lists is retained. Otherwise, the union of\n * the two score lists is returned. For internal use only.\n *\n * @param {Object} bool accumulated scores. Should be null on first call.\n * @param {String} scores new scores to merge into accumScores.\n * @param {Object} op merge operation (should be 'AND' or 'OR').\n *\n */\n\nelasticlunr.Index.prototype.mergeScores = function (accumScores, scores, op) {\n    if (!accumScores) {\n        return scores; \n    }\n    if (op == 'AND') {\n        var intersection = {};\n        for (var docRef in scores) {\n            if (docRef in accumScores) {\n                intersection[docRef] = accumScores[docRef] + scores[docRef];\n            }\n        }\n        return intersection;\n    } else {\n        for (var docRef in scores) {\n            if (docRef in accumScores) {\n                accumScores[docRef] += scores[docRef];\n            } else {\n                accumScores[docRef] = scores[docRef];\n            }\n        }\n        return accumScores;\n    }\n};\n\n\n/**\n * Record the occuring query token of retrieved doc specified by doc field.\n * Only for inner user.\n *\n * @param {Object} docTokens a data structure stores which token appears in the retrieved doc.\n * @param {String} token query token\n * @param {Object} docs the retrieved documents of the query token\n *\n */\nelasticlunr.Index.prototype.fieldSearchStats = function (docTokens, token, docs) {\n  for (var doc in docs) {\n    if (doc in docTokens) {\n      docTokens[doc].push(token);\n    } else {\n      docTokens[doc] = [token];\n    }\n  }\n};\n\n/**\n * coord norm the score of a doc.\n * if a doc contain more query tokens, then the score will larger than the doc\n * contains less query tokens.\n *\n * only for inner use.\n *\n * @param {Object} results first results\n * @param {Object} docs field search results of a token\n * @param {Integer} n query token number\n * @return {Object}\n */\nelasticlunr.Index.prototype.coordNorm = function (scores, docTokens, n) {\n  for (var doc in scores) {\n    if (!(doc in docTokens)) continue;\n    var tokens = docTokens[doc].length;\n    scores[doc] = scores[doc] * tokens / n;\n  }\n\n  return scores;\n};\n\n/**\n * Returns a representation of the index ready for serialisation.\n *\n * @return {Object}\n * @memberOf Index\n */\nelasticlunr.Index.prototype.toJSON = function () {\n  var indexJson = {};\n  this._fields.forEach(function (field) {\n    indexJson[field] = this.index[field].toJSON();\n  }, this);\n\n  return {\n    version: elasticlunr.version,\n    fields: this._fields,\n    ref: this._ref,\n    documentStore: this.documentStore.toJSON(),\n    index: indexJson,\n    pipeline: this.pipeline.toJSON()\n  };\n};\n\n/**\n * Applies a plugin to the current index.\n *\n * A plugin is a function that is called with the index as its context.\n * Plugins can be used to customise or extend the behaviour the index\n * in some way. A plugin is just a function, that encapsulated the custom\n * behaviour that should be applied to the index.\n *\n * The plugin function will be called with the index as its argument, additional\n * arguments can also be passed when calling use. The function will be called\n * with the index as its context.\n *\n * Example:\n *\n *     var myPlugin = function (idx, arg1, arg2) {\n *       // `this` is the index to be extended\n *       // apply any extensions etc here.\n *     }\n *\n *     var idx = elasticlunr(function () {\n *       this.use(myPlugin, 'arg1', 'arg2')\n *     })\n *\n * @param {Function} plugin The plugin to apply.\n * @memberOf Index\n */\nelasticlunr.Index.prototype.use = function (plugin) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  args.unshift(this);\n  plugin.apply(this, args);\n};\n/*!\n * elasticlunr.DocumentStore\n * Copyright (C) 2016 Wei Song\n */\n\n/**\n * elasticlunr.DocumentStore is a simple key-value document store used for storing sets of tokens for\n * documents stored in index.\n *\n * elasticlunr.DocumentStore store original JSON format documents that you could build search snippet by this original JSON document.\n *\n * user could choose whether original JSON format document should be store, if no configuration then document will be stored defaultly.\n * If user care more about the index size, user could select not store JSON documents, then this will has some defects, such as user\n * could not use JSON document to generate snippets of search results.\n *\n * @param {Boolean} save If the original JSON document should be stored.\n * @constructor\n * @module\n */\nelasticlunr.DocumentStore = function (save) {\n  if (save === null || save === undefined) {\n    this._save = true;\n  } else {\n    this._save = save;\n  }\n\n  this.docs = {};\n  this.docInfo = {};\n  this.length = 0;\n};\n\n/**\n * Loads a previously serialised document store\n *\n * @param {Object} serialisedData The serialised document store to load.\n * @return {elasticlunr.DocumentStore}\n */\nelasticlunr.DocumentStore.load = function (serialisedData) {\n  var store = new this;\n\n  store.length = serialisedData.length;\n  store.docs = serialisedData.docs;\n  store.docInfo = serialisedData.docInfo;\n  store._save = serialisedData.save;\n\n  return store;\n};\n\n/**\n * check if current instance store the original doc\n *\n * @return {Boolean}\n */\nelasticlunr.DocumentStore.prototype.isDocStored = function () {\n  return this._save;\n};\n\n/**\n * Stores the given doc in the document store against the given id.\n * If docRef already exist, then update doc.\n *\n * Document is store by original JSON format, then you could use original document to generate search snippets.\n *\n * @param {Integer|String} docRef The key used to store the JSON format doc.\n * @param {Object} doc The JSON format doc.\n */\nelasticlunr.DocumentStore.prototype.addDoc = function (docRef, doc) {\n  if (!this.hasDoc(docRef)) this.length++;\n\n  if (this._save === true) {\n    this.docs[docRef] = clone(doc);\n  } else {\n    this.docs[docRef] = null;\n  }\n};\n\n/**\n * Retrieves the JSON doc from the document store for a given key.\n *\n * If docRef not found, return null.\n * If user set not storing the documents, return null.\n *\n * @param {Integer|String} docRef The key to lookup and retrieve from the document store.\n * @return {Object}\n * @memberOf DocumentStore\n */\nelasticlunr.DocumentStore.prototype.getDoc = function (docRef) {\n  if (this.hasDoc(docRef) === false) return null;\n  return this.docs[docRef];\n};\n\n/**\n * Checks whether the document store contains a key (docRef).\n *\n * @param {Integer|String} docRef The id to look up in the document store.\n * @return {Boolean}\n * @memberOf DocumentStore\n */\nelasticlunr.DocumentStore.prototype.hasDoc = function (docRef) {\n  return docRef in this.docs;\n};\n\n/**\n * Removes the value for a key in the document store.\n *\n * @param {Integer|String} docRef The id to remove from the document store.\n * @memberOf DocumentStore\n */\nelasticlunr.DocumentStore.prototype.removeDoc = function (docRef) {\n  if (!this.hasDoc(docRef)) return;\n\n  delete this.docs[docRef];\n  delete this.docInfo[docRef];\n  this.length--;\n};\n\n/**\n * Add field length of a document's field tokens from pipeline results.\n * The field length of a document is used to do field length normalization even without the original JSON document stored.\n *\n * @param {Integer|String} docRef document's id or reference\n * @param {String} fieldName field name\n * @param {Integer} length field length\n */\nelasticlunr.DocumentStore.prototype.addFieldLength = function (docRef, fieldName, length) {\n  if (docRef === null || docRef === undefined) return;\n  if (this.hasDoc(docRef) == false) return;\n\n  if (!this.docInfo[docRef]) this.docInfo[docRef] = {};\n  this.docInfo[docRef][fieldName] = length;\n};\n\n/**\n * Update field length of a document's field tokens from pipeline results.\n * The field length of a document is used to do field length normalization even without the original JSON document stored.\n *\n * @param {Integer|String} docRef document's id or reference\n * @param {String} fieldName field name\n * @param {Integer} length field length\n */\nelasticlunr.DocumentStore.prototype.updateFieldLength = function (docRef, fieldName, length) {\n  if (docRef === null || docRef === undefined) return;\n  if (this.hasDoc(docRef) == false) return;\n\n  this.addFieldLength(docRef, fieldName, length);\n};\n\n/**\n * get field length of a document by docRef\n *\n * @param {Integer|String} docRef document id or reference\n * @param {String} fieldName field name\n * @return {Integer} field length\n */\nelasticlunr.DocumentStore.prototype.getFieldLength = function (docRef, fieldName) {\n  if (docRef === null || docRef === undefined) return 0;\n\n  if (!(docRef in this.docs)) return 0;\n  if (!(fieldName in this.docInfo[docRef])) return 0;\n  return this.docInfo[docRef][fieldName];\n};\n\n/**\n * Returns a JSON representation of the document store used for serialisation.\n *\n * @return {Object} JSON format\n * @memberOf DocumentStore\n */\nelasticlunr.DocumentStore.prototype.toJSON = function () {\n  return {\n    docs: this.docs,\n    docInfo: this.docInfo,\n    length: this.length,\n    save: this._save\n  };\n};\n\n/**\n * Cloning object\n *\n * @param {Object} object in JSON format\n * @return {Object} copied object\n */\nfunction clone(obj) {\n  if (null === obj || \"object\" !== typeof obj) return obj;\n\n  var copy = obj.constructor();\n\n  for (var attr in obj) {\n    if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n  }\n\n  return copy;\n}\n/*!\n * elasticlunr.stemmer\n * Copyright (C) 2016 Oliver Nightingale\n * Copyright (C) 2016 Wei Song\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * elasticlunr.stemmer is an english language stemmer, this is a JavaScript\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n *\n * @module\n * @param {String} str The string to stem\n * @return {String}\n * @see elasticlunr.Pipeline\n */\nelasticlunr.stemmer = (function(){\n  var step2list = {\n      \"ational\" : \"ate\",\n      \"tional\" : \"tion\",\n      \"enci\" : \"ence\",\n      \"anci\" : \"ance\",\n      \"izer\" : \"ize\",\n      \"bli\" : \"ble\",\n      \"alli\" : \"al\",\n      \"entli\" : \"ent\",\n      \"eli\" : \"e\",\n      \"ousli\" : \"ous\",\n      \"ization\" : \"ize\",\n      \"ation\" : \"ate\",\n      \"ator\" : \"ate\",\n      \"alism\" : \"al\",\n      \"iveness\" : \"ive\",\n      \"fulness\" : \"ful\",\n      \"ousness\" : \"ous\",\n      \"aliti\" : \"al\",\n      \"iviti\" : \"ive\",\n      \"biliti\" : \"ble\",\n      \"logi\" : \"log\"\n    },\n\n    step3list = {\n      \"icate\" : \"ic\",\n      \"ative\" : \"\",\n      \"alize\" : \"al\",\n      \"iciti\" : \"ic\",\n      \"ical\" : \"ic\",\n      \"ful\" : \"\",\n      \"ness\" : \"\"\n    },\n\n    c = \"[^aeiou]\",          // consonant\n    v = \"[aeiouy]\",          // vowel\n    C = c + \"[^aeiouy]*\",    // consonant sequence\n    V = v + \"[aeiou]*\",      // vowel sequence\n\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\n\n  var re_mgr0 = new RegExp(mgr0);\n  var re_mgr1 = new RegExp(mgr1);\n  var re_meq1 = new RegExp(meq1);\n  var re_s_v = new RegExp(s_v);\n\n  var re_1a = /^(.+?)(ss|i)es$/;\n  var re2_1a = /^(.+?)([^s])s$/;\n  var re_1b = /^(.+?)eed$/;\n  var re2_1b = /^(.+?)(ed|ing)$/;\n  var re_1b_2 = /.$/;\n  var re2_1b_2 = /(at|bl|iz)$/;\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var re_1c = /^(.+?[^aeiou])y$/;\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\n\n  var re_5 = /^(.+?)e$/;\n  var re_5_1 = /ll$/;\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var porterStemmer = function porterStemmer(w) {\n    var   stem,\n      suffix,\n      firstch,\n      re,\n      re2,\n      re3,\n      re4;\n\n    if (w.length < 3) { return w; }\n\n    firstch = w.substr(0,1);\n    if (firstch == \"y\") {\n      w = firstch.toUpperCase() + w.substr(1);\n    }\n\n    // Step 1a\n    re = re_1a\n    re2 = re2_1a;\n\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\n\n    // Step 1b\n    re = re_1b;\n    re2 = re2_1b;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      re = re_mgr0;\n      if (re.test(fp[1])) {\n        re = re_1b_2;\n        w = w.replace(re,\"\");\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1];\n      re2 = re_s_v;\n      if (re2.test(stem)) {\n        w = stem;\n        re2 = re2_1b_2;\n        re3 = re3_1b_2;\n        re4 = re4_1b_2;\n        if (re2.test(w)) {  w = w + \"e\"; }\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\n        else if (re4.test(w)) { w = w + \"e\"; }\n      }\n    }\n\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n    re = re_1c;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      w = stem + \"i\";\n    }\n\n    // Step 2\n    re = re_2;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step2list[suffix];\n      }\n    }\n\n    // Step 3\n    re = re_3;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step3list[suffix];\n      }\n    }\n\n    // Step 4\n    re = re_4;\n    re2 = re2_4;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      if (re.test(stem)) {\n        w = stem;\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1] + fp[2];\n      re2 = re_mgr1;\n      if (re2.test(stem)) {\n        w = stem;\n      }\n    }\n\n    // Step 5\n    re = re_5;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      re2 = re_meq1;\n      re3 = re3_5;\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\n        w = stem;\n      }\n    }\n\n    re = re_5_1;\n    re2 = re_mgr1;\n    if (re.test(w) && re2.test(w)) {\n      re = re_1b_2;\n      w = w.replace(re,\"\");\n    }\n\n    // and turn initial Y back to y\n\n    if (firstch == \"y\") {\n      w = firstch.toLowerCase() + w.substr(1);\n    }\n\n    return w;\n  };\n\n  return porterStemmer;\n})();\n\nelasticlunr.Pipeline.registerFunction(elasticlunr.stemmer, 'stemmer');\n/*!\n * elasticlunr.stopWordFilter\n * Copyright (C) 2016 Oliver Nightingale\n * Copyright (C) 2016 Wei Song\n */\n\n/**\n * elasticlunr.stopWordFilter is an English language stop words filter, any words\n * contained in the stop word list will not be passed through the filter.\n *\n * This is intended to be used in the Pipeline. If the token does not pass the\n * filter then undefined will be returned.\n * Currently this StopwordFilter using dictionary to do O(1) time complexity stop word filtering.\n *\n * @module\n * @param {String} token The token to pass through the filter\n * @return {String}\n * @see elasticlunr.Pipeline\n */\nelasticlunr.stopWordFilter = function (token) {\n  if (token && elasticlunr.stopWordFilter.stopWords[token] !== true) {\n    return token;\n  }\n};\n\n/**\n * Remove predefined stop words\n * if user want to use customized stop words, user could use this function to delete\n * all predefined stopwords.\n *\n * @return {null}\n */\nelasticlunr.clearStopWords = function () {\n  elasticlunr.stopWordFilter.stopWords = {};\n};\n\n/**\n * Add customized stop words\n * user could use this function to add customized stop words\n * \n * @params {Array} words customized stop words\n * @return {null}\n */\nelasticlunr.addStopWords = function (words) {\n  if (words == null || Array.isArray(words) === false) return;\n\n  words.forEach(function (word) {\n    elasticlunr.stopWordFilter.stopWords[word] = true;\n  }, this);\n};\n\n/**\n * Reset to default stop words\n * user could use this function to restore default stop words\n *\n * @return {null}\n */\nelasticlunr.resetStopWords = function () {\n  elasticlunr.stopWordFilter.stopWords = elasticlunr.defaultStopWords;\n};\n\nelasticlunr.defaultStopWords = {\n  \"\": true,\n  \"a\": true,\n  \"able\": true,\n  \"about\": true,\n  \"across\": true,\n  \"after\": true,\n  \"all\": true,\n  \"almost\": true,\n  \"also\": true,\n  \"am\": true,\n  \"among\": true,\n  \"an\": true,\n  \"and\": true,\n  \"any\": true,\n  \"are\": true,\n  \"as\": true,\n  \"at\": true,\n  \"be\": true,\n  \"because\": true,\n  \"been\": true,\n  \"but\": true,\n  \"by\": true,\n  \"can\": true,\n  \"cannot\": true,\n  \"could\": true,\n  \"dear\": true,\n  \"did\": true,\n  \"do\": true,\n  \"does\": true,\n  \"either\": true,\n  \"else\": true,\n  \"ever\": true,\n  \"every\": true,\n  \"for\": true,\n  \"from\": true,\n  \"get\": true,\n  \"got\": true,\n  \"had\": true,\n  \"has\": true,\n  \"have\": true,\n  \"he\": true,\n  \"her\": true,\n  \"hers\": true,\n  \"him\": true,\n  \"his\": true,\n  \"how\": true,\n  \"however\": true,\n  \"i\": true,\n  \"if\": true,\n  \"in\": true,\n  \"into\": true,\n  \"is\": true,\n  \"it\": true,\n  \"its\": true,\n  \"just\": true,\n  \"least\": true,\n  \"let\": true,\n  \"like\": true,\n  \"likely\": true,\n  \"may\": true,\n  \"me\": true,\n  \"might\": true,\n  \"most\": true,\n  \"must\": true,\n  \"my\": true,\n  \"neither\": true,\n  \"no\": true,\n  \"nor\": true,\n  \"not\": true,\n  \"of\": true,\n  \"off\": true,\n  \"often\": true,\n  \"on\": true,\n  \"only\": true,\n  \"or\": true,\n  \"other\": true,\n  \"our\": true,\n  \"own\": true,\n  \"rather\": true,\n  \"said\": true,\n  \"say\": true,\n  \"says\": true,\n  \"she\": true,\n  \"should\": true,\n  \"since\": true,\n  \"so\": true,\n  \"some\": true,\n  \"than\": true,\n  \"that\": true,\n  \"the\": true,\n  \"their\": true,\n  \"them\": true,\n  \"then\": true,\n  \"there\": true,\n  \"these\": true,\n  \"they\": true,\n  \"this\": true,\n  \"tis\": true,\n  \"to\": true,\n  \"too\": true,\n  \"twas\": true,\n  \"us\": true,\n  \"wants\": true,\n  \"was\": true,\n  \"we\": true,\n  \"were\": true,\n  \"what\": true,\n  \"when\": true,\n  \"where\": true,\n  \"which\": true,\n  \"while\": true,\n  \"who\": true,\n  \"whom\": true,\n  \"why\": true,\n  \"will\": true,\n  \"with\": true,\n  \"would\": true,\n  \"yet\": true,\n  \"you\": true,\n  \"your\": true\n};\n\nelasticlunr.stopWordFilter.stopWords = elasticlunr.defaultStopWords;\n\nelasticlunr.Pipeline.registerFunction(elasticlunr.stopWordFilter, 'stopWordFilter');\n/*!\n * elasticlunr.trimmer\n * Copyright (C) 2016 Oliver Nightingale\n * Copyright (C) 2016 Wei Song\n */\n\n/**\n * elasticlunr.trimmer is a pipeline function for trimming non word\n * characters from the begining and end of tokens before they\n * enter the index.\n *\n * This implementation may not work correctly for non latin\n * characters and should either be removed or adapted for use\n * with languages with non-latin characters.\n *\n * @module\n * @param {String} token The token to pass through the filter\n * @return {String}\n * @see elasticlunr.Pipeline\n */\nelasticlunr.trimmer = function (token) {\n  if (token === null || token === undefined) {\n    throw new Error('token should not be undefined');\n  }\n\n  return token\n    .replace(/^\\W+/, '')\n    .replace(/\\W+$/, '');\n};\n\nelasticlunr.Pipeline.registerFunction(elasticlunr.trimmer, 'trimmer');\n/*!\n * elasticlunr.InvertedIndex\n * Copyright (C) 2016 Wei Song\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * elasticlunr.InvertedIndex is used for efficiently storing and\n * lookup of documents that contain a given token.\n *\n * @constructor\n */\nelasticlunr.InvertedIndex = function () {\n  this.root = { docs: {}, df: 0 };\n};\n\n/**\n * Loads a previously serialised inverted index.\n *\n * @param {Object} serialisedData The serialised inverted index to load.\n * @return {elasticlunr.InvertedIndex}\n */\nelasticlunr.InvertedIndex.load = function (serialisedData) {\n  var idx = new this;\n  idx.root = serialisedData.root;\n\n  return idx;\n};\n\n/**\n * Adds a {token: tokenInfo} pair to the inverted index.\n * If the token already exist, then update the tokenInfo.\n *\n * tokenInfo format: { ref: 1, tf: 2}\n * tokenInfor should contains the document's ref and the tf(token frequency) of that token in\n * the document.\n *\n * By default this function starts at the root of the current inverted index, however\n * it can start at any node of the inverted index if required.\n *\n * @param {String} token \n * @param {Object} tokenInfo format: { ref: 1, tf: 2}\n * @param {Object} root An optional node at which to start looking for the\n * correct place to enter the doc, by default the root of this elasticlunr.InvertedIndex\n * is used.\n * @memberOf InvertedIndex\n */\nelasticlunr.InvertedIndex.prototype.addToken = function (token, tokenInfo, root) {\n  var root = root || this.root,\n      idx = 0;\n\n  while (idx <= token.length - 1) {\n    var key = token[idx];\n\n    if (!(key in root)) root[key] = {docs: {}, df: 0};\n    idx += 1;\n    root = root[key];\n  }\n\n  var docRef = tokenInfo.ref;\n  if (!root.docs[docRef]) {\n    // if this doc not exist, then add this doc\n    root.docs[docRef] = {tf: tokenInfo.tf};\n    root.df += 1;\n  } else {\n    // if this doc already exist, then update tokenInfo\n    root.docs[docRef] = {tf: tokenInfo.tf};\n  }\n};\n\n/**\n * Checks whether a token is in this elasticlunr.InvertedIndex.\n * \n *\n * @param {String} token The token to be checked\n * @return {Boolean}\n * @memberOf InvertedIndex\n */\nelasticlunr.InvertedIndex.prototype.hasToken = function (token) {\n  if (!token) return false;\n\n  var node = this.root;\n\n  for (var i = 0; i < token.length; i++) {\n    if (!node[token[i]]) return false;\n    node = node[token[i]];\n  }\n\n  return true;\n};\n\n/**\n * Retrieve a node from the inverted index for a given token.\n * If token not found in this InvertedIndex, return null.\n * \n *\n * @param {String} token The token to get the node for.\n * @return {Object}\n * @see InvertedIndex.prototype.get\n * @memberOf InvertedIndex\n */\nelasticlunr.InvertedIndex.prototype.getNode = function (token) {\n  if (!token) return null;\n\n  var node = this.root;\n\n  for (var i = 0; i < token.length; i++) {\n    if (!node[token[i]]) return null;\n    node = node[token[i]];\n  }\n\n  return node;\n};\n\n/**\n * Retrieve the documents of a given token.\n * If token not found, return {}.\n *\n *\n * @param {String} token The token to get the documents for.\n * @return {Object}\n * @memberOf InvertedIndex\n */\nelasticlunr.InvertedIndex.prototype.getDocs = function (token) {\n  var node = this.getNode(token);\n  if (node == null) {\n    return {};\n  }\n\n  return node.docs;\n};\n\n/**\n * Retrieve term frequency of given token in given docRef.\n * If token or docRef not found, return 0.\n *\n *\n * @param {String} token The token to get the documents for.\n * @param {String|Integer} docRef\n * @return {Integer}\n * @memberOf InvertedIndex\n */\nelasticlunr.InvertedIndex.prototype.getTermFrequency = function (token, docRef) {\n  var node = this.getNode(token);\n\n  if (node == null) {\n    return 0;\n  }\n\n  if (!(docRef in node.docs)) {\n    return 0;\n  }\n\n  return node.docs[docRef].tf;\n};\n\n/**\n * Retrieve the document frequency of given token.\n * If token not found, return 0.\n *\n *\n * @param {String} token The token to get the documents for.\n * @return {Object}\n * @memberOf InvertedIndex\n */\nelasticlunr.InvertedIndex.prototype.getDocFreq = function (token) {\n  var node = this.getNode(token);\n\n  if (node == null) {\n    return 0;\n  }\n\n  return node.df;\n};\n\n/**\n * Remove the document identified by document's ref from the token in the inverted index.\n *\n *\n * @param {String} token Remove the document from which token.\n * @param {String} ref The ref of the document to remove from given token.\n * @memberOf InvertedIndex\n */\nelasticlunr.InvertedIndex.prototype.removeToken = function (token, ref) {\n  if (!token) return;\n  var node = this.getNode(token);\n\n  if (node == null) return;\n\n  if (ref in node.docs) {\n    delete node.docs[ref];\n    node.df -= 1;\n  }\n};\n\n/**\n * Find all the possible suffixes of given token using tokens currently in the inverted index.\n * If token not found, return empty Array.\n *\n * @param {String} token The token to expand.\n * @return {Array}\n * @memberOf InvertedIndex\n */\nelasticlunr.InvertedIndex.prototype.expandToken = function (token, memo, root) {\n  if (token == null || token == '') return [];\n  var memo = memo || [];\n\n  if (root == void 0) {\n    root = this.getNode(token);\n    if (root == null) return memo;\n  }\n\n  if (root.df > 0) memo.push(token);\n\n  for (var key in root) {\n    if (key === 'docs') continue;\n    if (key === 'df') continue;\n    this.expandToken(token + key, memo, root[key]);\n  }\n\n  return memo;\n};\n\n/**\n * Returns a representation of the inverted index ready for serialisation.\n *\n * @return {Object}\n * @memberOf InvertedIndex\n */\nelasticlunr.InvertedIndex.prototype.toJSON = function () {\n  return {\n    root: this.root\n  };\n};\n\n/*!\n * elasticlunr.Configuration\n * Copyright (C) 2016 Wei Song\n */\n \n /** \n  * elasticlunr.Configuration is used to analyze the user search configuration.\n  * \n  * By elasticlunr.Configuration user could set query-time boosting, boolean model in each field.\n  * \n  * Currently configuration supports:\n  * 1. query-time boosting, user could set how to boost each field.\n  * 2. boolean model chosing, user could choose which boolean model to use for each field.\n  * 3. token expandation, user could set token expand to True to improve Recall. Default is False.\n  * \n  * Query time boosting must be configured by field category, \"boolean\" model could be configured \n  * by both field category or globally as the following example. Field configuration for \"boolean\"\n  * will overwrite global configuration.\n  * Token expand could be configured both by field category or golbally. Local field configuration will\n  * overwrite global configuration.\n  * \n  * configuration example:\n  * {\n  *   fields:{ \n  *     title: {boost: 2},\n  *     body: {boost: 1}\n  *   },\n  *   bool: \"OR\"\n  * }\n  * \n  * \"bool\" field configuation overwrite global configuation example:\n  * {\n  *   fields:{ \n  *     title: {boost: 2, bool: \"AND\"},\n  *     body: {boost: 1}\n  *   },\n  *   bool: \"OR\"\n  * }\n  * \n  * \"expand\" example:\n  * {\n  *   fields:{ \n  *     title: {boost: 2, bool: \"AND\"},\n  *     body: {boost: 1}\n  *   },\n  *   bool: \"OR\",\n  *   expand: true\n  * }\n  * \n  * \"expand\" example for field category:\n  * {\n  *   fields:{ \n  *     title: {boost: 2, bool: \"AND\", expand: true},\n  *     body: {boost: 1}\n  *   },\n  *   bool: \"OR\"\n  * }\n  * \n  * setting the boost to 0 ignores the field (this will only search the title):\n  * {\n  *   fields:{\n  *     title: {boost: 1},\n  *     body: {boost: 0}\n  *   }\n  * }\n  *\n  * then, user could search with configuration to do query-time boosting.\n  * idx.search('oracle database', {fields: {title: {boost: 2}, body: {boost: 1}}});\n  * \n  * \n  * @constructor\n  * \n  * @param {String} config user configuration\n  * @param {Array} fields fields of index instance\n  * @module\n  */\nelasticlunr.Configuration = function (config, fields) {\n  var config = config || '';\n\n  if (fields == undefined || fields == null) {\n    throw new Error('fields should not be null');\n  }\n\n  this.config = {};\n\n  var userConfig;\n  try {\n    userConfig = JSON.parse(config);\n    this.buildUserConfig(userConfig, fields);\n  } catch (error) {\n    elasticlunr.utils.warn('user configuration parse failed, will use default configuration');\n    this.buildDefaultConfig(fields);\n  }\n};\n\n/**\n * Build default search configuration.\n * \n * @param {Array} fields fields of index instance\n */\nelasticlunr.Configuration.prototype.buildDefaultConfig = function (fields) {\n  this.reset();\n  fields.forEach(function (field) {\n    this.config[field] = {\n      boost: 1,\n      bool: \"OR\",\n      expand: false\n    };\n  }, this);\n};\n\n/**\n * Build user configuration.\n * \n * @param {JSON} config User JSON configuratoin\n * @param {Array} fields fields of index instance\n */\nelasticlunr.Configuration.prototype.buildUserConfig = function (config, fields) {\n  var global_bool = \"OR\";\n  var global_expand = false;\n\n  this.reset();\n  if ('bool' in config) {\n    global_bool = config['bool'] || global_bool;\n  }\n\n  if ('expand' in config) {\n    global_expand = config['expand'] || global_expand;\n  }\n\n  if ('fields' in config) {\n    for (var field in config['fields']) {\n      if (fields.indexOf(field) > -1) {\n        var field_config = config['fields'][field];\n        var field_expand = global_expand;\n        if (field_config.expand != undefined) {\n          field_expand = field_config.expand;\n        }\n\n        this.config[field] = {\n          boost: (field_config.boost || field_config.boost === 0) ? field_config.boost : 1,\n          bool: field_config.bool || global_bool,\n          expand: field_expand\n        };\n      } else {\n        elasticlunr.utils.warn('field name in user configuration not found in index instance fields');\n      }\n    }\n  } else {\n    this.addAllFields2UserConfig(global_bool, global_expand, fields);\n  }\n};\n\n/**\n * Add all fields to user search configuration.\n * \n * @param {String} bool Boolean model\n * @param {String} expand Expand model\n * @param {Array} fields fields of index instance\n */\nelasticlunr.Configuration.prototype.addAllFields2UserConfig = function (bool, expand, fields) {\n  fields.forEach(function (field) {\n    this.config[field] = {\n      boost: 1,\n      bool: bool,\n      expand: expand\n    };\n  }, this);\n};\n\n/**\n * get current user configuration\n */\nelasticlunr.Configuration.prototype.get = function () {\n  return this.config;\n};\n\n/**\n * reset user search configuration.\n */\nelasticlunr.Configuration.prototype.reset = function () {\n  this.config = {};\n};\n/**\n * sorted_set.js is added only to make elasticlunr.js compatible with lunr-languages.\n * if elasticlunr.js support different languages by default, this will make elasticlunr.js\n * much bigger that not good for browser usage.\n *\n */\n\n\n/*!\n * lunr.SortedSet\n * Copyright (C) 2016 Oliver Nightingale\n */\n\n/**\n * lunr.SortedSets are used to maintain an array of uniq values in a sorted\n * order.\n *\n * @constructor\n */\nlunr.SortedSet = function () {\n  this.length = 0\n  this.elements = []\n}\n\n/**\n * Loads a previously serialised sorted set.\n *\n * @param {Array} serialisedData The serialised set to load.\n * @returns {lunr.SortedSet}\n * @memberOf SortedSet\n */\nlunr.SortedSet.load = function (serialisedData) {\n  var set = new this\n\n  set.elements = serialisedData\n  set.length = serialisedData.length\n\n  return set\n}\n\n/**\n * Inserts new items into the set in the correct position to maintain the\n * order.\n *\n * @param {Object} The objects to add to this set.\n * @memberOf SortedSet\n */\nlunr.SortedSet.prototype.add = function () {\n  var i, element\n\n  for (i = 0; i < arguments.length; i++) {\n    element = arguments[i]\n    if (~this.indexOf(element)) continue\n    this.elements.splice(this.locationFor(element), 0, element)\n  }\n\n  this.length = this.elements.length\n}\n\n/**\n * Converts this sorted set into an array.\n *\n * @returns {Array}\n * @memberOf SortedSet\n */\nlunr.SortedSet.prototype.toArray = function () {\n  return this.elements.slice()\n}\n\n/**\n * Creates a new array with the results of calling a provided function on every\n * element in this sorted set.\n *\n * Delegates to Array.prototype.map and has the same signature.\n *\n * @param {Function} fn The function that is called on each element of the\n * set.\n * @param {Object} ctx An optional object that can be used as the context\n * for the function fn.\n * @returns {Array}\n * @memberOf SortedSet\n */\nlunr.SortedSet.prototype.map = function (fn, ctx) {\n  return this.elements.map(fn, ctx)\n}\n\n/**\n * Executes a provided function once per sorted set element.\n *\n * Delegates to Array.prototype.forEach and has the same signature.\n *\n * @param {Function} fn The function that is called on each element of the\n * set.\n * @param {Object} ctx An optional object that can be used as the context\n * @memberOf SortedSet\n * for the function fn.\n */\nlunr.SortedSet.prototype.forEach = function (fn, ctx) {\n  return this.elements.forEach(fn, ctx)\n}\n\n/**\n * Returns the index at which a given element can be found in the\n * sorted set, or -1 if it is not present.\n *\n * @param {Object} elem The object to locate in the sorted set.\n * @returns {Number}\n * @memberOf SortedSet\n */\nlunr.SortedSet.prototype.indexOf = function (elem) {\n  var start = 0,\n      end = this.elements.length,\n      sectionLength = end - start,\n      pivot = start + Math.floor(sectionLength / 2),\n      pivotElem = this.elements[pivot]\n\n  while (sectionLength > 1) {\n    if (pivotElem === elem) return pivot\n\n    if (pivotElem < elem) start = pivot\n    if (pivotElem > elem) end = pivot\n\n    sectionLength = end - start\n    pivot = start + Math.floor(sectionLength / 2)\n    pivotElem = this.elements[pivot]\n  }\n\n  if (pivotElem === elem) return pivot\n\n  return -1\n}\n\n/**\n * Returns the position within the sorted set that an element should be\n * inserted at to maintain the current order of the set.\n *\n * This function assumes that the element to search for does not already exist\n * in the sorted set.\n *\n * @param {Object} elem The elem to find the position for in the set\n * @returns {Number}\n * @memberOf SortedSet\n */\nlunr.SortedSet.prototype.locationFor = function (elem) {\n  var start = 0,\n      end = this.elements.length,\n      sectionLength = end - start,\n      pivot = start + Math.floor(sectionLength / 2),\n      pivotElem = this.elements[pivot]\n\n  while (sectionLength > 1) {\n    if (pivotElem < elem) start = pivot\n    if (pivotElem > elem) end = pivot\n\n    sectionLength = end - start\n    pivot = start + Math.floor(sectionLength / 2)\n    pivotElem = this.elements[pivot]\n  }\n\n  if (pivotElem > elem) return pivot\n  if (pivotElem < elem) return pivot + 1\n}\n\n/**\n * Creates a new lunr.SortedSet that contains the elements in the intersection\n * of this set and the passed set.\n *\n * @param {lunr.SortedSet} otherSet The set to intersect with this set.\n * @returns {lunr.SortedSet}\n * @memberOf SortedSet\n */\nlunr.SortedSet.prototype.intersect = function (otherSet) {\n  var intersectSet = new lunr.SortedSet,\n      i = 0, j = 0,\n      a_len = this.length, b_len = otherSet.length,\n      a = this.elements, b = otherSet.elements\n\n  while (true) {\n    if (i > a_len - 1 || j > b_len - 1) break\n\n    if (a[i] === b[j]) {\n      intersectSet.add(a[i])\n      i++, j++\n      continue\n    }\n\n    if (a[i] < b[j]) {\n      i++\n      continue\n    }\n\n    if (a[i] > b[j]) {\n      j++\n      continue\n    }\n  };\n\n  return intersectSet\n}\n\n/**\n * Makes a copy of this set\n *\n * @returns {lunr.SortedSet}\n * @memberOf SortedSet\n */\nlunr.SortedSet.prototype.clone = function () {\n  var clone = new lunr.SortedSet\n\n  clone.elements = this.toArray()\n  clone.length = clone.elements.length\n\n  return clone\n}\n\n/**\n * Creates a new lunr.SortedSet that contains the elements in the union\n * of this set and the passed set.\n *\n * @param {lunr.SortedSet} otherSet The set to union with this set.\n * @returns {lunr.SortedSet}\n * @memberOf SortedSet\n */\nlunr.SortedSet.prototype.union = function (otherSet) {\n  var longSet, shortSet, unionSet\n\n  if (this.length >= otherSet.length) {\n    longSet = this, shortSet = otherSet\n  } else {\n    longSet = otherSet, shortSet = this\n  }\n\n  unionSet = longSet.clone()\n\n  for(var i = 0, shortSetElements = shortSet.toArray(); i < shortSetElements.length; i++){\n    unionSet.add(shortSetElements[i])\n  }\n\n  return unionSet\n}\n\n/**\n * Returns a representation of the sorted set ready for serialisation.\n *\n * @returns {Array}\n * @memberOf SortedSet\n */\nlunr.SortedSet.prototype.toJSON = function () {\n  return this.toArray()\n}\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;(function (root, factory) {\n    if (true) {\n      // AMD. Register as an anonymous module.\n      !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n    } else {}\n  }(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return elasticlunr\n  }))\n})();\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxhc3RpY2x1bnIvZWxhc3RpY2x1bnIuanM/NjYxYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsU0FBUyxRQUFRLFNBQVMsU0FBUyxXQUFXO0FBQ25GO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLGlCQUFpQjtBQUNsQzs7QUFFQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsaUNBQWlDO0FBQzFFO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLEtBQUs7QUFDaEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLHlDQUF5QztBQUMzRDs7QUFFQSxnQ0FBZ0MsMEJBQTBCLEVBQUU7QUFDNUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsMEJBQTBCO0FBQ3JDLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixXQUFXLE9BQU87QUFDbEIsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qjs7QUFFOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCLFVBQVU7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsMEJBQTBCO0FBQy9DLDJCQUEyQiwyQkFBMkI7O0FBRXREO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsY0FBYztBQUN4QywrQkFBK0IsY0FBYyxzQkFBc0I7QUFDbkUsK0JBQStCLGFBQWE7QUFDNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksTUFBTTtBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUI7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPLG9CQUFvQjtBQUN0QyxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxxQ0FBcUMsUUFBUTtBQUM3QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EsR0FBRztBQUNIO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsZUFBZTtBQUMxQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekIsZUFBZTtBQUNmLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYztBQUNBLGdCQUFnQixzQkFBc0I7QUFDdEMsZUFBZTtBQUNmLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYztBQUNBLGdCQUFnQixzQkFBc0I7QUFDdEMsZUFBZTtBQUNmLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjO0FBQ0EsZ0JBQWdCLG9DQUFvQztBQUNwRCxlQUFlO0FBQ2YsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxTQUFTLFFBQVEsU0FBUyxTQUFTLFdBQVc7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkIsWUFBWSxNQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBSztBQUNoQixXQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxNQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYSxzQkFBc0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQSx1REFBdUQsNkJBQTZCO0FBQ3BGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILFFBQVEsSUFBMEM7QUFDbEQ7QUFDQSxNQUFNLG9DQUFPLE9BQU87QUFBQTtBQUFBO0FBQUE7QUFBQSxvR0FBQztBQUNyQixLQUFLLE1BQU0sRUFVTjtBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9lbGFzdGljbHVuci9lbGFzdGljbHVuci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogZWxhc3RpY2x1bnIgLSBodHRwOi8vd2VpeHNvbmcuZ2l0aHViLmlvXG4gKiBMaWdodHdlaWdodCBmdWxsLXRleHQgc2VhcmNoIGVuZ2luZSBpbiBKYXZhc2NyaXB0IGZvciBicm93c2VyIHNlYXJjaCBhbmQgb2ZmbGluZSBzZWFyY2guIC0gMC45LjVcbiAqXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgT2xpdmVyIE5pZ2h0aW5nYWxlXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgV2VpIFNvbmdcbiAqIE1JVCBMaWNlbnNlZFxuICogQGxpY2Vuc2VcbiAqL1xuXG4oZnVuY3Rpb24oKXtcblxuLyohXG4gKiBlbGFzdGljbHVuci5qc1xuICogQ29weXJpZ2h0IChDKSAyMDE2IE9saXZlciBOaWdodGluZ2FsZVxuICogQ29weXJpZ2h0IChDKSAyMDE2IFdlaSBTb25nXG4gKi9cblxuLyoqXG4gKiBDb252ZW5pZW5jZSBmdW5jdGlvbiBmb3IgaW5zdGFudGlhdGluZyBhIG5ldyBlbGFzdGljbHVuciBpbmRleCBhbmQgY29uZmlndXJpbmcgaXRcbiAqIHdpdGggdGhlIGRlZmF1bHQgcGlwZWxpbmUgZnVuY3Rpb25zIGFuZCB0aGUgcGFzc2VkIGNvbmZpZyBmdW5jdGlvbi5cbiAqXG4gKiBXaGVuIHVzaW5nIHRoaXMgY29udmVuaWVuY2UgZnVuY3Rpb24gYSBuZXcgaW5kZXggd2lsbCBiZSBjcmVhdGVkIHdpdGggdGhlXG4gKiBmb2xsb3dpbmcgZnVuY3Rpb25zIGFscmVhZHkgaW4gdGhlIHBpcGVsaW5lOlxuICogXG4gKiAxLiBlbGFzdGljbHVuci50cmltbWVyIC0gdHJpbSBub24td29yZCBjaGFyYWN0ZXJcbiAqIDIuIGVsYXN0aWNsdW5yLlN0b3BXb3JkRmlsdGVyIC0gZmlsdGVycyBvdXQgYW55IHN0b3Agd29yZHMgYmVmb3JlIHRoZXkgZW50ZXIgdGhlXG4gKiBpbmRleFxuICogMy4gZWxhc3RpY2x1bnIuc3RlbW1lciAtIHN0ZW1zIHRoZSB0b2tlbnMgYmVmb3JlIGVudGVyaW5nIHRoZSBpbmRleC5cbiAqXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgdmFyIGlkeCA9IGVsYXN0aWNsdW5yKGZ1bmN0aW9uICgpIHtcbiAqICAgICAgIHRoaXMuYWRkRmllbGQoJ2lkJyk7XG4gKiAgICAgICB0aGlzLmFkZEZpZWxkKCd0aXRsZScpO1xuICogICAgICAgdGhpcy5hZGRGaWVsZCgnYm9keScpO1xuICogICAgICAgXG4gKiAgICAgICAvL3RoaXMuc2V0UmVmKCdpZCcpOyAvLyBkZWZhdWx0IHJlZiBpcyAnaWQnXG4gKlxuICogICAgICAgdGhpcy5waXBlbGluZS5hZGQoZnVuY3Rpb24gKCkge1xuICogICAgICAgICAvLyBzb21lIGN1c3RvbSBwaXBlbGluZSBmdW5jdGlvblxuICogICAgICAgfSk7XG4gKiAgICAgfSk7XG4gKiBcbiAqICAgIGlkeC5hZGREb2Moe1xuICogICAgICBpZDogMSwgXG4gKiAgICAgIHRpdGxlOiAnT3JhY2xlIHJlbGVhc2VkIGRhdGFiYXNlIDEyZycsXG4gKiAgICAgIGJvZHk6ICdZZXN0YWRheSwgT3JhY2xlIGhhcyByZWxlYXNlZCB0aGVpciBsYXRlc3QgZGF0YWJhc2UsIG5hbWVkIDEyZywgbW9yZSByb2J1c3QuIHRoaXMgcHJvZHVjdCB3aWxsIGluY3JlYXNlIE9yYWNsZSBwcm9maXQuJ1xuICogICAgfSk7XG4gKiBcbiAqICAgIGlkeC5hZGREb2Moe1xuICogICAgICBpZDogMiwgXG4gKiAgICAgIHRpdGxlOiAnT3JhY2xlIHJlbGVhc2VkIGFubnVhbCBwcm9maXQgcmVwb3J0JyxcbiAqICAgICAgYm9keTogJ1llc3RhZGF5LCBPcmFjbGUgaGFzIHJlbGVhc2VkIHRoZWlyIGFubnVhbCBwcm9maXQgcmVwb3J0IG9mIDIwMTUsIHRvdGFsIHByb2ZpdCBpcyAxMi41IEJpbGxpb24uJ1xuICogICAgfSk7XG4gKiBcbiAqICAgICMgc2ltcGxlIHNlYXJjaFxuICogICAgaWR4LnNlYXJjaCgnb3JhY2xlIGRhdGFiYXNlJyk7XG4gKiBcbiAqICAgICMgc2VhcmNoIHdpdGggcXVlcnktdGltZSBib29zdGluZ1xuICogICAgaWR4LnNlYXJjaCgnb3JhY2xlIGRhdGFiYXNlJywge2ZpZWxkczoge3RpdGxlOiB7Ym9vc3Q6IDJ9LCBib2R5OiB7Ym9vc3Q6IDF9fX0pO1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbmZpZyBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbmV3IGluc3RhbmNlXG4gKiBvZiB0aGUgZWxhc3RpY2x1bnIuSW5kZXggYXMgYm90aCBpdHMgY29udGV4dCBhbmQgZmlyc3QgcGFyYW1ldGVyLiBJdCBjYW4gYmUgdXNlZCB0b1xuICogY3VzdG9taXplIHRoZSBpbnN0YW5jZSBvZiBuZXcgZWxhc3RpY2x1bnIuSW5kZXguXG4gKiBAbmFtZXNwYWNlXG4gKiBAbW9kdWxlXG4gKiBAcmV0dXJuIHtlbGFzdGljbHVuci5JbmRleH1cbiAqXG4gKi9cbnZhciBlbGFzdGljbHVuciA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgdmFyIGlkeCA9IG5ldyBlbGFzdGljbHVuci5JbmRleDtcblxuICBpZHgucGlwZWxpbmUuYWRkKFxuICAgIGVsYXN0aWNsdW5yLnRyaW1tZXIsXG4gICAgZWxhc3RpY2x1bnIuc3RvcFdvcmRGaWx0ZXIsXG4gICAgZWxhc3RpY2x1bnIuc3RlbW1lclxuICApO1xuXG4gIGlmIChjb25maWcpIGNvbmZpZy5jYWxsKGlkeCwgaWR4KTtcblxuICByZXR1cm4gaWR4O1xufTtcblxuZWxhc3RpY2x1bnIudmVyc2lvbiA9IFwiMC45LjVcIjtcblxuLy8gb25seSB1c2VkIHRoaXMgdG8gbWFrZSBlbGFzdGljbHVuci5qcyBjb21wYXRpYmxlIHdpdGggbHVuci1sYW5ndWFnZXNcbi8vIHRoaXMgaXMgYSB0cmljayB0byBkZWZpbmUgYSBnbG9iYWwgYWxpYXMgb2YgZWxhc3RpY2x1bnJcbmx1bnIgPSBlbGFzdGljbHVucjtcblxuLyohXG4gKiBlbGFzdGljbHVuci51dGlsc1xuICogQ29weXJpZ2h0IChDKSAyMDE2IE9saXZlciBOaWdodGluZ2FsZVxuICogQ29weXJpZ2h0IChDKSAyMDE2IFdlaSBTb25nXG4gKi9cblxuLyoqXG4gKiBBIG5hbWVzcGFjZSBjb250YWluaW5nIHV0aWxzIGZvciB0aGUgcmVzdCBvZiB0aGUgZWxhc3RpY2x1bnIgbGlicmFyeVxuICovXG5lbGFzdGljbHVuci51dGlscyA9IHt9O1xuXG4vKipcbiAqIFByaW50IGEgd2FybmluZyBtZXNzYWdlIHRvIHRoZSBjb25zb2xlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGJlIHByaW50ZWQuXG4gKiBAbWVtYmVyT2YgVXRpbHNcbiAqL1xuZWxhc3RpY2x1bnIudXRpbHMud2FybiA9IChmdW5jdGlvbiAoZ2xvYmFsKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIGlmIChnbG9iYWwuY29uc29sZSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB9XG4gIH07XG59KSh0aGlzKTtcblxuLyoqXG4gKiBDb252ZXJ0IGFuIG9iamVjdCB0byBzdHJpbmcuXG4gKlxuICogSW4gdGhlIGNhc2Ugb2YgYG51bGxgIGFuZCBgdW5kZWZpbmVkYCB0aGUgZnVuY3Rpb24gcmV0dXJuc1xuICogYW4gZW1wdHkgc3RyaW5nLCBpbiBhbGwgb3RoZXIgY2FzZXMgdGhlIHJlc3VsdCBvZiBjYWxsaW5nXG4gKiBgdG9TdHJpbmdgIG9uIHRoZSBwYXNzZWQgb2JqZWN0IGlzIHJldHVybmVkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBjb252ZXJ0IHRvIGEgc3RyaW5nLlxuICogQHJldHVybiB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHBhc3NlZCBvYmplY3QuXG4gKiBAbWVtYmVyT2YgVXRpbHNcbiAqL1xuZWxhc3RpY2x1bnIudXRpbHMudG9TdHJpbmcgPSBmdW5jdGlvbiAob2JqKSB7XG4gIGlmIChvYmogPT09IHZvaWQgMCB8fCBvYmogPT09IG51bGwpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIHJldHVybiBvYmoudG9TdHJpbmcoKTtcbn07XG4vKiFcbiAqIGVsYXN0aWNsdW5yLkV2ZW50RW1pdHRlclxuICogQ29weXJpZ2h0IChDKSAyMDE2IE9saXZlciBOaWdodGluZ2FsZVxuICogQ29weXJpZ2h0IChDKSAyMDE2IFdlaSBTb25nXG4gKi9cblxuLyoqXG4gKiBlbGFzdGljbHVuci5FdmVudEVtaXR0ZXIgaXMgYW4gZXZlbnQgZW1pdHRlciBmb3IgZWxhc3RpY2x1bnIuXG4gKiBJdCBtYW5hZ2VzIGFkZGluZyBhbmQgcmVtb3ZpbmcgZXZlbnQgaGFuZGxlcnMgYW5kIHRyaWdnZXJpbmcgZXZlbnRzIGFuZCB0aGVpciBoYW5kbGVycy5cbiAqXG4gKiBFYWNoIGV2ZW50IGNvdWxkIGhhcyBtdWx0aXBsZSBjb3JyZXNwb25kaW5nIGZ1bmN0aW9ucyxcbiAqIHRoZXNlIGZ1bmN0aW9ucyB3aWxsIGJlIGNhbGxlZCBhcyB0aGUgc2VxdWVuY2UgdGhhdCB0aGV5IGFyZSBhZGRlZCBpbnRvIHRoZSBldmVudC5cbiAqIFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmVsYXN0aWNsdW5yLkV2ZW50RW1pdHRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5ldmVudHMgPSB7fTtcbn07XG5cbi8qKlxuICogQmluZHMgYSBoYW5kbGVyIGZ1bmN0aW9uIHRvIGEgc3BlY2lmaWMgZXZlbnQocykuXG4gKlxuICogQ2FuIGJpbmQgYSBzaW5nbGUgZnVuY3Rpb24gdG8gbWFueSBkaWZmZXJlbnQgZXZlbnRzIGluIG9uZSBjYWxsLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBbZXZlbnROYW1lXSBUaGUgbmFtZShzKSBvZiBldmVudHMgdG8gYmluZCB0aGlzIGZ1bmN0aW9uIHRvLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBhbiBldmVudCBpcyBmaXJlZC5cbiAqIEBtZW1iZXJPZiBFdmVudEVtaXR0ZXJcbiAqL1xuZWxhc3RpY2x1bnIuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLFxuICAgICAgZm4gPSBhcmdzLnBvcCgpLFxuICAgICAgbmFtZXMgPSBhcmdzO1xuXG4gIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvciAoXCJsYXN0IGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvblwiKTtcblxuICBuYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKCF0aGlzLmhhc0hhbmRsZXIobmFtZSkpIHRoaXMuZXZlbnRzW25hbWVdID0gW107XG4gICAgdGhpcy5ldmVudHNbbmFtZV0ucHVzaChmbik7XG4gIH0sIHRoaXMpO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGEgaGFuZGxlciBmdW5jdGlvbiBmcm9tIGEgc3BlY2lmaWMgZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gcmVtb3ZlIHRoaXMgZnVuY3Rpb24gZnJvbS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byByZW1vdmUgZnJvbSBhbiBldmVudC5cbiAqIEBtZW1iZXJPZiBFdmVudEVtaXR0ZXJcbiAqL1xuZWxhc3RpY2x1bnIuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xuICBpZiAoIXRoaXMuaGFzSGFuZGxlcihuYW1lKSkgcmV0dXJuO1xuXG4gIHZhciBmbkluZGV4ID0gdGhpcy5ldmVudHNbbmFtZV0uaW5kZXhPZihmbik7XG4gIGlmIChmbkluZGV4ID09PSAtMSkgcmV0dXJuO1xuXG4gIHRoaXMuZXZlbnRzW25hbWVdLnNwbGljZShmbkluZGV4LCAxKTtcblxuICBpZiAodGhpcy5ldmVudHNbbmFtZV0ubGVuZ3RoID09IDApIGRlbGV0ZSB0aGlzLmV2ZW50c1tuYW1lXTtcbn07XG5cbi8qKlxuICogQ2FsbCBhbGwgZnVuY3Rpb25zIHRoYXQgYm91bmRlZCB0byB0aGUgZ2l2ZW4gZXZlbnQuXG4gKlxuICogQWRkaXRpb25hbCBkYXRhIGNhbiBiZSBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXIgYXMgYXJndW1lbnRzIHRvIGBlbWl0YFxuICogYWZ0ZXIgdGhlIGV2ZW50IG5hbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gZW1pdC5cbiAqIEBtZW1iZXJPZiBFdmVudEVtaXR0ZXJcbiAqL1xuZWxhc3RpY2x1bnIuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCF0aGlzLmhhc0hhbmRsZXIobmFtZSkpIHJldHVybjtcblxuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgdGhpcy5ldmVudHNbbmFtZV0uZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICBmbi5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICB9LCB0aGlzKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYSBoYW5kbGVyIGhhcyBldmVyIGJlZW4gc3RvcmVkIGFnYWluc3QgYW4gZXZlbnQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gY2hlY2suXG4gKiBAcHJpdmF0ZVxuICogQG1lbWJlck9mIEV2ZW50RW1pdHRlclxuICovXG5lbGFzdGljbHVuci5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmhhc0hhbmRsZXIgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gbmFtZSBpbiB0aGlzLmV2ZW50cztcbn07XG4vKiFcbiAqIGVsYXN0aWNsdW5yLnRva2VuaXplclxuICogQ29weXJpZ2h0IChDKSAyMDE2IE9saXZlciBOaWdodGluZ2FsZVxuICogQ29weXJpZ2h0IChDKSAyMDE2IFdlaSBTb25nXG4gKi9cblxuLyoqXG4gKiBBIGZ1bmN0aW9uIGZvciBzcGxpdHRpbmcgYSBzdHJpbmcgaW50byB0b2tlbnMuXG4gKiBDdXJyZW50bHkgRW5nbGlzaCBpcyBzdXBwb3J0ZWQgYXMgZGVmYXVsdC5cbiAqIFVzZXMgYGVsYXN0aWNsdW5yLnRva2VuaXplci5zZXBlcmF0b3JgIHRvIHNwbGl0IHN0cmluZ3MsIHlvdSBjb3VsZCBjaGFuZ2VcbiAqIHRoZSB2YWx1ZSBvZiB0aGlzIHByb3BlcnR5IHRvIHNldCBob3cgeW91IHdhbnQgc3RyaW5ncyBhcmUgc3BsaXQgaW50byB0b2tlbnMuXG4gKiBJTVBPUlRBTlQ6IHVzZSBlbGFzdGljbHVuci50b2tlbml6ZXIuc2VwZXJhdG9yIGNhcmVmdWxseSwgaWYgeW91IGFyZSBub3QgZmFtaWxpYXIgd2l0aFxuICogdGV4dCBwcm9jZXNzLCB0aGVuIHlvdSdkIGJldHRlciBub3QgY2hhbmdlIGl0LlxuICpcbiAqIEBtb2R1bGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0aGF0IHlvdSB3YW50IHRvIHRva2VuaXplLlxuICogQHNlZSBlbGFzdGljbHVuci50b2tlbml6ZXIuc2VwZXJhdG9yXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuZWxhc3RpY2x1bnIudG9rZW5pemVyID0gZnVuY3Rpb24gKHN0cikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGggfHwgc3RyID09PSBudWxsIHx8IHN0ciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gW107XG4gIGlmIChBcnJheS5pc0FycmF5KHN0cikpIHtcbiAgICB2YXIgYXJyID0gc3RyLmZpbHRlcihmdW5jdGlvbih0b2tlbikge1xuICAgICAgaWYgKHRva2VuID09PSBudWxsIHx8IHRva2VuID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcblxuICAgIGFyciA9IGFyci5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiBlbGFzdGljbHVuci51dGlscy50b1N0cmluZyh0KS50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgdmFyIG91dCA9IFtdO1xuICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHZhciB0b2tlbnMgPSBpdGVtLnNwbGl0KGVsYXN0aWNsdW5yLnRva2VuaXplci5zZXBlcmF0b3IpO1xuICAgICAgb3V0ID0gb3V0LmNvbmNhdCh0b2tlbnMpO1xuICAgIH0sIHRoaXMpO1xuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHJldHVybiBzdHIudG9TdHJpbmcoKS50cmltKCkudG9Mb3dlckNhc2UoKS5zcGxpdChlbGFzdGljbHVuci50b2tlbml6ZXIuc2VwZXJhdG9yKTtcbn07XG5cbi8qKlxuICogRGVmYXVsdCBzdHJpbmcgc2VwZXJhdG9yLlxuICovXG5lbGFzdGljbHVuci50b2tlbml6ZXIuZGVmYXVsdFNlcGVyYXRvciA9IC9bXFxzXFwtXSsvO1xuXG4vKipcbiAqIFRoZSBzcGVyYXRvciB1c2VkIHRvIHNwbGl0IGEgc3RyaW5nIGludG8gdG9rZW5zLiBPdmVycmlkZSB0aGlzIHByb3BlcnR5IHRvIGNoYW5nZSB0aGUgYmVoYXZpb3VyIG9mXG4gKiBgZWxhc3RpY2x1bnIudG9rZW5pemVyYCBiZWhhdmlvdXIgd2hlbiB0b2tlbml6aW5nIHN0cmluZ3MuIEJ5IGRlZmF1bHQgdGhpcyBzcGxpdHMgb24gd2hpdGVzcGFjZSBhbmQgaHlwaGVucy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2VlIGVsYXN0aWNsdW5yLnRva2VuaXplclxuICovXG5lbGFzdGljbHVuci50b2tlbml6ZXIuc2VwZXJhdG9yID0gZWxhc3RpY2x1bnIudG9rZW5pemVyLmRlZmF1bHRTZXBlcmF0b3I7XG5cbi8qKlxuICogU2V0IHVwIGN1c3RvbWl6ZWQgc3RyaW5nIHNlcGVyYXRvclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXAgVGhlIGN1c3RvbWl6ZWQgc2VwZXJhdG9yIHRoYXQgeW91IHdhbnQgdG8gdXNlIHRvIHRva2VuaXplIGEgc3RyaW5nLlxuICovXG5lbGFzdGljbHVuci50b2tlbml6ZXIuc2V0U2VwZXJhdG9yID0gZnVuY3Rpb24oc2VwKSB7XG4gICAgaWYgKHNlcCAhPT0gbnVsbCAmJiBzZXAgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Yoc2VwKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZWxhc3RpY2x1bnIudG9rZW5pemVyLnNlcGVyYXRvciA9IHNlcDtcbiAgICB9XG59XG5cbi8qKlxuICogUmVzZXQgc3RyaW5nIHNlcGVyYXRvclxuICpcbiAqL1xuZWxhc3RpY2x1bnIudG9rZW5pemVyLnJlc2V0U2VwZXJhdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgZWxhc3RpY2x1bnIudG9rZW5pemVyLnNlcGVyYXRvciA9IGVsYXN0aWNsdW5yLnRva2VuaXplci5kZWZhdWx0U2VwZXJhdG9yO1xufVxuXG4vKipcbiAqIEdldCBzdHJpbmcgc2VwZXJhdG9yXG4gKlxuICovXG5lbGFzdGljbHVuci50b2tlbml6ZXIuZ2V0U2VwZXJhdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGVsYXN0aWNsdW5yLnRva2VuaXplci5zZXBlcmF0b3I7XG59XG4vKiFcbiAqIGVsYXN0aWNsdW5yLlBpcGVsaW5lXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgT2xpdmVyIE5pZ2h0aW5nYWxlXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgV2VpIFNvbmdcbiAqL1xuXG4vKipcbiAqIGVsYXN0aWNsdW5yLlBpcGVsaW5lcyBtYWludGFpbiBhbiBvcmRlcmVkIGxpc3Qgb2YgZnVuY3Rpb25zIHRvIGJlIGFwcGxpZWQgdG8gXG4gKiBib3RoIGRvY3VtZW50cyB0b2tlbnMgYW5kIHF1ZXJ5IHRva2Vucy5cbiAqXG4gKiBBbiBpbnN0YW5jZSBvZiBlbGFzdGljbHVuci5JbmRleCB3aWxsIGNvbnRhaW4gYSBwaXBlbGluZVxuICogd2l0aCBhIHRyaW1tZXIsIGEgc3RvcCB3b3JkIGZpbHRlciwgYW4gRW5nbGlzaCBzdGVtbWVyLiBFeHRyYVxuICogZnVuY3Rpb25zIGNhbiBiZSBhZGRlZCBiZWZvcmUgb3IgYWZ0ZXIgZWl0aGVyIG9mIHRoZXNlIGZ1bmN0aW9ucyBvciB0aGVzZVxuICogZGVmYXVsdCBmdW5jdGlvbnMgY2FuIGJlIHJlbW92ZWQuXG4gKlxuICogV2hlbiBydW4gdGhlIHBpcGVsaW5lLCBpdCB3aWxsIGNhbGwgZWFjaCBmdW5jdGlvbiBpbiB0dXJuLlxuICpcbiAqIFRoZSBvdXRwdXQgb2YgdGhlIGZ1bmN0aW9ucyBpbiB0aGUgcGlwZWxpbmUgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIG5leHQgZnVuY3Rpb25cbiAqIGluIHRoZSBwaXBlbGluZS4gVG8gZXhjbHVkZSBhIHRva2VuIGZyb20gZW50ZXJpbmcgdGhlIGluZGV4IHRoZSBmdW5jdGlvblxuICogc2hvdWxkIHJldHVybiB1bmRlZmluZWQsIHRoZSByZXN0IG9mIHRoZSBwaXBlbGluZSB3aWxsIG5vdCBiZSBjYWxsZWQgd2l0aFxuICogdGhpcyB0b2tlbi5cbiAqXG4gKiBGb3Igc2VyaWFsaXNhdGlvbiBvZiBwaXBlbGluZXMgdG8gd29yaywgYWxsIGZ1bmN0aW9ucyB1c2VkIGluIGFuIGluc3RhbmNlIG9mXG4gKiBhIHBpcGVsaW5lIHNob3VsZCBiZSByZWdpc3RlcmVkIHdpdGggZWxhc3RpY2x1bnIuUGlwZWxpbmUuIFJlZ2lzdGVyZWQgZnVuY3Rpb25zIGNhblxuICogdGhlbiBiZSBsb2FkZWQuIElmIHRyeWluZyB0byBsb2FkIGEgc2VyaWFsaXNlZCBwaXBlbGluZSB0aGF0IHVzZXMgZnVuY3Rpb25zXG4gKiB0aGF0IGFyZSBub3QgcmVnaXN0ZXJlZCBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAqXG4gKiBJZiBub3QgcGxhbm5pbmcgb24gc2VyaWFsaXNpbmcgdGhlIHBpcGVsaW5lIHRoZW4gcmVnaXN0ZXJpbmcgcGlwZWxpbmUgZnVuY3Rpb25zXG4gKiBpcyBub3QgbmVjZXNzYXJ5LlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5lbGFzdGljbHVuci5QaXBlbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fcXVldWUgPSBbXTtcbn07XG5cbmVsYXN0aWNsdW5yLlBpcGVsaW5lLnJlZ2lzdGVyZWRGdW5jdGlvbnMgPSB7fTtcblxuLyoqXG4gKiBSZWdpc3RlciBhIGZ1bmN0aW9uIGluIHRoZSBwaXBlbGluZS5cbiAqXG4gKiBGdW5jdGlvbnMgdGhhdCBhcmUgdXNlZCBpbiB0aGUgcGlwZWxpbmUgc2hvdWxkIGJlIHJlZ2lzdGVyZWQgaWYgdGhlIHBpcGVsaW5lXG4gKiBuZWVkcyB0byBiZSBzZXJpYWxpc2VkLCBvciBhIHNlcmlhbGlzZWQgcGlwZWxpbmUgbmVlZHMgdG8gYmUgbG9hZGVkLlxuICpcbiAqIFJlZ2lzdGVyaW5nIGEgZnVuY3Rpb24gZG9lcyBub3QgYWRkIGl0IHRvIGEgcGlwZWxpbmUsIGZ1bmN0aW9ucyBtdXN0IHN0aWxsIGJlXG4gKiBhZGRlZCB0byBpbnN0YW5jZXMgb2YgdGhlIHBpcGVsaW5lIGZvciB0aGVtIHRvIGJlIHVzZWQgd2hlbiBydW5uaW5nIGEgcGlwZWxpbmUuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyLlxuICogQHBhcmFtIHtTdHJpbmd9IGxhYmVsIFRoZSBsYWJlbCB0byByZWdpc3RlciB0aGlzIGZ1bmN0aW9uIHdpdGhcbiAqIEBtZW1iZXJPZiBQaXBlbGluZVxuICovXG5lbGFzdGljbHVuci5QaXBlbGluZS5yZWdpc3RlckZ1bmN0aW9uID0gZnVuY3Rpb24gKGZuLCBsYWJlbCkge1xuICBpZiAobGFiZWwgaW4gZWxhc3RpY2x1bnIuUGlwZWxpbmUucmVnaXN0ZXJlZEZ1bmN0aW9ucykge1xuICAgIGVsYXN0aWNsdW5yLnV0aWxzLndhcm4oJ092ZXJ3cml0aW5nIGV4aXN0aW5nIHJlZ2lzdGVyZWQgZnVuY3Rpb246ICcgKyBsYWJlbCk7XG4gIH1cblxuICBmbi5sYWJlbCA9IGxhYmVsO1xuICBlbGFzdGljbHVuci5QaXBlbGluZS5yZWdpc3RlcmVkRnVuY3Rpb25zW2xhYmVsXSA9IGZuO1xufTtcblxuLyoqXG4gKiBHZXQgYSByZWdpc3RlcmVkIGZ1bmN0aW9uIGluIHRoZSBwaXBlbGluZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbGFiZWwgVGhlIGxhYmVsIG9mIHJlZ2lzdGVyZWQgZnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBtZW1iZXJPZiBQaXBlbGluZVxuICovXG5lbGFzdGljbHVuci5QaXBlbGluZS5nZXRSZWdpc3RlcmVkRnVuY3Rpb24gPSBmdW5jdGlvbiAobGFiZWwpIHtcbiAgaWYgKChsYWJlbCBpbiBlbGFzdGljbHVuci5QaXBlbGluZS5yZWdpc3RlcmVkRnVuY3Rpb25zKSAhPT0gdHJ1ZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVsYXN0aWNsdW5yLlBpcGVsaW5lLnJlZ2lzdGVyZWRGdW5jdGlvbnNbbGFiZWxdO1xufTtcblxuLyoqXG4gKiBXYXJucyBpZiB0aGUgZnVuY3Rpb24gaXMgbm90IHJlZ2lzdGVyZWQgYXMgYSBQaXBlbGluZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgZm9yLlxuICogQHByaXZhdGVcbiAqIEBtZW1iZXJPZiBQaXBlbGluZVxuICovXG5lbGFzdGljbHVuci5QaXBlbGluZS53YXJuSWZGdW5jdGlvbk5vdFJlZ2lzdGVyZWQgPSBmdW5jdGlvbiAoZm4pIHtcbiAgdmFyIGlzUmVnaXN0ZXJlZCA9IGZuLmxhYmVsICYmIChmbi5sYWJlbCBpbiB0aGlzLnJlZ2lzdGVyZWRGdW5jdGlvbnMpO1xuXG4gIGlmICghaXNSZWdpc3RlcmVkKSB7XG4gICAgZWxhc3RpY2x1bnIudXRpbHMud2FybignRnVuY3Rpb24gaXMgbm90IHJlZ2lzdGVyZWQgd2l0aCBwaXBlbGluZS4gVGhpcyBtYXkgY2F1c2UgcHJvYmxlbXMgd2hlbiBzZXJpYWxpc2luZyB0aGUgaW5kZXguXFxuJywgZm4pO1xuICB9XG59O1xuXG4vKipcbiAqIExvYWRzIGEgcHJldmlvdXNseSBzZXJpYWxpc2VkIHBpcGVsaW5lLlxuICpcbiAqIEFsbCBmdW5jdGlvbnMgdG8gYmUgbG9hZGVkIG11c3QgYWxyZWFkeSBiZSByZWdpc3RlcmVkIHdpdGggZWxhc3RpY2x1bnIuUGlwZWxpbmUuXG4gKiBJZiBhbnkgZnVuY3Rpb24gZnJvbSB0aGUgc2VyaWFsaXNlZCBkYXRhIGhhcyBub3QgYmVlbiByZWdpc3RlcmVkIHRoZW4gYW5cbiAqIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXJpYWxpc2VkIFRoZSBzZXJpYWxpc2VkIHBpcGVsaW5lIHRvIGxvYWQuXG4gKiBAcmV0dXJuIHtlbGFzdGljbHVuci5QaXBlbGluZX1cbiAqIEBtZW1iZXJPZiBQaXBlbGluZVxuICovXG5lbGFzdGljbHVuci5QaXBlbGluZS5sb2FkID0gZnVuY3Rpb24gKHNlcmlhbGlzZWQpIHtcbiAgdmFyIHBpcGVsaW5lID0gbmV3IGVsYXN0aWNsdW5yLlBpcGVsaW5lO1xuXG4gIHNlcmlhbGlzZWQuZm9yRWFjaChmdW5jdGlvbiAoZm5OYW1lKSB7XG4gICAgdmFyIGZuID0gZWxhc3RpY2x1bnIuUGlwZWxpbmUuZ2V0UmVnaXN0ZXJlZEZ1bmN0aW9uKGZuTmFtZSk7XG5cbiAgICBpZiAoZm4pIHtcbiAgICAgIHBpcGVsaW5lLmFkZChmbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGxvYWQgdW4tcmVnaXN0ZXJlZCBmdW5jdGlvbjogJyArIGZuTmFtZSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGlwZWxpbmU7XG59O1xuXG4vKipcbiAqIEFkZHMgbmV3IGZ1bmN0aW9ucyB0byB0aGUgZW5kIG9mIHRoZSBwaXBlbGluZS5cbiAqXG4gKiBMb2dzIGEgd2FybmluZyBpZiB0aGUgZnVuY3Rpb24gaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3Rpb25zIEFueSBudW1iZXIgb2YgZnVuY3Rpb25zIHRvIGFkZCB0byB0aGUgcGlwZWxpbmUuXG4gKiBAbWVtYmVyT2YgUGlwZWxpbmVcbiAqL1xuZWxhc3RpY2x1bnIuUGlwZWxpbmUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGZucyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgZm5zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgZWxhc3RpY2x1bnIuUGlwZWxpbmUud2FybklmRnVuY3Rpb25Ob3RSZWdpc3RlcmVkKGZuKTtcbiAgICB0aGlzLl9xdWV1ZS5wdXNoKGZuKTtcbiAgfSwgdGhpcyk7XG59O1xuXG4vKipcbiAqIEFkZHMgYSBzaW5nbGUgZnVuY3Rpb24gYWZ0ZXIgYSBmdW5jdGlvbiB0aGF0IGFscmVhZHkgZXhpc3RzIGluIHRoZVxuICogcGlwZWxpbmUuXG4gKlxuICogTG9ncyBhIHdhcm5pbmcgaWYgdGhlIGZ1bmN0aW9uIGhhcyBub3QgYmVlbiByZWdpc3RlcmVkLlxuICogSWYgZXhpc3RpbmdGbiBpcyBub3QgZm91bmQsIHRocm93IGFuIEV4Y2VwdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGlzdGluZ0ZuIEEgZnVuY3Rpb24gdGhhdCBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgcGlwZWxpbmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXdGbiBUaGUgbmV3IGZ1bmN0aW9uIHRvIGFkZCB0byB0aGUgcGlwZWxpbmUuXG4gKiBAbWVtYmVyT2YgUGlwZWxpbmVcbiAqL1xuZWxhc3RpY2x1bnIuUGlwZWxpbmUucHJvdG90eXBlLmFmdGVyID0gZnVuY3Rpb24gKGV4aXN0aW5nRm4sIG5ld0ZuKSB7XG4gIGVsYXN0aWNsdW5yLlBpcGVsaW5lLndhcm5JZkZ1bmN0aW9uTm90UmVnaXN0ZXJlZChuZXdGbik7XG5cbiAgdmFyIHBvcyA9IHRoaXMuX3F1ZXVlLmluZGV4T2YoZXhpc3RpbmdGbik7XG4gIGlmIChwb3MgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBleGlzdGluZ0ZuJyk7XG4gIH1cblxuICB0aGlzLl9xdWV1ZS5zcGxpY2UocG9zICsgMSwgMCwgbmV3Rm4pO1xufTtcblxuLyoqXG4gKiBBZGRzIGEgc2luZ2xlIGZ1bmN0aW9uIGJlZm9yZSBhIGZ1bmN0aW9uIHRoYXQgYWxyZWFkeSBleGlzdHMgaW4gdGhlXG4gKiBwaXBlbGluZS5cbiAqXG4gKiBMb2dzIGEgd2FybmluZyBpZiB0aGUgZnVuY3Rpb24gaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQuXG4gKiBJZiBleGlzdGluZ0ZuIGlzIG5vdCBmb3VuZCwgdGhyb3cgYW4gRXhjZXB0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4aXN0aW5nRm4gQSBmdW5jdGlvbiB0aGF0IGFscmVhZHkgZXhpc3RzIGluIHRoZSBwaXBlbGluZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG5ld0ZuIFRoZSBuZXcgZnVuY3Rpb24gdG8gYWRkIHRvIHRoZSBwaXBlbGluZS5cbiAqIEBtZW1iZXJPZiBQaXBlbGluZVxuICovXG5lbGFzdGljbHVuci5QaXBlbGluZS5wcm90b3R5cGUuYmVmb3JlID0gZnVuY3Rpb24gKGV4aXN0aW5nRm4sIG5ld0ZuKSB7XG4gIGVsYXN0aWNsdW5yLlBpcGVsaW5lLndhcm5JZkZ1bmN0aW9uTm90UmVnaXN0ZXJlZChuZXdGbik7XG5cbiAgdmFyIHBvcyA9IHRoaXMuX3F1ZXVlLmluZGV4T2YoZXhpc3RpbmdGbik7XG4gIGlmIChwb3MgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBleGlzdGluZ0ZuJyk7XG4gIH1cblxuICB0aGlzLl9xdWV1ZS5zcGxpY2UocG9zLCAwLCBuZXdGbik7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYSBmdW5jdGlvbiBmcm9tIHRoZSBwaXBlbGluZS5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gcmVtb3ZlIGZyb20gdGhlIHBpcGVsaW5lLlxuICogQG1lbWJlck9mIFBpcGVsaW5lXG4gKi9cbmVsYXN0aWNsdW5yLlBpcGVsaW5lLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgdmFyIHBvcyA9IHRoaXMuX3F1ZXVlLmluZGV4T2YoZm4pO1xuICBpZiAocG9zID09PSAtMSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuX3F1ZXVlLnNwbGljZShwb3MsIDEpO1xufTtcblxuLyoqXG4gKiBSdW5zIHRoZSBjdXJyZW50IGxpc3Qgb2YgZnVuY3Rpb25zIHRoYXQgcmVnaXN0ZXJlZCBpbiB0aGUgcGlwZWxpbmUgYWdhaW5zdCB0aGVcbiAqIGlucHV0IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSB0b2tlbnMgVGhlIHRva2VucyB0byBydW4gdGhyb3VnaCB0aGUgcGlwZWxpbmUuXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEBtZW1iZXJPZiBQaXBlbGluZVxuICovXG5lbGFzdGljbHVuci5QaXBlbGluZS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKHRva2Vucykge1xuICB2YXIgb3V0ID0gW10sXG4gICAgICB0b2tlbkxlbmd0aCA9IHRva2Vucy5sZW5ndGgsXG4gICAgICBwaXBlbGluZUxlbmd0aCA9IHRoaXMuX3F1ZXVlLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2VuTGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBpcGVsaW5lTGVuZ3RoOyBqKyspIHtcbiAgICAgIHRva2VuID0gdGhpcy5fcXVldWVbal0odG9rZW4sIGksIHRva2Vucyk7XG4gICAgICBpZiAodG9rZW4gPT09IHZvaWQgMCB8fCB0b2tlbiA9PT0gbnVsbCkgYnJlYWs7XG4gICAgfTtcblxuICAgIGlmICh0b2tlbiAhPT0gdm9pZCAwICYmIHRva2VuICE9PSBudWxsKSBvdXQucHVzaCh0b2tlbik7XG4gIH07XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogUmVzZXRzIHRoZSBwaXBlbGluZSBieSByZW1vdmluZyBhbnkgZXhpc3RpbmcgcHJvY2Vzc29ycy5cbiAqXG4gKiBAbWVtYmVyT2YgUGlwZWxpbmVcbiAqL1xuZWxhc3RpY2x1bnIuUGlwZWxpbmUucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9xdWV1ZSA9IFtdO1xufTtcblxuIC8qKlxuICAqIEdldCB0aGUgcGlwZWxpbmUgaWYgdXNlciB3YW50IHRvIGNoZWNrIHRoZSBwaXBlbGluZS5cbiAgKlxuICAqIEBtZW1iZXJPZiBQaXBlbGluZVxuICAqL1xuIGVsYXN0aWNsdW5yLlBpcGVsaW5lLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICByZXR1cm4gdGhpcy5fcXVldWU7XG4gfTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIHBpcGVsaW5lIHJlYWR5IGZvciBzZXJpYWxpc2F0aW9uLlxuICogT25seSBzZXJpYWxpemUgcGlwZWxpbmUgZnVuY3Rpb24ncyBuYW1lLiBOb3Qgc3RvcmluZyBmdW5jdGlvbiwgc28gd2hlblxuICogbG9hZGluZyB0aGUgYXJjaGl2ZWQgSlNPTiBpbmRleCBmaWxlLCBjb3JyZXNwb25kaW5nIHBpcGVsaW5lIGZ1bmN0aW9uIGlzIFxuICogYWRkZWQgYnkgcmVnaXN0ZXJlZCBmdW5jdGlvbiBvZiBlbGFzdGljbHVuci5QaXBlbGluZS5yZWdpc3RlcmVkRnVuY3Rpb25zXG4gKlxuICogTG9ncyBhIHdhcm5pbmcgaWYgdGhlIGZ1bmN0aW9uIGhhcyBub3QgYmVlbiByZWdpc3RlcmVkLlxuICpcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQG1lbWJlck9mIFBpcGVsaW5lXG4gKi9cbmVsYXN0aWNsdW5yLlBpcGVsaW5lLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9xdWV1ZS5tYXAoZnVuY3Rpb24gKGZuKSB7XG4gICAgZWxhc3RpY2x1bnIuUGlwZWxpbmUud2FybklmRnVuY3Rpb25Ob3RSZWdpc3RlcmVkKGZuKTtcbiAgICByZXR1cm4gZm4ubGFiZWw7XG4gIH0pO1xufTtcbi8qIVxuICogZWxhc3RpY2x1bnIuSW5kZXhcbiAqIENvcHlyaWdodCAoQykgMjAxNiBPbGl2ZXIgTmlnaHRpbmdhbGVcbiAqIENvcHlyaWdodCAoQykgMjAxNiBXZWkgU29uZ1xuICovXG5cbi8qKlxuICogZWxhc3RpY2x1bnIuSW5kZXggaXMgb2JqZWN0IHRoYXQgbWFuYWdlcyBhIHNlYXJjaCBpbmRleC4gIEl0IGNvbnRhaW5zIHRoZSBpbmRleGVzXG4gKiBhbmQgc3RvcmVzIGFsbCB0aGUgdG9rZW5zIGFuZCBkb2N1bWVudCBsb29rdXBzLiAgSXQgYWxzbyBwcm92aWRlcyB0aGUgbWFpblxuICogdXNlciBmYWNpbmcgQVBJIGZvciB0aGUgbGlicmFyeS5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZWxhc3RpY2x1bnIuSW5kZXggPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2ZpZWxkcyA9IFtdO1xuICB0aGlzLl9yZWYgPSAnaWQnO1xuICB0aGlzLnBpcGVsaW5lID0gbmV3IGVsYXN0aWNsdW5yLlBpcGVsaW5lO1xuICB0aGlzLmRvY3VtZW50U3RvcmUgPSBuZXcgZWxhc3RpY2x1bnIuRG9jdW1lbnRTdG9yZTtcbiAgdGhpcy5pbmRleCA9IHt9O1xuICB0aGlzLmV2ZW50RW1pdHRlciA9IG5ldyBlbGFzdGljbHVuci5FdmVudEVtaXR0ZXI7XG4gIHRoaXMuX2lkZkNhY2hlID0ge307XG5cbiAgdGhpcy5vbignYWRkJywgJ3JlbW92ZScsICd1cGRhdGUnLCAoZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2lkZkNhY2hlID0ge307XG4gIH0pLmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBCaW5kIGEgaGFuZGxlciB0byBldmVudHMgYmVpbmcgZW1pdHRlZCBieSB0aGUgaW5kZXguXG4gKlxuICogVGhlIGhhbmRsZXIgY2FuIGJlIGJvdW5kIHRvIG1hbnkgZXZlbnRzIGF0IHRoZSBzYW1lIHRpbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IFtldmVudE5hbWVdIFRoZSBuYW1lKHMpIG9mIGV2ZW50cyB0byBiaW5kIHRoZSBmdW5jdGlvbiB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBzZXJpYWxpc2VkIHNldCB0byBsb2FkLlxuICogQG1lbWJlck9mIEluZGV4XG4gKi9cbmVsYXN0aWNsdW5yLkluZGV4LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcy5ldmVudEVtaXR0ZXIuYWRkTGlzdGVuZXIuYXBwbHkodGhpcy5ldmVudEVtaXR0ZXIsIGFyZ3MpO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGEgaGFuZGxlciBmcm9tIGFuIGV2ZW50IGJlaW5nIGVtaXR0ZWQgYnkgdGhlIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWUgVGhlIG5hbWUgb2YgZXZlbnRzIHRvIHJlbW92ZSB0aGUgZnVuY3Rpb24gZnJvbS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBzZXJpYWxpc2VkIHNldCB0byBsb2FkLlxuICogQG1lbWJlck9mIEluZGV4XG4gKi9cbmVsYXN0aWNsdW5yLkluZGV4LnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAobmFtZSwgZm4pIHtcbiAgcmV0dXJuIHRoaXMuZXZlbnRFbWl0dGVyLnJlbW92ZUxpc3RlbmVyKG5hbWUsIGZuKTtcbn07XG5cbi8qKlxuICogTG9hZHMgYSBwcmV2aW91c2x5IHNlcmlhbGlzZWQgaW5kZXguXG4gKlxuICogSXNzdWVzIGEgd2FybmluZyBpZiB0aGUgaW5kZXggYmVpbmcgaW1wb3J0ZWQgd2FzIHNlcmlhbGlzZWRcbiAqIGJ5IGEgZGlmZmVyZW50IHZlcnNpb24gb2YgZWxhc3RpY2x1bnIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHNlcmlhbGlzZWREYXRhIFRoZSBzZXJpYWxpc2VkIHNldCB0byBsb2FkLlxuICogQHJldHVybiB7ZWxhc3RpY2x1bnIuSW5kZXh9XG4gKiBAbWVtYmVyT2YgSW5kZXhcbiAqL1xuZWxhc3RpY2x1bnIuSW5kZXgubG9hZCA9IGZ1bmN0aW9uIChzZXJpYWxpc2VkRGF0YSkge1xuICBpZiAoc2VyaWFsaXNlZERhdGEudmVyc2lvbiAhPT0gZWxhc3RpY2x1bnIudmVyc2lvbikge1xuICAgIGVsYXN0aWNsdW5yLnV0aWxzLndhcm4oJ3ZlcnNpb24gbWlzbWF0Y2g6IGN1cnJlbnQgJ1xuICAgICAgICAgICAgICAgICAgICArIGVsYXN0aWNsdW5yLnZlcnNpb24gKyAnIGltcG9ydGluZyAnICsgc2VyaWFsaXNlZERhdGEudmVyc2lvbik7XG4gIH1cblxuICB2YXIgaWR4ID0gbmV3IHRoaXM7XG5cbiAgaWR4Ll9maWVsZHMgPSBzZXJpYWxpc2VkRGF0YS5maWVsZHM7XG4gIGlkeC5fcmVmID0gc2VyaWFsaXNlZERhdGEucmVmO1xuICBpZHguZG9jdW1lbnRTdG9yZSA9IGVsYXN0aWNsdW5yLkRvY3VtZW50U3RvcmUubG9hZChzZXJpYWxpc2VkRGF0YS5kb2N1bWVudFN0b3JlKTtcbiAgaWR4LnBpcGVsaW5lID0gZWxhc3RpY2x1bnIuUGlwZWxpbmUubG9hZChzZXJpYWxpc2VkRGF0YS5waXBlbGluZSk7XG4gIGlkeC5pbmRleCA9IHt9O1xuICBmb3IgKHZhciBmaWVsZCBpbiBzZXJpYWxpc2VkRGF0YS5pbmRleCkge1xuICAgIGlkeC5pbmRleFtmaWVsZF0gPSBlbGFzdGljbHVuci5JbnZlcnRlZEluZGV4LmxvYWQoc2VyaWFsaXNlZERhdGEuaW5kZXhbZmllbGRdKTtcbiAgfVxuXG4gIHJldHVybiBpZHg7XG59O1xuXG4vKipcbiAqIEFkZHMgYSBmaWVsZCB0byB0aGUgbGlzdCBvZiBmaWVsZHMgdGhhdCB3aWxsIGJlIHNlYXJjaGFibGUgd2l0aGluIGRvY3VtZW50cyBpbiB0aGUgaW5kZXguXG4gKlxuICogUmVtZW1iZXIgdGhhdCBpbm5lciBpbmRleCBpcyBidWlsZCBiYXNlZCBvbiBmaWVsZCwgd2hpY2ggbWVhbnMgZWFjaCBmaWVsZCBoYXMgb25lIGludmVydGVkIGluZGV4LlxuICpcbiAqIEZpZWxkcyBzaG91bGQgYmUgYWRkZWQgYmVmb3JlIGFueSBkb2N1bWVudHMgYXJlIGFkZGVkIHRvIHRoZSBpbmRleCwgZmllbGRzXG4gKiB0aGF0IGFyZSBhZGRlZCBhZnRlciBkb2N1bWVudHMgYXJlIGFkZGVkIHRvIHRoZSBpbmRleCB3aWxsIG9ubHkgYXBwbHkgdG8gbmV3XG4gKiBkb2N1bWVudHMgYWRkZWQgdG8gdGhlIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWVsZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGZpZWxkIHdpdGhpbiB0aGUgZG9jdW1lbnQgdGhhdCBzaG91bGQgYmUgaW5kZXhlZFxuICogQHJldHVybiB7ZWxhc3RpY2x1bnIuSW5kZXh9XG4gKiBAbWVtYmVyT2YgSW5kZXhcbiAqL1xuZWxhc3RpY2x1bnIuSW5kZXgucHJvdG90eXBlLmFkZEZpZWxkID0gZnVuY3Rpb24gKGZpZWxkTmFtZSkge1xuICB0aGlzLl9maWVsZHMucHVzaChmaWVsZE5hbWUpO1xuICB0aGlzLmluZGV4W2ZpZWxkTmFtZV0gPSBuZXcgZWxhc3RpY2x1bnIuSW52ZXJ0ZWRJbmRleDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHByb3BlcnR5IHVzZWQgdG8gdW5pcXVlbHkgaWRlbnRpZnkgZG9jdW1lbnRzIGFkZGVkIHRvIHRoZSBpbmRleCxcbiAqIGJ5IGRlZmF1bHQgdGhpcyBwcm9wZXJ0eSBpcyAnaWQnLlxuICpcbiAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgY2hhbmdlZCBiZWZvcmUgYWRkaW5nIGRvY3VtZW50cyB0byB0aGUgaW5kZXgsIGNoYW5naW5nXG4gKiB0aGUgcmVmIHByb3BlcnR5IHdpdGhvdXQgcmVzZXR0aW5nIHRoZSBpbmRleCBjYW4gbGVhZCB0byB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlZk5hbWUgVGhlIHByb3BlcnR5IHRvIHVzZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGVcbiAqIGRvY3VtZW50cyBpbiB0aGUgaW5kZXguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGVtaXRFdmVudCBXaGV0aGVyIHRvIGVtaXQgYWRkIGV2ZW50cywgZGVmYXVsdHMgdG8gdHJ1ZVxuICogQHJldHVybiB7ZWxhc3RpY2x1bnIuSW5kZXh9XG4gKiBAbWVtYmVyT2YgSW5kZXhcbiAqL1xuZWxhc3RpY2x1bnIuSW5kZXgucHJvdG90eXBlLnNldFJlZiA9IGZ1bmN0aW9uIChyZWZOYW1lKSB7XG4gIHRoaXMuX3JlZiA9IHJlZk5hbWU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKlxuICogU2V0IGlmIHRoZSBKU09OIGZvcm1hdCBvcmlnaW5hbCBkb2N1bWVudHMgYXJlIHNhdmUgaW50byBlbGFzdGljbHVuci5Eb2N1bWVudFN0b3JlXG4gKlxuICogRGVmYXVsdGx5IHNhdmUgYWxsIHRoZSBvcmlnaW5hbCBKU09OIGRvY3VtZW50cy5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHNhdmUgV2hldGhlciB0byBzYXZlIHRoZSBvcmlnaW5hbCBKU09OIGRvY3VtZW50cy5cbiAqIEByZXR1cm4ge2VsYXN0aWNsdW5yLkluZGV4fVxuICogQG1lbWJlck9mIEluZGV4XG4gKi9cbmVsYXN0aWNsdW5yLkluZGV4LnByb3RvdHlwZS5zYXZlRG9jdW1lbnQgPSBmdW5jdGlvbiAoc2F2ZSkge1xuICB0aGlzLmRvY3VtZW50U3RvcmUgPSBuZXcgZWxhc3RpY2x1bnIuRG9jdW1lbnRTdG9yZShzYXZlKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFkZCBhIEpTT04gZm9ybWF0IGRvY3VtZW50IHRvIHRoZSBpbmRleC5cbiAqXG4gKiBUaGlzIGlzIHRoZSB3YXkgbmV3IGRvY3VtZW50cyBlbnRlciB0aGUgaW5kZXgsIHRoaXMgZnVuY3Rpb24gd2lsbCBydW4gdGhlXG4gKiBmaWVsZHMgZnJvbSB0aGUgZG9jdW1lbnQgdGhyb3VnaCB0aGUgaW5kZXgncyBwaXBlbGluZSBhbmQgdGhlbiBhZGQgaXQgdG9cbiAqIHRoZSBpbmRleCwgaXQgd2lsbCB0aGVuIHNob3cgdXAgaW4gc2VhcmNoIHJlc3VsdHMuXG4gKlxuICogQW4gJ2FkZCcgZXZlbnQgaXMgZW1pdHRlZCB3aXRoIHRoZSBkb2N1bWVudCB0aGF0IGhhcyBiZWVuIGFkZGVkIGFuZCB0aGUgaW5kZXhcbiAqIHRoZSBkb2N1bWVudCBoYXMgYmVlbiBhZGRlZCB0by4gVGhpcyBldmVudCBjYW4gYmUgc2lsZW5jZWQgYnkgcGFzc2luZyBmYWxzZVxuICogYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBhZGQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRvYyBUaGUgSlNPTiBmb3JtYXQgZG9jdW1lbnQgdG8gYWRkIHRvIHRoZSBpbmRleC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZW1pdEV2ZW50IFdoZXRoZXIgb3Igbm90IHRvIGVtaXQgZXZlbnRzLCBkZWZhdWx0IHRydWUuXG4gKiBAbWVtYmVyT2YgSW5kZXhcbiAqL1xuZWxhc3RpY2x1bnIuSW5kZXgucHJvdG90eXBlLmFkZERvYyA9IGZ1bmN0aW9uIChkb2MsIGVtaXRFdmVudCkge1xuICBpZiAoIWRvYykgcmV0dXJuO1xuICB2YXIgZW1pdEV2ZW50ID0gZW1pdEV2ZW50ID09PSB1bmRlZmluZWQgPyB0cnVlIDogZW1pdEV2ZW50O1xuXG4gIHZhciBkb2NSZWYgPSBkb2NbdGhpcy5fcmVmXTtcblxuICB0aGlzLmRvY3VtZW50U3RvcmUuYWRkRG9jKGRvY1JlZiwgZG9jKTtcbiAgdGhpcy5fZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgdmFyIGZpZWxkVG9rZW5zID0gdGhpcy5waXBlbGluZS5ydW4oZWxhc3RpY2x1bnIudG9rZW5pemVyKGRvY1tmaWVsZF0pKTtcbiAgICB0aGlzLmRvY3VtZW50U3RvcmUuYWRkRmllbGRMZW5ndGgoZG9jUmVmLCBmaWVsZCwgZmllbGRUb2tlbnMubGVuZ3RoKTtcblxuICAgIHZhciB0b2tlbkNvdW50ID0ge307XG4gICAgZmllbGRUb2tlbnMuZm9yRWFjaChmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgIGlmICh0b2tlbiBpbiB0b2tlbkNvdW50KSB0b2tlbkNvdW50W3Rva2VuXSArPSAxO1xuICAgICAgZWxzZSB0b2tlbkNvdW50W3Rva2VuXSA9IDE7XG4gICAgfSwgdGhpcyk7XG5cbiAgICBmb3IgKHZhciB0b2tlbiBpbiB0b2tlbkNvdW50KSB7XG4gICAgICB2YXIgdGVybUZyZXF1ZW5jeSA9IHRva2VuQ291bnRbdG9rZW5dO1xuICAgICAgdGVybUZyZXF1ZW5jeSA9IE1hdGguc3FydCh0ZXJtRnJlcXVlbmN5KTtcbiAgICAgIHRoaXMuaW5kZXhbZmllbGRdLmFkZFRva2VuKHRva2VuLCB7IHJlZjogZG9jUmVmLCB0ZjogdGVybUZyZXF1ZW5jeSB9KTtcbiAgICB9XG4gIH0sIHRoaXMpO1xuXG4gIGlmIChlbWl0RXZlbnQpIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoJ2FkZCcsIGRvYywgdGhpcyk7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYSBkb2N1bWVudCBmcm9tIHRoZSBpbmRleCBieSBkb2MgcmVmLlxuICpcbiAqIFRvIG1ha2Ugc3VyZSBkb2N1bWVudHMgbm8gbG9uZ2VyIHNob3cgdXAgaW4gc2VhcmNoIHJlc3VsdHMgdGhleSBjYW4gYmVcbiAqIHJlbW92ZWQgZnJvbSB0aGUgaW5kZXggdXNpbmcgdGhpcyBtZXRob2QuXG4gKlxuICogQSAncmVtb3ZlJyBldmVudCBpcyBlbWl0dGVkIHdpdGggdGhlIGRvY3VtZW50IHRoYXQgaGFzIGJlZW4gcmVtb3ZlZCBhbmQgdGhlIGluZGV4XG4gKiB0aGUgZG9jdW1lbnQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tLiBUaGlzIGV2ZW50IGNhbiBiZSBzaWxlbmNlZCBieSBwYXNzaW5nIGZhbHNlXG4gKiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIHJlbW92ZS5cbiAqXG4gKiBJZiB1c2VyIHNldHRpbmcgRG9jdW1lbnRTdG9yZSBub3Qgc3RvcmluZyB0aGUgZG9jdW1lbnRzLCB0aGVuIHJlbW92ZSBkb2MgYnkgZG9jUmVmIGlzIG5vdCBhbGxvd2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEludGVnZXJ9IGRvY1JlZiBUaGUgZG9jdW1lbnQgcmVmIHRvIHJlbW92ZSBmcm9tIHRoZSBpbmRleC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZW1pdEV2ZW50IFdoZXRoZXIgdG8gZW1pdCByZW1vdmUgZXZlbnRzLCBkZWZhdWx0cyB0byB0cnVlXG4gKiBAbWVtYmVyT2YgSW5kZXhcbiAqL1xuZWxhc3RpY2x1bnIuSW5kZXgucHJvdG90eXBlLnJlbW92ZURvY0J5UmVmID0gZnVuY3Rpb24gKGRvY1JlZiwgZW1pdEV2ZW50KSB7XG4gIGlmICghZG9jUmVmKSByZXR1cm47XG4gIGlmICh0aGlzLmRvY3VtZW50U3RvcmUuaXNEb2NTdG9yZWQoKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXRoaXMuZG9jdW1lbnRTdG9yZS5oYXNEb2MoZG9jUmVmKSkgcmV0dXJuO1xuICB2YXIgZG9jID0gdGhpcy5kb2N1bWVudFN0b3JlLmdldERvYyhkb2NSZWYpO1xuICB0aGlzLnJlbW92ZURvYyhkb2MsIGZhbHNlKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhIGRvY3VtZW50IGZyb20gdGhlIGluZGV4LlxuICogVGhpcyByZW1vdmUgb3BlcmF0aW9uIGNvdWxkIHdvcmsgZXZlbiB0aGUgb3JpZ2luYWwgZG9jIGlzIG5vdCBzdG9yZSBpbiB0aGUgRG9jdW1lbnRTdG9yZS5cbiAqXG4gKiBUbyBtYWtlIHN1cmUgZG9jdW1lbnRzIG5vIGxvbmdlciBzaG93IHVwIGluIHNlYXJjaCByZXN1bHRzIHRoZXkgY2FuIGJlXG4gKiByZW1vdmVkIGZyb20gdGhlIGluZGV4IHVzaW5nIHRoaXMgbWV0aG9kLlxuICpcbiAqIEEgJ3JlbW92ZScgZXZlbnQgaXMgZW1pdHRlZCB3aXRoIHRoZSBkb2N1bWVudCB0aGF0IGhhcyBiZWVuIHJlbW92ZWQgYW5kIHRoZSBpbmRleFxuICogdGhlIGRvY3VtZW50IGhhcyBiZWVuIHJlbW92ZWQgZnJvbS4gVGhpcyBldmVudCBjYW4gYmUgc2lsZW5jZWQgYnkgcGFzc2luZyBmYWxzZVxuICogYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byByZW1vdmUuXG4gKlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MgVGhlIGRvY3VtZW50IHJlZiB0byByZW1vdmUgZnJvbSB0aGUgaW5kZXguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGVtaXRFdmVudCBXaGV0aGVyIHRvIGVtaXQgcmVtb3ZlIGV2ZW50cywgZGVmYXVsdHMgdG8gdHJ1ZVxuICogQG1lbWJlck9mIEluZGV4XG4gKi9cbmVsYXN0aWNsdW5yLkluZGV4LnByb3RvdHlwZS5yZW1vdmVEb2MgPSBmdW5jdGlvbiAoZG9jLCBlbWl0RXZlbnQpIHtcbiAgaWYgKCFkb2MpIHJldHVybjtcblxuICB2YXIgZW1pdEV2ZW50ID0gZW1pdEV2ZW50ID09PSB1bmRlZmluZWQgPyB0cnVlIDogZW1pdEV2ZW50O1xuXG4gIHZhciBkb2NSZWYgPSBkb2NbdGhpcy5fcmVmXTtcbiAgaWYgKCF0aGlzLmRvY3VtZW50U3RvcmUuaGFzRG9jKGRvY1JlZikpIHJldHVybjtcblxuICB0aGlzLmRvY3VtZW50U3RvcmUucmVtb3ZlRG9jKGRvY1JlZik7XG5cbiAgdGhpcy5fZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgdmFyIGZpZWxkVG9rZW5zID0gdGhpcy5waXBlbGluZS5ydW4oZWxhc3RpY2x1bnIudG9rZW5pemVyKGRvY1tmaWVsZF0pKTtcbiAgICBmaWVsZFRva2Vucy5mb3JFYWNoKGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgdGhpcy5pbmRleFtmaWVsZF0ucmVtb3ZlVG9rZW4odG9rZW4sIGRvY1JlZik7XG4gICAgfSwgdGhpcyk7XG4gIH0sIHRoaXMpO1xuXG4gIGlmIChlbWl0RXZlbnQpIHRoaXMuZXZlbnRFbWl0dGVyLmVtaXQoJ3JlbW92ZScsIGRvYywgdGhpcyk7XG59O1xuXG4vKipcbiAqIFVwZGF0ZXMgYSBkb2N1bWVudCBpbiB0aGUgaW5kZXguXG4gKlxuICogV2hlbiBhIGRvY3VtZW50IGNvbnRhaW5lZCB3aXRoaW4gdGhlIGluZGV4IGdldHMgdXBkYXRlZCwgZmllbGRzIGNoYW5nZWQsXG4gKiBhZGRlZCBvciByZW1vdmVkLCB0byBtYWtlIHN1cmUgaXQgY29ycmVjdGx5IG1hdGNoZWQgYWdhaW5zdCBzZWFyY2ggcXVlcmllcyxcbiAqIGl0IHNob3VsZCBiZSB1cGRhdGVkIGluIHRoZSBpbmRleC5cbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBqdXN0IGEgd3JhcHBlciBhcm91bmQgYHJlbW92ZWAgYW5kIGBhZGRgXG4gKlxuICogQW4gJ3VwZGF0ZScgZXZlbnQgaXMgZW1pdHRlZCB3aXRoIHRoZSBkb2N1bWVudCB0aGF0IGhhcyBiZWVuIHVwZGF0ZWQgYW5kIHRoZSBpbmRleC5cbiAqIFRoaXMgZXZlbnQgY2FuIGJlIHNpbGVuY2VkIGJ5IHBhc3NpbmcgZmFsc2UgYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byB1cGRhdGUuIE9ubHlcbiAqIGFuIHVwZGF0ZSBldmVudCB3aWxsIGJlIGZpcmVkLCB0aGUgJ2FkZCcgYW5kICdyZW1vdmUnIGV2ZW50cyBvZiB0aGUgdW5kZXJseWluZyBjYWxsc1xuICogYXJlIHNpbGVuY2VkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkb2MgVGhlIGRvY3VtZW50IHRvIHVwZGF0ZSBpbiB0aGUgaW5kZXguXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGVtaXRFdmVudCBXaGV0aGVyIHRvIGVtaXQgdXBkYXRlIGV2ZW50cywgZGVmYXVsdHMgdG8gdHJ1ZVxuICogQHNlZSBJbmRleC5wcm90b3R5cGUucmVtb3ZlXG4gKiBAc2VlIEluZGV4LnByb3RvdHlwZS5hZGRcbiAqIEBtZW1iZXJPZiBJbmRleFxuICovXG5lbGFzdGljbHVuci5JbmRleC5wcm90b3R5cGUudXBkYXRlRG9jID0gZnVuY3Rpb24gKGRvYywgZW1pdEV2ZW50KSB7XG4gIHZhciBlbWl0RXZlbnQgPSBlbWl0RXZlbnQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBlbWl0RXZlbnQ7XG5cbiAgdGhpcy5yZW1vdmVEb2NCeVJlZihkb2NbdGhpcy5fcmVmXSwgZmFsc2UpO1xuICB0aGlzLmFkZERvYyhkb2MsIGZhbHNlKTtcblxuICBpZiAoZW1pdEV2ZW50KSB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KCd1cGRhdGUnLCBkb2MsIHRoaXMpO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIGRvY3VtZW50IGZyZXF1ZW5jeSBmb3IgYSB0b2tlbiB3aXRoaW4gdGhlIGluZGV4IG9mIGEgZmllbGQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRva2VuIFRoZSB0b2tlbiB0byBjYWxjdWxhdGUgdGhlIGlkZiBvZi5cbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWVsZCBUaGUgZmllbGQgdG8gY29tcHV0ZSBpZGYuXG4gKiBAc2VlIEluZGV4LnByb3RvdHlwZS5pZGZcbiAqIEBwcml2YXRlXG4gKiBAbWVtYmVyT2YgSW5kZXhcbiAqL1xuZWxhc3RpY2x1bnIuSW5kZXgucHJvdG90eXBlLmlkZiA9IGZ1bmN0aW9uICh0ZXJtLCBmaWVsZCkge1xuICB2YXIgY2FjaGVLZXkgPSBcIkBcIiArIGZpZWxkICsgJy8nICsgdGVybTtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9pZGZDYWNoZSwgY2FjaGVLZXkpKSByZXR1cm4gdGhpcy5faWRmQ2FjaGVbY2FjaGVLZXldO1xuXG4gIHZhciBkZiA9IHRoaXMuaW5kZXhbZmllbGRdLmdldERvY0ZyZXEodGVybSk7XG4gIHZhciBpZGYgPSAxICsgTWF0aC5sb2codGhpcy5kb2N1bWVudFN0b3JlLmxlbmd0aCAvIChkZiArIDEpKTtcbiAgdGhpcy5faWRmQ2FjaGVbY2FjaGVLZXldID0gaWRmO1xuXG4gIHJldHVybiBpZGY7XG59O1xuXG4vKipcbiAqIGdldCBmaWVsZHMgb2YgY3VycmVudCBpbmRleCBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5lbGFzdGljbHVuci5JbmRleC5wcm90b3R5cGUuZ2V0RmllbGRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fZmllbGRzLnNsaWNlKCk7XG59O1xuXG4vKipcbiAqIFNlYXJjaGVzIHRoZSBpbmRleCB1c2luZyB0aGUgcGFzc2VkIHF1ZXJ5LlxuICogUXVlcmllcyBzaG91bGQgYmUgYSBzdHJpbmcsIG11bHRpcGxlIHdvcmRzIGFyZSBhbGxvd2VkLlxuICpcbiAqIElmIGNvbmZpZyBpcyBudWxsLCB3aWxsIHNlYXJjaCBhbGwgZmllbGRzIGRlZmF1bHRseSwgYW5kIGxlYWQgdG8gT1IgYmFzZWQgcXVlcnkuXG4gKiBJZiBjb25maWcgaXMgc3BlY2lmaWVkLCB3aWxsIHNlYXJjaCBzcGVjaWZpZWQgd2l0aCBxdWVyeSB0aW1lIGJvb3N0aW5nLlxuICpcbiAqIEFsbCBxdWVyeSB0b2tlbnMgYXJlIHBhc3NlZCB0aHJvdWdoIHRoZSBzYW1lIHBpcGVsaW5lIHRoYXQgZG9jdW1lbnQgdG9rZW5zXG4gKiBhcmUgcGFzc2VkIHRocm91Z2gsIHNvIGFueSBsYW5ndWFnZSBwcm9jZXNzaW5nIGludm9sdmVkIHdpbGwgYmUgcnVuIG9uIGV2ZXJ5XG4gKiBxdWVyeSB0ZXJtLlxuICpcbiAqIEVhY2ggcXVlcnkgdGVybSBpcyBleHBhbmRlZCwgc28gdGhhdCB0aGUgdGVybSAnaGUnIG1pZ2h0IGJlIGV4cGFuZGVkIHRvXG4gKiAnaGVsbG8nIGFuZCAnaGVscCcgaWYgdGhvc2UgdGVybXMgd2VyZSBhbHJlYWR5IGluY2x1ZGVkIGluIHRoZSBpbmRleC5cbiAqXG4gKiBNYXRjaGluZyBkb2N1bWVudHMgYXJlIHJldHVybmVkIGFzIGFuIGFycmF5IG9mIG9iamVjdHMsIGVhY2ggb2JqZWN0IGNvbnRhaW5zXG4gKiB0aGUgbWF0Y2hpbmcgZG9jdW1lbnQgcmVmLCBhcyBzZXQgZm9yIHRoaXMgaW5kZXgsIGFuZCB0aGUgc2ltaWxhcml0eSBzY29yZVxuICogZm9yIHRoaXMgZG9jdW1lbnQgYWdhaW5zdCB0aGUgcXVlcnkuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHF1ZXJ5IFRoZSBxdWVyeSB0byBzZWFyY2ggdGhlIGluZGV4IHdpdGguXG4gKiBAcGFyYW0ge0pTT059IHVzZXJDb25maWcgVGhlIHVzZXIgcXVlcnkgY29uZmlnLCBKU09OIGZvcm1hdC5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBzZWUgSW5kZXgucHJvdG90eXBlLmlkZlxuICogQHNlZSBJbmRleC5wcm90b3R5cGUuZG9jdW1lbnRWZWN0b3JcbiAqIEBtZW1iZXJPZiBJbmRleFxuICovXG5lbGFzdGljbHVuci5JbmRleC5wcm90b3R5cGUuc2VhcmNoID0gZnVuY3Rpb24gKHF1ZXJ5LCB1c2VyQ29uZmlnKSB7XG4gIGlmICghcXVlcnkpIHJldHVybiBbXTtcblxuICB2YXIgY29uZmlnU3RyID0gbnVsbDtcbiAgaWYgKHVzZXJDb25maWcgIT0gbnVsbCkge1xuICAgIGNvbmZpZ1N0ciA9IEpTT04uc3RyaW5naWZ5KHVzZXJDb25maWcpO1xuICB9XG5cbiAgdmFyIGNvbmZpZyA9IG5ldyBlbGFzdGljbHVuci5Db25maWd1cmF0aW9uKGNvbmZpZ1N0ciwgdGhpcy5nZXRGaWVsZHMoKSkuZ2V0KCk7XG5cbiAgdmFyIHF1ZXJ5VG9rZW5zID0gdGhpcy5waXBlbGluZS5ydW4oZWxhc3RpY2x1bnIudG9rZW5pemVyKHF1ZXJ5KSk7XG5cbiAgdmFyIHF1ZXJ5UmVzdWx0cyA9IHt9O1xuXG4gIGZvciAodmFyIGZpZWxkIGluIGNvbmZpZykge1xuICAgIHZhciBmaWVsZFNlYXJjaFJlc3VsdHMgPSB0aGlzLmZpZWxkU2VhcmNoKHF1ZXJ5VG9rZW5zLCBmaWVsZCwgY29uZmlnKTtcbiAgICB2YXIgZmllbGRCb29zdCA9IGNvbmZpZ1tmaWVsZF0uYm9vc3Q7XG5cbiAgICBmb3IgKHZhciBkb2NSZWYgaW4gZmllbGRTZWFyY2hSZXN1bHRzKSB7XG4gICAgICBmaWVsZFNlYXJjaFJlc3VsdHNbZG9jUmVmXSA9IGZpZWxkU2VhcmNoUmVzdWx0c1tkb2NSZWZdICogZmllbGRCb29zdDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBkb2NSZWYgaW4gZmllbGRTZWFyY2hSZXN1bHRzKSB7XG4gICAgICBpZiAoZG9jUmVmIGluIHF1ZXJ5UmVzdWx0cykge1xuICAgICAgICBxdWVyeVJlc3VsdHNbZG9jUmVmXSArPSBmaWVsZFNlYXJjaFJlc3VsdHNbZG9jUmVmXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXJ5UmVzdWx0c1tkb2NSZWZdID0gZmllbGRTZWFyY2hSZXN1bHRzW2RvY1JlZl07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgZm9yICh2YXIgZG9jUmVmIGluIHF1ZXJ5UmVzdWx0cykge1xuICAgIHJlc3VsdHMucHVzaCh7cmVmOiBkb2NSZWYsIHNjb3JlOiBxdWVyeVJlc3VsdHNbZG9jUmVmXX0pO1xuICB9XG5cbiAgcmVzdWx0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBiLnNjb3JlIC0gYS5zY29yZTsgfSk7XG4gIHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBzZWFyY2ggcXVlcnlUb2tlbnMgaW4gc3BlY2lmaWVkIGZpZWxkLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHF1ZXJ5VG9rZW5zIFRoZSBxdWVyeSB0b2tlbnMgdG8gcXVlcnkgaW4gdGhpcyBmaWVsZC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWVsZCBGaWVsZCB0byBxdWVyeSBpbi5cbiAqIEBwYXJhbSB7ZWxhc3RpY2x1bnIuQ29uZmlndXJhdGlvbn0gY29uZmlnIFRoZSB1c2VyIHF1ZXJ5IGNvbmZpZywgSlNPTiBmb3JtYXQuXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmVsYXN0aWNsdW5yLkluZGV4LnByb3RvdHlwZS5maWVsZFNlYXJjaCA9IGZ1bmN0aW9uIChxdWVyeVRva2VucywgZmllbGROYW1lLCBjb25maWcpIHtcbiAgdmFyIGJvb2xlYW5UeXBlID0gY29uZmlnW2ZpZWxkTmFtZV0uYm9vbDtcbiAgdmFyIGV4cGFuZCA9IGNvbmZpZ1tmaWVsZE5hbWVdLmV4cGFuZDtcbiAgdmFyIGJvb3N0ID0gY29uZmlnW2ZpZWxkTmFtZV0uYm9vc3Q7XG4gIHZhciBzY29yZXMgPSBudWxsO1xuICB2YXIgZG9jVG9rZW5zID0ge307XG5cbiAgLy8gRG8gbm90aGluZyBpZiB0aGUgYm9vc3QgaXMgMFxuICBpZiAoYm9vc3QgPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBxdWVyeVRva2Vucy5mb3JFYWNoKGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHZhciB0b2tlbnMgPSBbdG9rZW5dO1xuICAgIGlmIChleHBhbmQgPT0gdHJ1ZSkge1xuICAgICAgdG9rZW5zID0gdGhpcy5pbmRleFtmaWVsZE5hbWVdLmV4cGFuZFRva2VuKHRva2VuKTtcbiAgICB9XG4gICAgLy8gQ29uc2lkZXIgZXZlcnkgcXVlcnkgdG9rZW4gaW4gdHVybi4gSWYgZXhwYW5kZWQsIGVhY2ggcXVlcnkgdG9rZW5cbiAgICAvLyBjb3JyZXNwb25kcyB0byBhIHNldCBvZiB0b2tlbnMsIHdoaWNoIGlzIGFsbCB0b2tlbnMgaW4gdGhlIFxuICAgIC8vIGluZGV4IG1hdGNoaW5nIHRoZSBwYXR0ZXJuIHF1ZXJ5VG9rZW4qIC5cbiAgICAvLyBGb3IgdGhlIHNldCBvZiB0b2tlbnMgY29ycmVzcG9uZGluZyB0byBhIHF1ZXJ5IHRva2VuLCBmaW5kIGFuZCBzY29yZVxuICAgIC8vIGFsbCBtYXRjaGluZyBkb2N1bWVudHMuIFN0b3JlIHRob3NlIHNjb3JlcyBpbiBxdWVyeVRva2VuU2NvcmVzLCBcbiAgICAvLyBrZXllZCBieSBkb2NSZWYuXG4gICAgLy8gVGhlbiwgZGVwZW5kaW5nIG9uIHRoZSB2YWx1ZSBvZiBib29sZWFuVHlwZSwgY29tYmluZSB0aGUgc2NvcmVzXG4gICAgLy8gZm9yIHRoaXMgcXVlcnkgdG9rZW4gd2l0aCBwcmV2aW91cyBzY29yZXMuICBJZiBib29sZWFuVHlwZSBpcyBPUixcbiAgICAvLyB0aGVuIG1lcmdlIHRoZSBzY29yZXMgYnkgc3VtbWluZyBpbnRvIHRoZSBhY2N1bXVsYXRlZCB0b3RhbCwgYWRkaW5nXG4gICAgLy8gbmV3IGRvY3VtZW50IHNjb3JlcyBhcmUgcmVxdWlyZWQgKGVmZmVjdGl2ZWx5IGEgdW5pb24gb3BlcmF0b3IpLiBcbiAgICAvLyBJZiBib29sZWFuVHlwZSBpcyBBTkQsIGFjY3VtdWxhdGUgc2NvcmVzIG9ubHkgaWYgdGhlIGRvY3VtZW50IFxuICAgIC8vIGhhcyBwcmV2aW91c2x5IGJlZW4gc2NvcmVkIGJ5IGFub3RoZXIgcXVlcnkgdG9rZW4gKGFuIGludGVyc2VjdGlvblxuICAgIC8vIG9wZXJhdGlvbjAuIFxuICAgIC8vIEZ1cnRoZXJtb3JlLCBzaW5jZSB3aGVuIGJvb2xlYW5UeXBlIGlzIEFORCwgYWRkaXRpb25hbCBcbiAgICAvLyBxdWVyeSB0b2tlbnMgY2FuJ3QgYWRkIG5ldyBkb2N1bWVudHMgdG8gdGhlIHJlc3VsdCBzZXQsIHVzZSB0aGVcbiAgICAvLyBjdXJyZW50IGRvY3VtZW50IHNldCB0byBsaW1pdCB0aGUgcHJvY2Vzc2luZyBvZiBlYWNoIG5ldyBxdWVyeSBcbiAgICAvLyB0b2tlbiBmb3IgZWZmaWNpZW5jeSAoaS5lLiwgaW5jcmVtZW50YWwgaW50ZXJzZWN0aW9uKS5cbiAgICBcbiAgICB2YXIgcXVlcnlUb2tlblNjb3JlcyA9IHt9O1xuICAgIHRva2Vucy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBkb2NzID0gdGhpcy5pbmRleFtmaWVsZE5hbWVdLmdldERvY3Moa2V5KTtcbiAgICAgIHZhciBpZGYgPSB0aGlzLmlkZihrZXksIGZpZWxkTmFtZSk7XG4gICAgICBcbiAgICAgIGlmIChzY29yZXMgJiYgYm9vbGVhblR5cGUgPT0gJ0FORCcpIHtcbiAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UsIHdlIGNhbiBydWxlIG91dCBkb2N1bWVudHMgdGhhdCBoYXZlIGJlZW5cbiAgICAgICAgICAvLyBhbHJlYWR5IGJlZW4gZmlsdGVyZWQgb3V0IGJlY2F1c2UgdGhleSB3ZXJlbid0IHNjb3JlZFxuICAgICAgICAgIC8vIGJ5IHByZXZpb3VzIHF1ZXJ5IHRva2VuIHBhc3Nlcy5cbiAgICAgICAgICB2YXIgZmlsdGVyZWREb2NzID0ge307XG4gICAgICAgICAgZm9yICh2YXIgZG9jUmVmIGluIHNjb3Jlcykge1xuICAgICAgICAgICAgICBpZiAoZG9jUmVmIGluIGRvY3MpIHtcbiAgICAgICAgICAgICAgICAgIGZpbHRlcmVkRG9jc1tkb2NSZWZdID0gZG9jc1tkb2NSZWZdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGRvY3MgPSBmaWx0ZXJlZERvY3M7XG4gICAgICB9XG4gICAgICAvLyBvbmx5IHJlY29yZCBhcHBlYXJlZCB0b2tlbiBmb3IgcmV0cmlldmVkIGRvY3VtZW50cyBmb3IgdGhlXG4gICAgICAvLyBvcmlnaW5hbCB0b2tlbiwgbm90IGZvciBleHBhbmVkIHRva2VuLlxuICAgICAgLy8gYmVhdXNlIGZvciBkb2luZyBjb29yZE5vcm0gZm9yIGEgcmV0cmlldmVkIGRvY3VtZW50LCBjb29yZE5vcm0gb25seSBjYXJlIGhvdyBtYW55XG4gICAgICAvLyBxdWVyeSB0b2tlbiBhcHBlYXIgaW4gdGhhdCBkb2N1bWVudC5cbiAgICAgIC8vIHNvIGV4cGFuZGVkIHRva2VuIHNob3VsZCBub3QgYmUgYWRkZWQgaW50byBkb2NUb2tlbnMsIGlmIGFkZGVkLCB0aGlzIHdpbGwgcG9sbHV0ZSB0aGVcbiAgICAgIC8vIGNvb3JkTm9ybVxuICAgICAgaWYgKGtleSA9PSB0b2tlbikge1xuICAgICAgICB0aGlzLmZpZWxkU2VhcmNoU3RhdHMoZG9jVG9rZW5zLCBrZXksIGRvY3MpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBkb2NSZWYgaW4gZG9jcykge1xuICAgICAgICB2YXIgdGYgPSB0aGlzLmluZGV4W2ZpZWxkTmFtZV0uZ2V0VGVybUZyZXF1ZW5jeShrZXksIGRvY1JlZik7XG4gICAgICAgIHZhciBmaWVsZExlbmd0aCA9IHRoaXMuZG9jdW1lbnRTdG9yZS5nZXRGaWVsZExlbmd0aChkb2NSZWYsIGZpZWxkTmFtZSk7XG4gICAgICAgIHZhciBmaWVsZExlbmd0aE5vcm0gPSAxO1xuICAgICAgICBpZiAoZmllbGRMZW5ndGggIT0gMCkge1xuICAgICAgICAgIGZpZWxkTGVuZ3RoTm9ybSA9IDEgLyBNYXRoLnNxcnQoZmllbGRMZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBlbmFsaXR5ID0gMTtcbiAgICAgICAgaWYgKGtleSAhPSB0b2tlbikge1xuICAgICAgICAgIC8vIGN1cnJlbnRseSBJJ20gbm90IHN1cmUgaWYgdGhpcyBwZW5hbGl0eSBpcyBlbm91Z2gsXG4gICAgICAgICAgLy8gbmVlZCB0byBkbyB2ZXJpZmljYXRpb25cbiAgICAgICAgICBwZW5hbGl0eSA9ICgxIC0gKGtleS5sZW5ndGggLSB0b2tlbi5sZW5ndGgpIC8ga2V5Lmxlbmd0aCkgKiAwLjE1O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNjb3JlID0gdGYgKiBpZGYgKiBmaWVsZExlbmd0aE5vcm0gKiBwZW5hbGl0eTtcblxuICAgICAgICBpZiAoZG9jUmVmIGluIHF1ZXJ5VG9rZW5TY29yZXMpIHtcbiAgICAgICAgICBxdWVyeVRva2VuU2NvcmVzW2RvY1JlZl0gKz0gc2NvcmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcXVlcnlUb2tlblNjb3Jlc1tkb2NSZWZdID0gc2NvcmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB0aGlzKTtcbiAgICBcbiAgICBzY29yZXMgPSB0aGlzLm1lcmdlU2NvcmVzKHNjb3JlcywgcXVlcnlUb2tlblNjb3JlcywgYm9vbGVhblR5cGUpO1xuICB9LCB0aGlzKTtcblxuICBzY29yZXMgPSB0aGlzLmNvb3JkTm9ybShzY29yZXMsIGRvY1Rva2VucywgcXVlcnlUb2tlbnMubGVuZ3RoKTtcbiAgcmV0dXJuIHNjb3Jlcztcbn07XG5cbi8qKlxuICogTWVyZ2UgdGhlIHNjb3JlcyBmcm9tIG9uZSBzZXQgb2YgdG9rZW5zIGludG8gYW4gYWNjdW11bGF0ZWQgc2NvcmUgdGFibGUuXG4gKiBFeGFjdCBvcGVyYXRpb24gZGVwZW5kcyBvbiB0aGUgb3AgcGFyYW1ldGVyLiBJZiBvcCBpcyAnQU5EJywgdGhlbiBvbmx5IHRoZVxuICogaW50ZXJzZWN0aW9uIG9mIHRoZSB0d28gc2NvcmUgbGlzdHMgaXMgcmV0YWluZWQuIE90aGVyd2lzZSwgdGhlIHVuaW9uIG9mXG4gKiB0aGUgdHdvIHNjb3JlIGxpc3RzIGlzIHJldHVybmVkLiBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGJvb2wgYWNjdW11bGF0ZWQgc2NvcmVzLiBTaG91bGQgYmUgbnVsbCBvbiBmaXJzdCBjYWxsLlxuICogQHBhcmFtIHtTdHJpbmd9IHNjb3JlcyBuZXcgc2NvcmVzIHRvIG1lcmdlIGludG8gYWNjdW1TY29yZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gb3AgbWVyZ2Ugb3BlcmF0aW9uIChzaG91bGQgYmUgJ0FORCcgb3IgJ09SJykuXG4gKlxuICovXG5cbmVsYXN0aWNsdW5yLkluZGV4LnByb3RvdHlwZS5tZXJnZVNjb3JlcyA9IGZ1bmN0aW9uIChhY2N1bVNjb3Jlcywgc2NvcmVzLCBvcCkge1xuICAgIGlmICghYWNjdW1TY29yZXMpIHtcbiAgICAgICAgcmV0dXJuIHNjb3JlczsgXG4gICAgfVxuICAgIGlmIChvcCA9PSAnQU5EJykge1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0ge307XG4gICAgICAgIGZvciAodmFyIGRvY1JlZiBpbiBzY29yZXMpIHtcbiAgICAgICAgICAgIGlmIChkb2NSZWYgaW4gYWNjdW1TY29yZXMpIHtcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25bZG9jUmVmXSA9IGFjY3VtU2NvcmVzW2RvY1JlZl0gKyBzY29yZXNbZG9jUmVmXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGRvY1JlZiBpbiBzY29yZXMpIHtcbiAgICAgICAgICAgIGlmIChkb2NSZWYgaW4gYWNjdW1TY29yZXMpIHtcbiAgICAgICAgICAgICAgICBhY2N1bVNjb3Jlc1tkb2NSZWZdICs9IHNjb3Jlc1tkb2NSZWZdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhY2N1bVNjb3Jlc1tkb2NSZWZdID0gc2NvcmVzW2RvY1JlZl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY3VtU2NvcmVzO1xuICAgIH1cbn07XG5cblxuLyoqXG4gKiBSZWNvcmQgdGhlIG9jY3VyaW5nIHF1ZXJ5IHRva2VuIG9mIHJldHJpZXZlZCBkb2Mgc3BlY2lmaWVkIGJ5IGRvYyBmaWVsZC5cbiAqIE9ubHkgZm9yIGlubmVyIHVzZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRvY1Rva2VucyBhIGRhdGEgc3RydWN0dXJlIHN0b3JlcyB3aGljaCB0b2tlbiBhcHBlYXJzIGluIHRoZSByZXRyaWV2ZWQgZG9jLlxuICogQHBhcmFtIHtTdHJpbmd9IHRva2VuIHF1ZXJ5IHRva2VuXG4gKiBAcGFyYW0ge09iamVjdH0gZG9jcyB0aGUgcmV0cmlldmVkIGRvY3VtZW50cyBvZiB0aGUgcXVlcnkgdG9rZW5cbiAqXG4gKi9cbmVsYXN0aWNsdW5yLkluZGV4LnByb3RvdHlwZS5maWVsZFNlYXJjaFN0YXRzID0gZnVuY3Rpb24gKGRvY1Rva2VucywgdG9rZW4sIGRvY3MpIHtcbiAgZm9yICh2YXIgZG9jIGluIGRvY3MpIHtcbiAgICBpZiAoZG9jIGluIGRvY1Rva2Vucykge1xuICAgICAgZG9jVG9rZW5zW2RvY10ucHVzaCh0b2tlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY1Rva2Vuc1tkb2NdID0gW3Rva2VuXTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogY29vcmQgbm9ybSB0aGUgc2NvcmUgb2YgYSBkb2MuXG4gKiBpZiBhIGRvYyBjb250YWluIG1vcmUgcXVlcnkgdG9rZW5zLCB0aGVuIHRoZSBzY29yZSB3aWxsIGxhcmdlciB0aGFuIHRoZSBkb2NcbiAqIGNvbnRhaW5zIGxlc3MgcXVlcnkgdG9rZW5zLlxuICpcbiAqIG9ubHkgZm9yIGlubmVyIHVzZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVzdWx0cyBmaXJzdCByZXN1bHRzXG4gKiBAcGFyYW0ge09iamVjdH0gZG9jcyBmaWVsZCBzZWFyY2ggcmVzdWx0cyBvZiBhIHRva2VuXG4gKiBAcGFyYW0ge0ludGVnZXJ9IG4gcXVlcnkgdG9rZW4gbnVtYmVyXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmVsYXN0aWNsdW5yLkluZGV4LnByb3RvdHlwZS5jb29yZE5vcm0gPSBmdW5jdGlvbiAoc2NvcmVzLCBkb2NUb2tlbnMsIG4pIHtcbiAgZm9yICh2YXIgZG9jIGluIHNjb3Jlcykge1xuICAgIGlmICghKGRvYyBpbiBkb2NUb2tlbnMpKSBjb250aW51ZTtcbiAgICB2YXIgdG9rZW5zID0gZG9jVG9rZW5zW2RvY10ubGVuZ3RoO1xuICAgIHNjb3Jlc1tkb2NdID0gc2NvcmVzW2RvY10gKiB0b2tlbnMgLyBuO1xuICB9XG5cbiAgcmV0dXJuIHNjb3Jlcztcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBpbmRleCByZWFkeSBmb3Igc2VyaWFsaXNhdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAbWVtYmVyT2YgSW5kZXhcbiAqL1xuZWxhc3RpY2x1bnIuSW5kZXgucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGluZGV4SnNvbiA9IHt9O1xuICB0aGlzLl9maWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICBpbmRleEpzb25bZmllbGRdID0gdGhpcy5pbmRleFtmaWVsZF0udG9KU09OKCk7XG4gIH0sIHRoaXMpO1xuXG4gIHJldHVybiB7XG4gICAgdmVyc2lvbjogZWxhc3RpY2x1bnIudmVyc2lvbixcbiAgICBmaWVsZHM6IHRoaXMuX2ZpZWxkcyxcbiAgICByZWY6IHRoaXMuX3JlZixcbiAgICBkb2N1bWVudFN0b3JlOiB0aGlzLmRvY3VtZW50U3RvcmUudG9KU09OKCksXG4gICAgaW5kZXg6IGluZGV4SnNvbixcbiAgICBwaXBlbGluZTogdGhpcy5waXBlbGluZS50b0pTT04oKVxuICB9O1xufTtcblxuLyoqXG4gKiBBcHBsaWVzIGEgcGx1Z2luIHRvIHRoZSBjdXJyZW50IGluZGV4LlxuICpcbiAqIEEgcGx1Z2luIGlzIGEgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2l0aCB0aGUgaW5kZXggYXMgaXRzIGNvbnRleHQuXG4gKiBQbHVnaW5zIGNhbiBiZSB1c2VkIHRvIGN1c3RvbWlzZSBvciBleHRlbmQgdGhlIGJlaGF2aW91ciB0aGUgaW5kZXhcbiAqIGluIHNvbWUgd2F5LiBBIHBsdWdpbiBpcyBqdXN0IGEgZnVuY3Rpb24sIHRoYXQgZW5jYXBzdWxhdGVkIHRoZSBjdXN0b21cbiAqIGJlaGF2aW91ciB0aGF0IHNob3VsZCBiZSBhcHBsaWVkIHRvIHRoZSBpbmRleC5cbiAqXG4gKiBUaGUgcGx1Z2luIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGluZGV4IGFzIGl0cyBhcmd1bWVudCwgYWRkaXRpb25hbFxuICogYXJndW1lbnRzIGNhbiBhbHNvIGJlIHBhc3NlZCB3aGVuIGNhbGxpbmcgdXNlLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWRcbiAqIHdpdGggdGhlIGluZGV4IGFzIGl0cyBjb250ZXh0LlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIHZhciBteVBsdWdpbiA9IGZ1bmN0aW9uIChpZHgsIGFyZzEsIGFyZzIpIHtcbiAqICAgICAgIC8vIGB0aGlzYCBpcyB0aGUgaW5kZXggdG8gYmUgZXh0ZW5kZWRcbiAqICAgICAgIC8vIGFwcGx5IGFueSBleHRlbnNpb25zIGV0YyBoZXJlLlxuICogICAgIH1cbiAqXG4gKiAgICAgdmFyIGlkeCA9IGVsYXN0aWNsdW5yKGZ1bmN0aW9uICgpIHtcbiAqICAgICAgIHRoaXMudXNlKG15UGx1Z2luLCAnYXJnMScsICdhcmcyJylcbiAqICAgICB9KVxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBsdWdpbiBUaGUgcGx1Z2luIHRvIGFwcGx5LlxuICogQG1lbWJlck9mIEluZGV4XG4gKi9cbmVsYXN0aWNsdW5yLkluZGV4LnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICBwbHVnaW4uYXBwbHkodGhpcywgYXJncyk7XG59O1xuLyohXG4gKiBlbGFzdGljbHVuci5Eb2N1bWVudFN0b3JlXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgV2VpIFNvbmdcbiAqL1xuXG4vKipcbiAqIGVsYXN0aWNsdW5yLkRvY3VtZW50U3RvcmUgaXMgYSBzaW1wbGUga2V5LXZhbHVlIGRvY3VtZW50IHN0b3JlIHVzZWQgZm9yIHN0b3Jpbmcgc2V0cyBvZiB0b2tlbnMgZm9yXG4gKiBkb2N1bWVudHMgc3RvcmVkIGluIGluZGV4LlxuICpcbiAqIGVsYXN0aWNsdW5yLkRvY3VtZW50U3RvcmUgc3RvcmUgb3JpZ2luYWwgSlNPTiBmb3JtYXQgZG9jdW1lbnRzIHRoYXQgeW91IGNvdWxkIGJ1aWxkIHNlYXJjaCBzbmlwcGV0IGJ5IHRoaXMgb3JpZ2luYWwgSlNPTiBkb2N1bWVudC5cbiAqXG4gKiB1c2VyIGNvdWxkIGNob29zZSB3aGV0aGVyIG9yaWdpbmFsIEpTT04gZm9ybWF0IGRvY3VtZW50IHNob3VsZCBiZSBzdG9yZSwgaWYgbm8gY29uZmlndXJhdGlvbiB0aGVuIGRvY3VtZW50IHdpbGwgYmUgc3RvcmVkIGRlZmF1bHRseS5cbiAqIElmIHVzZXIgY2FyZSBtb3JlIGFib3V0IHRoZSBpbmRleCBzaXplLCB1c2VyIGNvdWxkIHNlbGVjdCBub3Qgc3RvcmUgSlNPTiBkb2N1bWVudHMsIHRoZW4gdGhpcyB3aWxsIGhhcyBzb21lIGRlZmVjdHMsIHN1Y2ggYXMgdXNlclxuICogY291bGQgbm90IHVzZSBKU09OIGRvY3VtZW50IHRvIGdlbmVyYXRlIHNuaXBwZXRzIG9mIHNlYXJjaCByZXN1bHRzLlxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc2F2ZSBJZiB0aGUgb3JpZ2luYWwgSlNPTiBkb2N1bWVudCBzaG91bGQgYmUgc3RvcmVkLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAbW9kdWxlXG4gKi9cbmVsYXN0aWNsdW5yLkRvY3VtZW50U3RvcmUgPSBmdW5jdGlvbiAoc2F2ZSkge1xuICBpZiAoc2F2ZSA9PT0gbnVsbCB8fCBzYXZlID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLl9zYXZlID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9zYXZlID0gc2F2ZTtcbiAgfVxuXG4gIHRoaXMuZG9jcyA9IHt9O1xuICB0aGlzLmRvY0luZm8gPSB7fTtcbiAgdGhpcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBMb2FkcyBhIHByZXZpb3VzbHkgc2VyaWFsaXNlZCBkb2N1bWVudCBzdG9yZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXJpYWxpc2VkRGF0YSBUaGUgc2VyaWFsaXNlZCBkb2N1bWVudCBzdG9yZSB0byBsb2FkLlxuICogQHJldHVybiB7ZWxhc3RpY2x1bnIuRG9jdW1lbnRTdG9yZX1cbiAqL1xuZWxhc3RpY2x1bnIuRG9jdW1lbnRTdG9yZS5sb2FkID0gZnVuY3Rpb24gKHNlcmlhbGlzZWREYXRhKSB7XG4gIHZhciBzdG9yZSA9IG5ldyB0aGlzO1xuXG4gIHN0b3JlLmxlbmd0aCA9IHNlcmlhbGlzZWREYXRhLmxlbmd0aDtcbiAgc3RvcmUuZG9jcyA9IHNlcmlhbGlzZWREYXRhLmRvY3M7XG4gIHN0b3JlLmRvY0luZm8gPSBzZXJpYWxpc2VkRGF0YS5kb2NJbmZvO1xuICBzdG9yZS5fc2F2ZSA9IHNlcmlhbGlzZWREYXRhLnNhdmU7XG5cbiAgcmV0dXJuIHN0b3JlO1xufTtcblxuLyoqXG4gKiBjaGVjayBpZiBjdXJyZW50IGluc3RhbmNlIHN0b3JlIHRoZSBvcmlnaW5hbCBkb2NcbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5lbGFzdGljbHVuci5Eb2N1bWVudFN0b3JlLnByb3RvdHlwZS5pc0RvY1N0b3JlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3NhdmU7XG59O1xuXG4vKipcbiAqIFN0b3JlcyB0aGUgZ2l2ZW4gZG9jIGluIHRoZSBkb2N1bWVudCBzdG9yZSBhZ2FpbnN0IHRoZSBnaXZlbiBpZC5cbiAqIElmIGRvY1JlZiBhbHJlYWR5IGV4aXN0LCB0aGVuIHVwZGF0ZSBkb2MuXG4gKlxuICogRG9jdW1lbnQgaXMgc3RvcmUgYnkgb3JpZ2luYWwgSlNPTiBmb3JtYXQsIHRoZW4geW91IGNvdWxkIHVzZSBvcmlnaW5hbCBkb2N1bWVudCB0byBnZW5lcmF0ZSBzZWFyY2ggc25pcHBldHMuXG4gKlxuICogQHBhcmFtIHtJbnRlZ2VyfFN0cmluZ30gZG9jUmVmIFRoZSBrZXkgdXNlZCB0byBzdG9yZSB0aGUgSlNPTiBmb3JtYXQgZG9jLlxuICogQHBhcmFtIHtPYmplY3R9IGRvYyBUaGUgSlNPTiBmb3JtYXQgZG9jLlxuICovXG5lbGFzdGljbHVuci5Eb2N1bWVudFN0b3JlLnByb3RvdHlwZS5hZGREb2MgPSBmdW5jdGlvbiAoZG9jUmVmLCBkb2MpIHtcbiAgaWYgKCF0aGlzLmhhc0RvYyhkb2NSZWYpKSB0aGlzLmxlbmd0aCsrO1xuXG4gIGlmICh0aGlzLl9zYXZlID09PSB0cnVlKSB7XG4gICAgdGhpcy5kb2NzW2RvY1JlZl0gPSBjbG9uZShkb2MpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZG9jc1tkb2NSZWZdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIEpTT04gZG9jIGZyb20gdGhlIGRvY3VtZW50IHN0b3JlIGZvciBhIGdpdmVuIGtleS5cbiAqXG4gKiBJZiBkb2NSZWYgbm90IGZvdW5kLCByZXR1cm4gbnVsbC5cbiAqIElmIHVzZXIgc2V0IG5vdCBzdG9yaW5nIHRoZSBkb2N1bWVudHMsIHJldHVybiBudWxsLlxuICpcbiAqIEBwYXJhbSB7SW50ZWdlcnxTdHJpbmd9IGRvY1JlZiBUaGUga2V5IHRvIGxvb2t1cCBhbmQgcmV0cmlldmUgZnJvbSB0aGUgZG9jdW1lbnQgc3RvcmUuXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAbWVtYmVyT2YgRG9jdW1lbnRTdG9yZVxuICovXG5lbGFzdGljbHVuci5Eb2N1bWVudFN0b3JlLnByb3RvdHlwZS5nZXREb2MgPSBmdW5jdGlvbiAoZG9jUmVmKSB7XG4gIGlmICh0aGlzLmhhc0RvYyhkb2NSZWYpID09PSBmYWxzZSkgcmV0dXJuIG51bGw7XG4gIHJldHVybiB0aGlzLmRvY3NbZG9jUmVmXTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIGRvY3VtZW50IHN0b3JlIGNvbnRhaW5zIGEga2V5IChkb2NSZWYpLlxuICpcbiAqIEBwYXJhbSB7SW50ZWdlcnxTdHJpbmd9IGRvY1JlZiBUaGUgaWQgdG8gbG9vayB1cCBpbiB0aGUgZG9jdW1lbnQgc3RvcmUuXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQG1lbWJlck9mIERvY3VtZW50U3RvcmVcbiAqL1xuZWxhc3RpY2x1bnIuRG9jdW1lbnRTdG9yZS5wcm90b3R5cGUuaGFzRG9jID0gZnVuY3Rpb24gKGRvY1JlZikge1xuICByZXR1cm4gZG9jUmVmIGluIHRoaXMuZG9jcztcbn07XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgdmFsdWUgZm9yIGEga2V5IGluIHRoZSBkb2N1bWVudCBzdG9yZS5cbiAqXG4gKiBAcGFyYW0ge0ludGVnZXJ8U3RyaW5nfSBkb2NSZWYgVGhlIGlkIHRvIHJlbW92ZSBmcm9tIHRoZSBkb2N1bWVudCBzdG9yZS5cbiAqIEBtZW1iZXJPZiBEb2N1bWVudFN0b3JlXG4gKi9cbmVsYXN0aWNsdW5yLkRvY3VtZW50U3RvcmUucHJvdG90eXBlLnJlbW92ZURvYyA9IGZ1bmN0aW9uIChkb2NSZWYpIHtcbiAgaWYgKCF0aGlzLmhhc0RvYyhkb2NSZWYpKSByZXR1cm47XG5cbiAgZGVsZXRlIHRoaXMuZG9jc1tkb2NSZWZdO1xuICBkZWxldGUgdGhpcy5kb2NJbmZvW2RvY1JlZl07XG4gIHRoaXMubGVuZ3RoLS07XG59O1xuXG4vKipcbiAqIEFkZCBmaWVsZCBsZW5ndGggb2YgYSBkb2N1bWVudCdzIGZpZWxkIHRva2VucyBmcm9tIHBpcGVsaW5lIHJlc3VsdHMuXG4gKiBUaGUgZmllbGQgbGVuZ3RoIG9mIGEgZG9jdW1lbnQgaXMgdXNlZCB0byBkbyBmaWVsZCBsZW5ndGggbm9ybWFsaXphdGlvbiBldmVuIHdpdGhvdXQgdGhlIG9yaWdpbmFsIEpTT04gZG9jdW1lbnQgc3RvcmVkLlxuICpcbiAqIEBwYXJhbSB7SW50ZWdlcnxTdHJpbmd9IGRvY1JlZiBkb2N1bWVudCdzIGlkIG9yIHJlZmVyZW5jZVxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkTmFtZSBmaWVsZCBuYW1lXG4gKiBAcGFyYW0ge0ludGVnZXJ9IGxlbmd0aCBmaWVsZCBsZW5ndGhcbiAqL1xuZWxhc3RpY2x1bnIuRG9jdW1lbnRTdG9yZS5wcm90b3R5cGUuYWRkRmllbGRMZW5ndGggPSBmdW5jdGlvbiAoZG9jUmVmLCBmaWVsZE5hbWUsIGxlbmd0aCkge1xuICBpZiAoZG9jUmVmID09PSBudWxsIHx8IGRvY1JlZiA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gIGlmICh0aGlzLmhhc0RvYyhkb2NSZWYpID09IGZhbHNlKSByZXR1cm47XG5cbiAgaWYgKCF0aGlzLmRvY0luZm9bZG9jUmVmXSkgdGhpcy5kb2NJbmZvW2RvY1JlZl0gPSB7fTtcbiAgdGhpcy5kb2NJbmZvW2RvY1JlZl1bZmllbGROYW1lXSA9IGxlbmd0aDtcbn07XG5cbi8qKlxuICogVXBkYXRlIGZpZWxkIGxlbmd0aCBvZiBhIGRvY3VtZW50J3MgZmllbGQgdG9rZW5zIGZyb20gcGlwZWxpbmUgcmVzdWx0cy5cbiAqIFRoZSBmaWVsZCBsZW5ndGggb2YgYSBkb2N1bWVudCBpcyB1c2VkIHRvIGRvIGZpZWxkIGxlbmd0aCBub3JtYWxpemF0aW9uIGV2ZW4gd2l0aG91dCB0aGUgb3JpZ2luYWwgSlNPTiBkb2N1bWVudCBzdG9yZWQuXG4gKlxuICogQHBhcmFtIHtJbnRlZ2VyfFN0cmluZ30gZG9jUmVmIGRvY3VtZW50J3MgaWQgb3IgcmVmZXJlbmNlXG4gKiBAcGFyYW0ge1N0cmluZ30gZmllbGROYW1lIGZpZWxkIG5hbWVcbiAqIEBwYXJhbSB7SW50ZWdlcn0gbGVuZ3RoIGZpZWxkIGxlbmd0aFxuICovXG5lbGFzdGljbHVuci5Eb2N1bWVudFN0b3JlLnByb3RvdHlwZS51cGRhdGVGaWVsZExlbmd0aCA9IGZ1bmN0aW9uIChkb2NSZWYsIGZpZWxkTmFtZSwgbGVuZ3RoKSB7XG4gIGlmIChkb2NSZWYgPT09IG51bGwgfHwgZG9jUmVmID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgaWYgKHRoaXMuaGFzRG9jKGRvY1JlZikgPT0gZmFsc2UpIHJldHVybjtcblxuICB0aGlzLmFkZEZpZWxkTGVuZ3RoKGRvY1JlZiwgZmllbGROYW1lLCBsZW5ndGgpO1xufTtcblxuLyoqXG4gKiBnZXQgZmllbGQgbGVuZ3RoIG9mIGEgZG9jdW1lbnQgYnkgZG9jUmVmXG4gKlxuICogQHBhcmFtIHtJbnRlZ2VyfFN0cmluZ30gZG9jUmVmIGRvY3VtZW50IGlkIG9yIHJlZmVyZW5jZVxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkTmFtZSBmaWVsZCBuYW1lXG4gKiBAcmV0dXJuIHtJbnRlZ2VyfSBmaWVsZCBsZW5ndGhcbiAqL1xuZWxhc3RpY2x1bnIuRG9jdW1lbnRTdG9yZS5wcm90b3R5cGUuZ2V0RmllbGRMZW5ndGggPSBmdW5jdGlvbiAoZG9jUmVmLCBmaWVsZE5hbWUpIHtcbiAgaWYgKGRvY1JlZiA9PT0gbnVsbCB8fCBkb2NSZWYgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG5cbiAgaWYgKCEoZG9jUmVmIGluIHRoaXMuZG9jcykpIHJldHVybiAwO1xuICBpZiAoIShmaWVsZE5hbWUgaW4gdGhpcy5kb2NJbmZvW2RvY1JlZl0pKSByZXR1cm4gMDtcbiAgcmV0dXJuIHRoaXMuZG9jSW5mb1tkb2NSZWZdW2ZpZWxkTmFtZV07XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkb2N1bWVudCBzdG9yZSB1c2VkIGZvciBzZXJpYWxpc2F0aW9uLlxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gSlNPTiBmb3JtYXRcbiAqIEBtZW1iZXJPZiBEb2N1bWVudFN0b3JlXG4gKi9cbmVsYXN0aWNsdW5yLkRvY3VtZW50U3RvcmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBkb2NzOiB0aGlzLmRvY3MsXG4gICAgZG9jSW5mbzogdGhpcy5kb2NJbmZvLFxuICAgIGxlbmd0aDogdGhpcy5sZW5ndGgsXG4gICAgc2F2ZTogdGhpcy5fc2F2ZVxuICB9O1xufTtcblxuLyoqXG4gKiBDbG9uaW5nIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgaW4gSlNPTiBmb3JtYXRcbiAqIEByZXR1cm4ge09iamVjdH0gY29waWVkIG9iamVjdFxuICovXG5mdW5jdGlvbiBjbG9uZShvYmopIHtcbiAgaWYgKG51bGwgPT09IG9iaiB8fCBcIm9iamVjdFwiICE9PSB0eXBlb2Ygb2JqKSByZXR1cm4gb2JqO1xuXG4gIHZhciBjb3B5ID0gb2JqLmNvbnN0cnVjdG9yKCk7XG5cbiAgZm9yICh2YXIgYXR0ciBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGF0dHIpKSBjb3B5W2F0dHJdID0gb2JqW2F0dHJdO1xuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59XG4vKiFcbiAqIGVsYXN0aWNsdW5yLnN0ZW1tZXJcbiAqIENvcHlyaWdodCAoQykgMjAxNiBPbGl2ZXIgTmlnaHRpbmdhbGVcbiAqIENvcHlyaWdodCAoQykgMjAxNiBXZWkgU29uZ1xuICogSW5jbHVkZXMgY29kZSBmcm9tIC0gaHR0cDovL3RhcnRhcnVzLm9yZy9+bWFydGluL1BvcnRlclN0ZW1tZXIvanMudHh0XG4gKi9cblxuLyoqXG4gKiBlbGFzdGljbHVuci5zdGVtbWVyIGlzIGFuIGVuZ2xpc2ggbGFuZ3VhZ2Ugc3RlbW1lciwgdGhpcyBpcyBhIEphdmFTY3JpcHRcbiAqIGltcGxlbWVudGF0aW9uIG9mIHRoZSBQb3J0ZXJTdGVtbWVyIHRha2VuIGZyb20gaHR0cDovL3RhcnRhcnVzLm9yZy9+bWFydGluXG4gKlxuICogQG1vZHVsZVxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIHN0ZW1cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBzZWUgZWxhc3RpY2x1bnIuUGlwZWxpbmVcbiAqL1xuZWxhc3RpY2x1bnIuc3RlbW1lciA9IChmdW5jdGlvbigpe1xuICB2YXIgc3RlcDJsaXN0ID0ge1xuICAgICAgXCJhdGlvbmFsXCIgOiBcImF0ZVwiLFxuICAgICAgXCJ0aW9uYWxcIiA6IFwidGlvblwiLFxuICAgICAgXCJlbmNpXCIgOiBcImVuY2VcIixcbiAgICAgIFwiYW5jaVwiIDogXCJhbmNlXCIsXG4gICAgICBcIml6ZXJcIiA6IFwiaXplXCIsXG4gICAgICBcImJsaVwiIDogXCJibGVcIixcbiAgICAgIFwiYWxsaVwiIDogXCJhbFwiLFxuICAgICAgXCJlbnRsaVwiIDogXCJlbnRcIixcbiAgICAgIFwiZWxpXCIgOiBcImVcIixcbiAgICAgIFwib3VzbGlcIiA6IFwib3VzXCIsXG4gICAgICBcIml6YXRpb25cIiA6IFwiaXplXCIsXG4gICAgICBcImF0aW9uXCIgOiBcImF0ZVwiLFxuICAgICAgXCJhdG9yXCIgOiBcImF0ZVwiLFxuICAgICAgXCJhbGlzbVwiIDogXCJhbFwiLFxuICAgICAgXCJpdmVuZXNzXCIgOiBcIml2ZVwiLFxuICAgICAgXCJmdWxuZXNzXCIgOiBcImZ1bFwiLFxuICAgICAgXCJvdXNuZXNzXCIgOiBcIm91c1wiLFxuICAgICAgXCJhbGl0aVwiIDogXCJhbFwiLFxuICAgICAgXCJpdml0aVwiIDogXCJpdmVcIixcbiAgICAgIFwiYmlsaXRpXCIgOiBcImJsZVwiLFxuICAgICAgXCJsb2dpXCIgOiBcImxvZ1wiXG4gICAgfSxcblxuICAgIHN0ZXAzbGlzdCA9IHtcbiAgICAgIFwiaWNhdGVcIiA6IFwiaWNcIixcbiAgICAgIFwiYXRpdmVcIiA6IFwiXCIsXG4gICAgICBcImFsaXplXCIgOiBcImFsXCIsXG4gICAgICBcImljaXRpXCIgOiBcImljXCIsXG4gICAgICBcImljYWxcIiA6IFwiaWNcIixcbiAgICAgIFwiZnVsXCIgOiBcIlwiLFxuICAgICAgXCJuZXNzXCIgOiBcIlwiXG4gICAgfSxcblxuICAgIGMgPSBcIlteYWVpb3VdXCIsICAgICAgICAgIC8vIGNvbnNvbmFudFxuICAgIHYgPSBcIlthZWlvdXldXCIsICAgICAgICAgIC8vIHZvd2VsXG4gICAgQyA9IGMgKyBcIlteYWVpb3V5XSpcIiwgICAgLy8gY29uc29uYW50IHNlcXVlbmNlXG4gICAgViA9IHYgKyBcIlthZWlvdV0qXCIsICAgICAgLy8gdm93ZWwgc2VxdWVuY2VcblxuICAgIG1ncjAgPSBcIl4oXCIgKyBDICsgXCIpP1wiICsgViArIEMsICAgICAgICAgICAgICAgLy8gW0NdVkMuLi4gaXMgbT4wXG4gICAgbWVxMSA9IFwiXihcIiArIEMgKyBcIik/XCIgKyBWICsgQyArIFwiKFwiICsgViArIFwiKT8kXCIsICAvLyBbQ11WQ1tWXSBpcyBtPTFcbiAgICBtZ3IxID0gXCJeKFwiICsgQyArIFwiKT9cIiArIFYgKyBDICsgViArIEMsICAgICAgIC8vIFtDXVZDVkMuLi4gaXMgbT4xXG4gICAgc192ID0gXCJeKFwiICsgQyArIFwiKT9cIiArIHY7ICAgICAgICAgICAgICAgICAgIC8vIHZvd2VsIGluIHN0ZW1cblxuICB2YXIgcmVfbWdyMCA9IG5ldyBSZWdFeHAobWdyMCk7XG4gIHZhciByZV9tZ3IxID0gbmV3IFJlZ0V4cChtZ3IxKTtcbiAgdmFyIHJlX21lcTEgPSBuZXcgUmVnRXhwKG1lcTEpO1xuICB2YXIgcmVfc192ID0gbmV3IFJlZ0V4cChzX3YpO1xuXG4gIHZhciByZV8xYSA9IC9eKC4rPykoc3N8aSllcyQvO1xuICB2YXIgcmUyXzFhID0gL14oLis/KShbXnNdKXMkLztcbiAgdmFyIHJlXzFiID0gL14oLis/KWVlZCQvO1xuICB2YXIgcmUyXzFiID0gL14oLis/KShlZHxpbmcpJC87XG4gIHZhciByZV8xYl8yID0gLy4kLztcbiAgdmFyIHJlMl8xYl8yID0gLyhhdHxibHxpeikkLztcbiAgdmFyIHJlM18xYl8yID0gbmV3IFJlZ0V4cChcIihbXmFlaW91eWxzel0pXFxcXDEkXCIpO1xuICB2YXIgcmU0XzFiXzIgPSBuZXcgUmVnRXhwKFwiXlwiICsgQyArIHYgKyBcIlteYWVpb3V3eHldJFwiKTtcblxuICB2YXIgcmVfMWMgPSAvXiguKz9bXmFlaW91XSl5JC87XG4gIHZhciByZV8yID0gL14oLis/KShhdGlvbmFsfHRpb25hbHxlbmNpfGFuY2l8aXplcnxibGl8YWxsaXxlbnRsaXxlbGl8b3VzbGl8aXphdGlvbnxhdGlvbnxhdG9yfGFsaXNtfGl2ZW5lc3N8ZnVsbmVzc3xvdXNuZXNzfGFsaXRpfGl2aXRpfGJpbGl0aXxsb2dpKSQvO1xuXG4gIHZhciByZV8zID0gL14oLis/KShpY2F0ZXxhdGl2ZXxhbGl6ZXxpY2l0aXxpY2FsfGZ1bHxuZXNzKSQvO1xuXG4gIHZhciByZV80ID0gL14oLis/KShhbHxhbmNlfGVuY2V8ZXJ8aWN8YWJsZXxpYmxlfGFudHxlbWVudHxtZW50fGVudHxvdXxpc218YXRlfGl0aXxvdXN8aXZlfGl6ZSkkLztcbiAgdmFyIHJlMl80ID0gL14oLis/KShzfHQpKGlvbikkLztcblxuICB2YXIgcmVfNSA9IC9eKC4rPyllJC87XG4gIHZhciByZV81XzEgPSAvbGwkLztcbiAgdmFyIHJlM181ID0gbmV3IFJlZ0V4cChcIl5cIiArIEMgKyB2ICsgXCJbXmFlaW91d3h5XSRcIik7XG5cbiAgdmFyIHBvcnRlclN0ZW1tZXIgPSBmdW5jdGlvbiBwb3J0ZXJTdGVtbWVyKHcpIHtcbiAgICB2YXIgICBzdGVtLFxuICAgICAgc3VmZml4LFxuICAgICAgZmlyc3RjaCxcbiAgICAgIHJlLFxuICAgICAgcmUyLFxuICAgICAgcmUzLFxuICAgICAgcmU0O1xuXG4gICAgaWYgKHcubGVuZ3RoIDwgMykgeyByZXR1cm4gdzsgfVxuXG4gICAgZmlyc3RjaCA9IHcuc3Vic3RyKDAsMSk7XG4gICAgaWYgKGZpcnN0Y2ggPT0gXCJ5XCIpIHtcbiAgICAgIHcgPSBmaXJzdGNoLnRvVXBwZXJDYXNlKCkgKyB3LnN1YnN0cigxKTtcbiAgICB9XG5cbiAgICAvLyBTdGVwIDFhXG4gICAgcmUgPSByZV8xYVxuICAgIHJlMiA9IHJlMl8xYTtcblxuICAgIGlmIChyZS50ZXN0KHcpKSB7IHcgPSB3LnJlcGxhY2UocmUsXCIkMSQyXCIpOyB9XG4gICAgZWxzZSBpZiAocmUyLnRlc3QodykpIHsgdyA9IHcucmVwbGFjZShyZTIsXCIkMSQyXCIpOyB9XG5cbiAgICAvLyBTdGVwIDFiXG4gICAgcmUgPSByZV8xYjtcbiAgICByZTIgPSByZTJfMWI7XG4gICAgaWYgKHJlLnRlc3QodykpIHtcbiAgICAgIHZhciBmcCA9IHJlLmV4ZWModyk7XG4gICAgICByZSA9IHJlX21ncjA7XG4gICAgICBpZiAocmUudGVzdChmcFsxXSkpIHtcbiAgICAgICAgcmUgPSByZV8xYl8yO1xuICAgICAgICB3ID0gdy5yZXBsYWNlKHJlLFwiXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocmUyLnRlc3QodykpIHtcbiAgICAgIHZhciBmcCA9IHJlMi5leGVjKHcpO1xuICAgICAgc3RlbSA9IGZwWzFdO1xuICAgICAgcmUyID0gcmVfc192O1xuICAgICAgaWYgKHJlMi50ZXN0KHN0ZW0pKSB7XG4gICAgICAgIHcgPSBzdGVtO1xuICAgICAgICByZTIgPSByZTJfMWJfMjtcbiAgICAgICAgcmUzID0gcmUzXzFiXzI7XG4gICAgICAgIHJlNCA9IHJlNF8xYl8yO1xuICAgICAgICBpZiAocmUyLnRlc3QodykpIHsgIHcgPSB3ICsgXCJlXCI7IH1cbiAgICAgICAgZWxzZSBpZiAocmUzLnRlc3QodykpIHsgcmUgPSByZV8xYl8yOyB3ID0gdy5yZXBsYWNlKHJlLFwiXCIpOyB9XG4gICAgICAgIGVsc2UgaWYgKHJlNC50ZXN0KHcpKSB7IHcgPSB3ICsgXCJlXCI7IH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTdGVwIDFjIC0gcmVwbGFjZSBzdWZmaXggeSBvciBZIGJ5IGkgaWYgcHJlY2VkZWQgYnkgYSBub24tdm93ZWwgd2hpY2ggaXMgbm90IHRoZSBmaXJzdCBsZXR0ZXIgb2YgdGhlIHdvcmQgKHNvIGNyeSAtPiBjcmksIGJ5IC0+IGJ5LCBzYXkgLT4gc2F5KVxuICAgIHJlID0gcmVfMWM7XG4gICAgaWYgKHJlLnRlc3QodykpIHtcbiAgICAgIHZhciBmcCA9IHJlLmV4ZWModyk7XG4gICAgICBzdGVtID0gZnBbMV07XG4gICAgICB3ID0gc3RlbSArIFwiaVwiO1xuICAgIH1cblxuICAgIC8vIFN0ZXAgMlxuICAgIHJlID0gcmVfMjtcbiAgICBpZiAocmUudGVzdCh3KSkge1xuICAgICAgdmFyIGZwID0gcmUuZXhlYyh3KTtcbiAgICAgIHN0ZW0gPSBmcFsxXTtcbiAgICAgIHN1ZmZpeCA9IGZwWzJdO1xuICAgICAgcmUgPSByZV9tZ3IwO1xuICAgICAgaWYgKHJlLnRlc3Qoc3RlbSkpIHtcbiAgICAgICAgdyA9IHN0ZW0gKyBzdGVwMmxpc3Rbc3VmZml4XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTdGVwIDNcbiAgICByZSA9IHJlXzM7XG4gICAgaWYgKHJlLnRlc3QodykpIHtcbiAgICAgIHZhciBmcCA9IHJlLmV4ZWModyk7XG4gICAgICBzdGVtID0gZnBbMV07XG4gICAgICBzdWZmaXggPSBmcFsyXTtcbiAgICAgIHJlID0gcmVfbWdyMDtcbiAgICAgIGlmIChyZS50ZXN0KHN0ZW0pKSB7XG4gICAgICAgIHcgPSBzdGVtICsgc3RlcDNsaXN0W3N1ZmZpeF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU3RlcCA0XG4gICAgcmUgPSByZV80O1xuICAgIHJlMiA9IHJlMl80O1xuICAgIGlmIChyZS50ZXN0KHcpKSB7XG4gICAgICB2YXIgZnAgPSByZS5leGVjKHcpO1xuICAgICAgc3RlbSA9IGZwWzFdO1xuICAgICAgcmUgPSByZV9tZ3IxO1xuICAgICAgaWYgKHJlLnRlc3Qoc3RlbSkpIHtcbiAgICAgICAgdyA9IHN0ZW07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChyZTIudGVzdCh3KSkge1xuICAgICAgdmFyIGZwID0gcmUyLmV4ZWModyk7XG4gICAgICBzdGVtID0gZnBbMV0gKyBmcFsyXTtcbiAgICAgIHJlMiA9IHJlX21ncjE7XG4gICAgICBpZiAocmUyLnRlc3Qoc3RlbSkpIHtcbiAgICAgICAgdyA9IHN0ZW07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU3RlcCA1XG4gICAgcmUgPSByZV81O1xuICAgIGlmIChyZS50ZXN0KHcpKSB7XG4gICAgICB2YXIgZnAgPSByZS5leGVjKHcpO1xuICAgICAgc3RlbSA9IGZwWzFdO1xuICAgICAgcmUgPSByZV9tZ3IxO1xuICAgICAgcmUyID0gcmVfbWVxMTtcbiAgICAgIHJlMyA9IHJlM181O1xuICAgICAgaWYgKHJlLnRlc3Qoc3RlbSkgfHwgKHJlMi50ZXN0KHN0ZW0pICYmICEocmUzLnRlc3Qoc3RlbSkpKSkge1xuICAgICAgICB3ID0gc3RlbTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZSA9IHJlXzVfMTtcbiAgICByZTIgPSByZV9tZ3IxO1xuICAgIGlmIChyZS50ZXN0KHcpICYmIHJlMi50ZXN0KHcpKSB7XG4gICAgICByZSA9IHJlXzFiXzI7XG4gICAgICB3ID0gdy5yZXBsYWNlKHJlLFwiXCIpO1xuICAgIH1cblxuICAgIC8vIGFuZCB0dXJuIGluaXRpYWwgWSBiYWNrIHRvIHlcblxuICAgIGlmIChmaXJzdGNoID09IFwieVwiKSB7XG4gICAgICB3ID0gZmlyc3RjaC50b0xvd2VyQ2FzZSgpICsgdy5zdWJzdHIoMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHc7XG4gIH07XG5cbiAgcmV0dXJuIHBvcnRlclN0ZW1tZXI7XG59KSgpO1xuXG5lbGFzdGljbHVuci5QaXBlbGluZS5yZWdpc3RlckZ1bmN0aW9uKGVsYXN0aWNsdW5yLnN0ZW1tZXIsICdzdGVtbWVyJyk7XG4vKiFcbiAqIGVsYXN0aWNsdW5yLnN0b3BXb3JkRmlsdGVyXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgT2xpdmVyIE5pZ2h0aW5nYWxlXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgV2VpIFNvbmdcbiAqL1xuXG4vKipcbiAqIGVsYXN0aWNsdW5yLnN0b3BXb3JkRmlsdGVyIGlzIGFuIEVuZ2xpc2ggbGFuZ3VhZ2Ugc3RvcCB3b3JkcyBmaWx0ZXIsIGFueSB3b3Jkc1xuICogY29udGFpbmVkIGluIHRoZSBzdG9wIHdvcmQgbGlzdCB3aWxsIG5vdCBiZSBwYXNzZWQgdGhyb3VnaCB0aGUgZmlsdGVyLlxuICpcbiAqIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBpbiB0aGUgUGlwZWxpbmUuIElmIHRoZSB0b2tlbiBkb2VzIG5vdCBwYXNzIHRoZVxuICogZmlsdGVyIHRoZW4gdW5kZWZpbmVkIHdpbGwgYmUgcmV0dXJuZWQuXG4gKiBDdXJyZW50bHkgdGhpcyBTdG9wd29yZEZpbHRlciB1c2luZyBkaWN0aW9uYXJ5IHRvIGRvIE8oMSkgdGltZSBjb21wbGV4aXR5IHN0b3Agd29yZCBmaWx0ZXJpbmcuXG4gKlxuICogQG1vZHVsZVxuICogQHBhcmFtIHtTdHJpbmd9IHRva2VuIFRoZSB0b2tlbiB0byBwYXNzIHRocm91Z2ggdGhlIGZpbHRlclxuICogQHJldHVybiB7U3RyaW5nfVxuICogQHNlZSBlbGFzdGljbHVuci5QaXBlbGluZVxuICovXG5lbGFzdGljbHVuci5zdG9wV29yZEZpbHRlciA9IGZ1bmN0aW9uICh0b2tlbikge1xuICBpZiAodG9rZW4gJiYgZWxhc3RpY2x1bnIuc3RvcFdvcmRGaWx0ZXIuc3RvcFdvcmRzW3Rva2VuXSAhPT0gdHJ1ZSkge1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgcHJlZGVmaW5lZCBzdG9wIHdvcmRzXG4gKiBpZiB1c2VyIHdhbnQgdG8gdXNlIGN1c3RvbWl6ZWQgc3RvcCB3b3JkcywgdXNlciBjb3VsZCB1c2UgdGhpcyBmdW5jdGlvbiB0byBkZWxldGVcbiAqIGFsbCBwcmVkZWZpbmVkIHN0b3B3b3Jkcy5cbiAqXG4gKiBAcmV0dXJuIHtudWxsfVxuICovXG5lbGFzdGljbHVuci5jbGVhclN0b3BXb3JkcyA9IGZ1bmN0aW9uICgpIHtcbiAgZWxhc3RpY2x1bnIuc3RvcFdvcmRGaWx0ZXIuc3RvcFdvcmRzID0ge307XG59O1xuXG4vKipcbiAqIEFkZCBjdXN0b21pemVkIHN0b3Agd29yZHNcbiAqIHVzZXIgY291bGQgdXNlIHRoaXMgZnVuY3Rpb24gdG8gYWRkIGN1c3RvbWl6ZWQgc3RvcCB3b3Jkc1xuICogXG4gKiBAcGFyYW1zIHtBcnJheX0gd29yZHMgY3VzdG9taXplZCBzdG9wIHdvcmRzXG4gKiBAcmV0dXJuIHtudWxsfVxuICovXG5lbGFzdGljbHVuci5hZGRTdG9wV29yZHMgPSBmdW5jdGlvbiAod29yZHMpIHtcbiAgaWYgKHdvcmRzID09IG51bGwgfHwgQXJyYXkuaXNBcnJheSh3b3JkcykgPT09IGZhbHNlKSByZXR1cm47XG5cbiAgd29yZHMuZm9yRWFjaChmdW5jdGlvbiAod29yZCkge1xuICAgIGVsYXN0aWNsdW5yLnN0b3BXb3JkRmlsdGVyLnN0b3BXb3Jkc1t3b3JkXSA9IHRydWU7XG4gIH0sIHRoaXMpO1xufTtcblxuLyoqXG4gKiBSZXNldCB0byBkZWZhdWx0IHN0b3Agd29yZHNcbiAqIHVzZXIgY291bGQgdXNlIHRoaXMgZnVuY3Rpb24gdG8gcmVzdG9yZSBkZWZhdWx0IHN0b3Agd29yZHNcbiAqXG4gKiBAcmV0dXJuIHtudWxsfVxuICovXG5lbGFzdGljbHVuci5yZXNldFN0b3BXb3JkcyA9IGZ1bmN0aW9uICgpIHtcbiAgZWxhc3RpY2x1bnIuc3RvcFdvcmRGaWx0ZXIuc3RvcFdvcmRzID0gZWxhc3RpY2x1bnIuZGVmYXVsdFN0b3BXb3Jkcztcbn07XG5cbmVsYXN0aWNsdW5yLmRlZmF1bHRTdG9wV29yZHMgPSB7XG4gIFwiXCI6IHRydWUsXG4gIFwiYVwiOiB0cnVlLFxuICBcImFibGVcIjogdHJ1ZSxcbiAgXCJhYm91dFwiOiB0cnVlLFxuICBcImFjcm9zc1wiOiB0cnVlLFxuICBcImFmdGVyXCI6IHRydWUsXG4gIFwiYWxsXCI6IHRydWUsXG4gIFwiYWxtb3N0XCI6IHRydWUsXG4gIFwiYWxzb1wiOiB0cnVlLFxuICBcImFtXCI6IHRydWUsXG4gIFwiYW1vbmdcIjogdHJ1ZSxcbiAgXCJhblwiOiB0cnVlLFxuICBcImFuZFwiOiB0cnVlLFxuICBcImFueVwiOiB0cnVlLFxuICBcImFyZVwiOiB0cnVlLFxuICBcImFzXCI6IHRydWUsXG4gIFwiYXRcIjogdHJ1ZSxcbiAgXCJiZVwiOiB0cnVlLFxuICBcImJlY2F1c2VcIjogdHJ1ZSxcbiAgXCJiZWVuXCI6IHRydWUsXG4gIFwiYnV0XCI6IHRydWUsXG4gIFwiYnlcIjogdHJ1ZSxcbiAgXCJjYW5cIjogdHJ1ZSxcbiAgXCJjYW5ub3RcIjogdHJ1ZSxcbiAgXCJjb3VsZFwiOiB0cnVlLFxuICBcImRlYXJcIjogdHJ1ZSxcbiAgXCJkaWRcIjogdHJ1ZSxcbiAgXCJkb1wiOiB0cnVlLFxuICBcImRvZXNcIjogdHJ1ZSxcbiAgXCJlaXRoZXJcIjogdHJ1ZSxcbiAgXCJlbHNlXCI6IHRydWUsXG4gIFwiZXZlclwiOiB0cnVlLFxuICBcImV2ZXJ5XCI6IHRydWUsXG4gIFwiZm9yXCI6IHRydWUsXG4gIFwiZnJvbVwiOiB0cnVlLFxuICBcImdldFwiOiB0cnVlLFxuICBcImdvdFwiOiB0cnVlLFxuICBcImhhZFwiOiB0cnVlLFxuICBcImhhc1wiOiB0cnVlLFxuICBcImhhdmVcIjogdHJ1ZSxcbiAgXCJoZVwiOiB0cnVlLFxuICBcImhlclwiOiB0cnVlLFxuICBcImhlcnNcIjogdHJ1ZSxcbiAgXCJoaW1cIjogdHJ1ZSxcbiAgXCJoaXNcIjogdHJ1ZSxcbiAgXCJob3dcIjogdHJ1ZSxcbiAgXCJob3dldmVyXCI6IHRydWUsXG4gIFwiaVwiOiB0cnVlLFxuICBcImlmXCI6IHRydWUsXG4gIFwiaW5cIjogdHJ1ZSxcbiAgXCJpbnRvXCI6IHRydWUsXG4gIFwiaXNcIjogdHJ1ZSxcbiAgXCJpdFwiOiB0cnVlLFxuICBcIml0c1wiOiB0cnVlLFxuICBcImp1c3RcIjogdHJ1ZSxcbiAgXCJsZWFzdFwiOiB0cnVlLFxuICBcImxldFwiOiB0cnVlLFxuICBcImxpa2VcIjogdHJ1ZSxcbiAgXCJsaWtlbHlcIjogdHJ1ZSxcbiAgXCJtYXlcIjogdHJ1ZSxcbiAgXCJtZVwiOiB0cnVlLFxuICBcIm1pZ2h0XCI6IHRydWUsXG4gIFwibW9zdFwiOiB0cnVlLFxuICBcIm11c3RcIjogdHJ1ZSxcbiAgXCJteVwiOiB0cnVlLFxuICBcIm5laXRoZXJcIjogdHJ1ZSxcbiAgXCJub1wiOiB0cnVlLFxuICBcIm5vclwiOiB0cnVlLFxuICBcIm5vdFwiOiB0cnVlLFxuICBcIm9mXCI6IHRydWUsXG4gIFwib2ZmXCI6IHRydWUsXG4gIFwib2Z0ZW5cIjogdHJ1ZSxcbiAgXCJvblwiOiB0cnVlLFxuICBcIm9ubHlcIjogdHJ1ZSxcbiAgXCJvclwiOiB0cnVlLFxuICBcIm90aGVyXCI6IHRydWUsXG4gIFwib3VyXCI6IHRydWUsXG4gIFwib3duXCI6IHRydWUsXG4gIFwicmF0aGVyXCI6IHRydWUsXG4gIFwic2FpZFwiOiB0cnVlLFxuICBcInNheVwiOiB0cnVlLFxuICBcInNheXNcIjogdHJ1ZSxcbiAgXCJzaGVcIjogdHJ1ZSxcbiAgXCJzaG91bGRcIjogdHJ1ZSxcbiAgXCJzaW5jZVwiOiB0cnVlLFxuICBcInNvXCI6IHRydWUsXG4gIFwic29tZVwiOiB0cnVlLFxuICBcInRoYW5cIjogdHJ1ZSxcbiAgXCJ0aGF0XCI6IHRydWUsXG4gIFwidGhlXCI6IHRydWUsXG4gIFwidGhlaXJcIjogdHJ1ZSxcbiAgXCJ0aGVtXCI6IHRydWUsXG4gIFwidGhlblwiOiB0cnVlLFxuICBcInRoZXJlXCI6IHRydWUsXG4gIFwidGhlc2VcIjogdHJ1ZSxcbiAgXCJ0aGV5XCI6IHRydWUsXG4gIFwidGhpc1wiOiB0cnVlLFxuICBcInRpc1wiOiB0cnVlLFxuICBcInRvXCI6IHRydWUsXG4gIFwidG9vXCI6IHRydWUsXG4gIFwidHdhc1wiOiB0cnVlLFxuICBcInVzXCI6IHRydWUsXG4gIFwid2FudHNcIjogdHJ1ZSxcbiAgXCJ3YXNcIjogdHJ1ZSxcbiAgXCJ3ZVwiOiB0cnVlLFxuICBcIndlcmVcIjogdHJ1ZSxcbiAgXCJ3aGF0XCI6IHRydWUsXG4gIFwid2hlblwiOiB0cnVlLFxuICBcIndoZXJlXCI6IHRydWUsXG4gIFwid2hpY2hcIjogdHJ1ZSxcbiAgXCJ3aGlsZVwiOiB0cnVlLFxuICBcIndob1wiOiB0cnVlLFxuICBcIndob21cIjogdHJ1ZSxcbiAgXCJ3aHlcIjogdHJ1ZSxcbiAgXCJ3aWxsXCI6IHRydWUsXG4gIFwid2l0aFwiOiB0cnVlLFxuICBcIndvdWxkXCI6IHRydWUsXG4gIFwieWV0XCI6IHRydWUsXG4gIFwieW91XCI6IHRydWUsXG4gIFwieW91clwiOiB0cnVlXG59O1xuXG5lbGFzdGljbHVuci5zdG9wV29yZEZpbHRlci5zdG9wV29yZHMgPSBlbGFzdGljbHVuci5kZWZhdWx0U3RvcFdvcmRzO1xuXG5lbGFzdGljbHVuci5QaXBlbGluZS5yZWdpc3RlckZ1bmN0aW9uKGVsYXN0aWNsdW5yLnN0b3BXb3JkRmlsdGVyLCAnc3RvcFdvcmRGaWx0ZXInKTtcbi8qIVxuICogZWxhc3RpY2x1bnIudHJpbW1lclxuICogQ29weXJpZ2h0IChDKSAyMDE2IE9saXZlciBOaWdodGluZ2FsZVxuICogQ29weXJpZ2h0IChDKSAyMDE2IFdlaSBTb25nXG4gKi9cblxuLyoqXG4gKiBlbGFzdGljbHVuci50cmltbWVyIGlzIGEgcGlwZWxpbmUgZnVuY3Rpb24gZm9yIHRyaW1taW5nIG5vbiB3b3JkXG4gKiBjaGFyYWN0ZXJzIGZyb20gdGhlIGJlZ2luaW5nIGFuZCBlbmQgb2YgdG9rZW5zIGJlZm9yZSB0aGV5XG4gKiBlbnRlciB0aGUgaW5kZXguXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBtYXkgbm90IHdvcmsgY29ycmVjdGx5IGZvciBub24gbGF0aW5cbiAqIGNoYXJhY3RlcnMgYW5kIHNob3VsZCBlaXRoZXIgYmUgcmVtb3ZlZCBvciBhZGFwdGVkIGZvciB1c2VcbiAqIHdpdGggbGFuZ3VhZ2VzIHdpdGggbm9uLWxhdGluIGNoYXJhY3RlcnMuXG4gKlxuICogQG1vZHVsZVxuICogQHBhcmFtIHtTdHJpbmd9IHRva2VuIFRoZSB0b2tlbiB0byBwYXNzIHRocm91Z2ggdGhlIGZpbHRlclxuICogQHJldHVybiB7U3RyaW5nfVxuICogQHNlZSBlbGFzdGljbHVuci5QaXBlbGluZVxuICovXG5lbGFzdGljbHVuci50cmltbWVyID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gIGlmICh0b2tlbiA9PT0gbnVsbCB8fCB0b2tlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0b2tlbiBzaG91bGQgbm90IGJlIHVuZGVmaW5lZCcpO1xuICB9XG5cbiAgcmV0dXJuIHRva2VuXG4gICAgLnJlcGxhY2UoL15cXFcrLywgJycpXG4gICAgLnJlcGxhY2UoL1xcVyskLywgJycpO1xufTtcblxuZWxhc3RpY2x1bnIuUGlwZWxpbmUucmVnaXN0ZXJGdW5jdGlvbihlbGFzdGljbHVuci50cmltbWVyLCAndHJpbW1lcicpO1xuLyohXG4gKiBlbGFzdGljbHVuci5JbnZlcnRlZEluZGV4XG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgV2VpIFNvbmdcbiAqIEluY2x1ZGVzIGNvZGUgZnJvbSAtIGh0dHA6Ly90YXJ0YXJ1cy5vcmcvfm1hcnRpbi9Qb3J0ZXJTdGVtbWVyL2pzLnR4dFxuICovXG5cbi8qKlxuICogZWxhc3RpY2x1bnIuSW52ZXJ0ZWRJbmRleCBpcyB1c2VkIGZvciBlZmZpY2llbnRseSBzdG9yaW5nIGFuZFxuICogbG9va3VwIG9mIGRvY3VtZW50cyB0aGF0IGNvbnRhaW4gYSBnaXZlbiB0b2tlbi5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZWxhc3RpY2x1bnIuSW52ZXJ0ZWRJbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yb290ID0geyBkb2NzOiB7fSwgZGY6IDAgfTtcbn07XG5cbi8qKlxuICogTG9hZHMgYSBwcmV2aW91c2x5IHNlcmlhbGlzZWQgaW52ZXJ0ZWQgaW5kZXguXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHNlcmlhbGlzZWREYXRhIFRoZSBzZXJpYWxpc2VkIGludmVydGVkIGluZGV4IHRvIGxvYWQuXG4gKiBAcmV0dXJuIHtlbGFzdGljbHVuci5JbnZlcnRlZEluZGV4fVxuICovXG5lbGFzdGljbHVuci5JbnZlcnRlZEluZGV4LmxvYWQgPSBmdW5jdGlvbiAoc2VyaWFsaXNlZERhdGEpIHtcbiAgdmFyIGlkeCA9IG5ldyB0aGlzO1xuICBpZHgucm9vdCA9IHNlcmlhbGlzZWREYXRhLnJvb3Q7XG5cbiAgcmV0dXJuIGlkeDtcbn07XG5cbi8qKlxuICogQWRkcyBhIHt0b2tlbjogdG9rZW5JbmZvfSBwYWlyIHRvIHRoZSBpbnZlcnRlZCBpbmRleC5cbiAqIElmIHRoZSB0b2tlbiBhbHJlYWR5IGV4aXN0LCB0aGVuIHVwZGF0ZSB0aGUgdG9rZW5JbmZvLlxuICpcbiAqIHRva2VuSW5mbyBmb3JtYXQ6IHsgcmVmOiAxLCB0ZjogMn1cbiAqIHRva2VuSW5mb3Igc2hvdWxkIGNvbnRhaW5zIHRoZSBkb2N1bWVudCdzIHJlZiBhbmQgdGhlIHRmKHRva2VuIGZyZXF1ZW5jeSkgb2YgdGhhdCB0b2tlbiBpblxuICogdGhlIGRvY3VtZW50LlxuICpcbiAqIEJ5IGRlZmF1bHQgdGhpcyBmdW5jdGlvbiBzdGFydHMgYXQgdGhlIHJvb3Qgb2YgdGhlIGN1cnJlbnQgaW52ZXJ0ZWQgaW5kZXgsIGhvd2V2ZXJcbiAqIGl0IGNhbiBzdGFydCBhdCBhbnkgbm9kZSBvZiB0aGUgaW52ZXJ0ZWQgaW5kZXggaWYgcmVxdWlyZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRva2VuIFxuICogQHBhcmFtIHtPYmplY3R9IHRva2VuSW5mbyBmb3JtYXQ6IHsgcmVmOiAxLCB0ZjogMn1cbiAqIEBwYXJhbSB7T2JqZWN0fSByb290IEFuIG9wdGlvbmFsIG5vZGUgYXQgd2hpY2ggdG8gc3RhcnQgbG9va2luZyBmb3IgdGhlXG4gKiBjb3JyZWN0IHBsYWNlIHRvIGVudGVyIHRoZSBkb2MsIGJ5IGRlZmF1bHQgdGhlIHJvb3Qgb2YgdGhpcyBlbGFzdGljbHVuci5JbnZlcnRlZEluZGV4XG4gKiBpcyB1c2VkLlxuICogQG1lbWJlck9mIEludmVydGVkSW5kZXhcbiAqL1xuZWxhc3RpY2x1bnIuSW52ZXJ0ZWRJbmRleC5wcm90b3R5cGUuYWRkVG9rZW4gPSBmdW5jdGlvbiAodG9rZW4sIHRva2VuSW5mbywgcm9vdCkge1xuICB2YXIgcm9vdCA9IHJvb3QgfHwgdGhpcy5yb290LFxuICAgICAgaWR4ID0gMDtcblxuICB3aGlsZSAoaWR4IDw9IHRva2VuLmxlbmd0aCAtIDEpIHtcbiAgICB2YXIga2V5ID0gdG9rZW5baWR4XTtcblxuICAgIGlmICghKGtleSBpbiByb290KSkgcm9vdFtrZXldID0ge2RvY3M6IHt9LCBkZjogMH07XG4gICAgaWR4ICs9IDE7XG4gICAgcm9vdCA9IHJvb3Rba2V5XTtcbiAgfVxuXG4gIHZhciBkb2NSZWYgPSB0b2tlbkluZm8ucmVmO1xuICBpZiAoIXJvb3QuZG9jc1tkb2NSZWZdKSB7XG4gICAgLy8gaWYgdGhpcyBkb2Mgbm90IGV4aXN0LCB0aGVuIGFkZCB0aGlzIGRvY1xuICAgIHJvb3QuZG9jc1tkb2NSZWZdID0ge3RmOiB0b2tlbkluZm8udGZ9O1xuICAgIHJvb3QuZGYgKz0gMTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGlzIGRvYyBhbHJlYWR5IGV4aXN0LCB0aGVuIHVwZGF0ZSB0b2tlbkluZm9cbiAgICByb290LmRvY3NbZG9jUmVmXSA9IHt0ZjogdG9rZW5JbmZvLnRmfTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIHRva2VuIGlzIGluIHRoaXMgZWxhc3RpY2x1bnIuSW52ZXJ0ZWRJbmRleC5cbiAqIFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0b2tlbiBUaGUgdG9rZW4gdG8gYmUgY2hlY2tlZFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBtZW1iZXJPZiBJbnZlcnRlZEluZGV4XG4gKi9cbmVsYXN0aWNsdW5yLkludmVydGVkSW5kZXgucHJvdG90eXBlLmhhc1Rva2VuID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gIGlmICghdG9rZW4pIHJldHVybiBmYWxzZTtcblxuICB2YXIgbm9kZSA9IHRoaXMucm9vdDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2VuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFub2RlW3Rva2VuW2ldXSkgcmV0dXJuIGZhbHNlO1xuICAgIG5vZGUgPSBub2RlW3Rva2VuW2ldXTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZSBhIG5vZGUgZnJvbSB0aGUgaW52ZXJ0ZWQgaW5kZXggZm9yIGEgZ2l2ZW4gdG9rZW4uXG4gKiBJZiB0b2tlbiBub3QgZm91bmQgaW4gdGhpcyBJbnZlcnRlZEluZGV4LCByZXR1cm4gbnVsbC5cbiAqIFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0b2tlbiBUaGUgdG9rZW4gdG8gZ2V0IHRoZSBub2RlIGZvci5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBzZWUgSW52ZXJ0ZWRJbmRleC5wcm90b3R5cGUuZ2V0XG4gKiBAbWVtYmVyT2YgSW52ZXJ0ZWRJbmRleFxuICovXG5lbGFzdGljbHVuci5JbnZlcnRlZEluZGV4LnByb3RvdHlwZS5nZXROb2RlID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gIGlmICghdG9rZW4pIHJldHVybiBudWxsO1xuXG4gIHZhciBub2RlID0gdGhpcy5yb290O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIW5vZGVbdG9rZW5baV1dKSByZXR1cm4gbnVsbDtcbiAgICBub2RlID0gbm9kZVt0b2tlbltpXV07XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn07XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGRvY3VtZW50cyBvZiBhIGdpdmVuIHRva2VuLlxuICogSWYgdG9rZW4gbm90IGZvdW5kLCByZXR1cm4ge30uXG4gKlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0b2tlbiBUaGUgdG9rZW4gdG8gZ2V0IHRoZSBkb2N1bWVudHMgZm9yLlxuICogQHJldHVybiB7T2JqZWN0fVxuICogQG1lbWJlck9mIEludmVydGVkSW5kZXhcbiAqL1xuZWxhc3RpY2x1bnIuSW52ZXJ0ZWRJbmRleC5wcm90b3R5cGUuZ2V0RG9jcyA9IGZ1bmN0aW9uICh0b2tlbikge1xuICB2YXIgbm9kZSA9IHRoaXMuZ2V0Tm9kZSh0b2tlbik7XG4gIGlmIChub2RlID09IG51bGwpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICByZXR1cm4gbm9kZS5kb2NzO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0ZXJtIGZyZXF1ZW5jeSBvZiBnaXZlbiB0b2tlbiBpbiBnaXZlbiBkb2NSZWYuXG4gKiBJZiB0b2tlbiBvciBkb2NSZWYgbm90IGZvdW5kLCByZXR1cm4gMC5cbiAqXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRva2VuIFRoZSB0b2tlbiB0byBnZXQgdGhlIGRvY3VtZW50cyBmb3IuXG4gKiBAcGFyYW0ge1N0cmluZ3xJbnRlZ2VyfSBkb2NSZWZcbiAqIEByZXR1cm4ge0ludGVnZXJ9XG4gKiBAbWVtYmVyT2YgSW52ZXJ0ZWRJbmRleFxuICovXG5lbGFzdGljbHVuci5JbnZlcnRlZEluZGV4LnByb3RvdHlwZS5nZXRUZXJtRnJlcXVlbmN5ID0gZnVuY3Rpb24gKHRva2VuLCBkb2NSZWYpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLmdldE5vZGUodG9rZW4pO1xuXG4gIGlmIChub2RlID09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmICghKGRvY1JlZiBpbiBub2RlLmRvY3MpKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gbm9kZS5kb2NzW2RvY1JlZl0udGY7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBkb2N1bWVudCBmcmVxdWVuY3kgb2YgZ2l2ZW4gdG9rZW4uXG4gKiBJZiB0b2tlbiBub3QgZm91bmQsIHJldHVybiAwLlxuICpcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdG9rZW4gVGhlIHRva2VuIHRvIGdldCB0aGUgZG9jdW1lbnRzIGZvci5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBtZW1iZXJPZiBJbnZlcnRlZEluZGV4XG4gKi9cbmVsYXN0aWNsdW5yLkludmVydGVkSW5kZXgucHJvdG90eXBlLmdldERvY0ZyZXEgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgdmFyIG5vZGUgPSB0aGlzLmdldE5vZGUodG9rZW4pO1xuXG4gIGlmIChub2RlID09IG51bGwpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiBub2RlLmRmO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIGRvY3VtZW50IGlkZW50aWZpZWQgYnkgZG9jdW1lbnQncyByZWYgZnJvbSB0aGUgdG9rZW4gaW4gdGhlIGludmVydGVkIGluZGV4LlxuICpcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdG9rZW4gUmVtb3ZlIHRoZSBkb2N1bWVudCBmcm9tIHdoaWNoIHRva2VuLlxuICogQHBhcmFtIHtTdHJpbmd9IHJlZiBUaGUgcmVmIG9mIHRoZSBkb2N1bWVudCB0byByZW1vdmUgZnJvbSBnaXZlbiB0b2tlbi5cbiAqIEBtZW1iZXJPZiBJbnZlcnRlZEluZGV4XG4gKi9cbmVsYXN0aWNsdW5yLkludmVydGVkSW5kZXgucHJvdG90eXBlLnJlbW92ZVRva2VuID0gZnVuY3Rpb24gKHRva2VuLCByZWYpIHtcbiAgaWYgKCF0b2tlbikgcmV0dXJuO1xuICB2YXIgbm9kZSA9IHRoaXMuZ2V0Tm9kZSh0b2tlbik7XG5cbiAgaWYgKG5vZGUgPT0gbnVsbCkgcmV0dXJuO1xuXG4gIGlmIChyZWYgaW4gbm9kZS5kb2NzKSB7XG4gICAgZGVsZXRlIG5vZGUuZG9jc1tyZWZdO1xuICAgIG5vZGUuZGYgLT0gMTtcbiAgfVxufTtcblxuLyoqXG4gKiBGaW5kIGFsbCB0aGUgcG9zc2libGUgc3VmZml4ZXMgb2YgZ2l2ZW4gdG9rZW4gdXNpbmcgdG9rZW5zIGN1cnJlbnRseSBpbiB0aGUgaW52ZXJ0ZWQgaW5kZXguXG4gKiBJZiB0b2tlbiBub3QgZm91bmQsIHJldHVybiBlbXB0eSBBcnJheS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdG9rZW4gVGhlIHRva2VuIHRvIGV4cGFuZC5cbiAqIEByZXR1cm4ge0FycmF5fVxuICogQG1lbWJlck9mIEludmVydGVkSW5kZXhcbiAqL1xuZWxhc3RpY2x1bnIuSW52ZXJ0ZWRJbmRleC5wcm90b3R5cGUuZXhwYW5kVG9rZW4gPSBmdW5jdGlvbiAodG9rZW4sIG1lbW8sIHJvb3QpIHtcbiAgaWYgKHRva2VuID09IG51bGwgfHwgdG9rZW4gPT0gJycpIHJldHVybiBbXTtcbiAgdmFyIG1lbW8gPSBtZW1vIHx8IFtdO1xuXG4gIGlmIChyb290ID09IHZvaWQgMCkge1xuICAgIHJvb3QgPSB0aGlzLmdldE5vZGUodG9rZW4pO1xuICAgIGlmIChyb290ID09IG51bGwpIHJldHVybiBtZW1vO1xuICB9XG5cbiAgaWYgKHJvb3QuZGYgPiAwKSBtZW1vLnB1c2godG9rZW4pO1xuXG4gIGZvciAodmFyIGtleSBpbiByb290KSB7XG4gICAgaWYgKGtleSA9PT0gJ2RvY3MnKSBjb250aW51ZTtcbiAgICBpZiAoa2V5ID09PSAnZGYnKSBjb250aW51ZTtcbiAgICB0aGlzLmV4cGFuZFRva2VuKHRva2VuICsga2V5LCBtZW1vLCByb290W2tleV0pO1xuICB9XG5cbiAgcmV0dXJuIG1lbW87XG59O1xuXG4vKipcbiAqIFJldHVybnMgYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgaW52ZXJ0ZWQgaW5kZXggcmVhZHkgZm9yIHNlcmlhbGlzYXRpb24uXG4gKlxuICogQHJldHVybiB7T2JqZWN0fVxuICogQG1lbWJlck9mIEludmVydGVkSW5kZXhcbiAqL1xuZWxhc3RpY2x1bnIuSW52ZXJ0ZWRJbmRleC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHJvb3Q6IHRoaXMucm9vdFxuICB9O1xufTtcblxuLyohXG4gKiBlbGFzdGljbHVuci5Db25maWd1cmF0aW9uXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTYgV2VpIFNvbmdcbiAqL1xuIFxuIC8qKiBcbiAgKiBlbGFzdGljbHVuci5Db25maWd1cmF0aW9uIGlzIHVzZWQgdG8gYW5hbHl6ZSB0aGUgdXNlciBzZWFyY2ggY29uZmlndXJhdGlvbi5cbiAgKiBcbiAgKiBCeSBlbGFzdGljbHVuci5Db25maWd1cmF0aW9uIHVzZXIgY291bGQgc2V0IHF1ZXJ5LXRpbWUgYm9vc3RpbmcsIGJvb2xlYW4gbW9kZWwgaW4gZWFjaCBmaWVsZC5cbiAgKiBcbiAgKiBDdXJyZW50bHkgY29uZmlndXJhdGlvbiBzdXBwb3J0czpcbiAgKiAxLiBxdWVyeS10aW1lIGJvb3N0aW5nLCB1c2VyIGNvdWxkIHNldCBob3cgdG8gYm9vc3QgZWFjaCBmaWVsZC5cbiAgKiAyLiBib29sZWFuIG1vZGVsIGNob3NpbmcsIHVzZXIgY291bGQgY2hvb3NlIHdoaWNoIGJvb2xlYW4gbW9kZWwgdG8gdXNlIGZvciBlYWNoIGZpZWxkLlxuICAqIDMuIHRva2VuIGV4cGFuZGF0aW9uLCB1c2VyIGNvdWxkIHNldCB0b2tlbiBleHBhbmQgdG8gVHJ1ZSB0byBpbXByb3ZlIFJlY2FsbC4gRGVmYXVsdCBpcyBGYWxzZS5cbiAgKiBcbiAgKiBRdWVyeSB0aW1lIGJvb3N0aW5nIG11c3QgYmUgY29uZmlndXJlZCBieSBmaWVsZCBjYXRlZ29yeSwgXCJib29sZWFuXCIgbW9kZWwgY291bGQgYmUgY29uZmlndXJlZCBcbiAgKiBieSBib3RoIGZpZWxkIGNhdGVnb3J5IG9yIGdsb2JhbGx5IGFzIHRoZSBmb2xsb3dpbmcgZXhhbXBsZS4gRmllbGQgY29uZmlndXJhdGlvbiBmb3IgXCJib29sZWFuXCJcbiAgKiB3aWxsIG92ZXJ3cml0ZSBnbG9iYWwgY29uZmlndXJhdGlvbi5cbiAgKiBUb2tlbiBleHBhbmQgY291bGQgYmUgY29uZmlndXJlZCBib3RoIGJ5IGZpZWxkIGNhdGVnb3J5IG9yIGdvbGJhbGx5LiBMb2NhbCBmaWVsZCBjb25maWd1cmF0aW9uIHdpbGxcbiAgKiBvdmVyd3JpdGUgZ2xvYmFsIGNvbmZpZ3VyYXRpb24uXG4gICogXG4gICogY29uZmlndXJhdGlvbiBleGFtcGxlOlxuICAqIHtcbiAgKiAgIGZpZWxkczp7IFxuICAqICAgICB0aXRsZToge2Jvb3N0OiAyfSxcbiAgKiAgICAgYm9keToge2Jvb3N0OiAxfVxuICAqICAgfSxcbiAgKiAgIGJvb2w6IFwiT1JcIlxuICAqIH1cbiAgKiBcbiAgKiBcImJvb2xcIiBmaWVsZCBjb25maWd1YXRpb24gb3ZlcndyaXRlIGdsb2JhbCBjb25maWd1YXRpb24gZXhhbXBsZTpcbiAgKiB7XG4gICogICBmaWVsZHM6eyBcbiAgKiAgICAgdGl0bGU6IHtib29zdDogMiwgYm9vbDogXCJBTkRcIn0sXG4gICogICAgIGJvZHk6IHtib29zdDogMX1cbiAgKiAgIH0sXG4gICogICBib29sOiBcIk9SXCJcbiAgKiB9XG4gICogXG4gICogXCJleHBhbmRcIiBleGFtcGxlOlxuICAqIHtcbiAgKiAgIGZpZWxkczp7IFxuICAqICAgICB0aXRsZToge2Jvb3N0OiAyLCBib29sOiBcIkFORFwifSxcbiAgKiAgICAgYm9keToge2Jvb3N0OiAxfVxuICAqICAgfSxcbiAgKiAgIGJvb2w6IFwiT1JcIixcbiAgKiAgIGV4cGFuZDogdHJ1ZVxuICAqIH1cbiAgKiBcbiAgKiBcImV4cGFuZFwiIGV4YW1wbGUgZm9yIGZpZWxkIGNhdGVnb3J5OlxuICAqIHtcbiAgKiAgIGZpZWxkczp7IFxuICAqICAgICB0aXRsZToge2Jvb3N0OiAyLCBib29sOiBcIkFORFwiLCBleHBhbmQ6IHRydWV9LFxuICAqICAgICBib2R5OiB7Ym9vc3Q6IDF9XG4gICogICB9LFxuICAqICAgYm9vbDogXCJPUlwiXG4gICogfVxuICAqIFxuICAqIHNldHRpbmcgdGhlIGJvb3N0IHRvIDAgaWdub3JlcyB0aGUgZmllbGQgKHRoaXMgd2lsbCBvbmx5IHNlYXJjaCB0aGUgdGl0bGUpOlxuICAqIHtcbiAgKiAgIGZpZWxkczp7XG4gICogICAgIHRpdGxlOiB7Ym9vc3Q6IDF9LFxuICAqICAgICBib2R5OiB7Ym9vc3Q6IDB9XG4gICogICB9XG4gICogfVxuICAqXG4gICogdGhlbiwgdXNlciBjb3VsZCBzZWFyY2ggd2l0aCBjb25maWd1cmF0aW9uIHRvIGRvIHF1ZXJ5LXRpbWUgYm9vc3RpbmcuXG4gICogaWR4LnNlYXJjaCgnb3JhY2xlIGRhdGFiYXNlJywge2ZpZWxkczoge3RpdGxlOiB7Ym9vc3Q6IDJ9LCBib2R5OiB7Ym9vc3Q6IDF9fX0pO1xuICAqIFxuICAqIFxuICAqIEBjb25zdHJ1Y3RvclxuICAqIFxuICAqIEBwYXJhbSB7U3RyaW5nfSBjb25maWcgdXNlciBjb25maWd1cmF0aW9uXG4gICogQHBhcmFtIHtBcnJheX0gZmllbGRzIGZpZWxkcyBvZiBpbmRleCBpbnN0YW5jZVxuICAqIEBtb2R1bGVcbiAgKi9cbmVsYXN0aWNsdW5yLkNvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiAoY29uZmlnLCBmaWVsZHMpIHtcbiAgdmFyIGNvbmZpZyA9IGNvbmZpZyB8fCAnJztcblxuICBpZiAoZmllbGRzID09IHVuZGVmaW5lZCB8fCBmaWVsZHMgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignZmllbGRzIHNob3VsZCBub3QgYmUgbnVsbCcpO1xuICB9XG5cbiAgdGhpcy5jb25maWcgPSB7fTtcblxuICB2YXIgdXNlckNvbmZpZztcbiAgdHJ5IHtcbiAgICB1c2VyQ29uZmlnID0gSlNPTi5wYXJzZShjb25maWcpO1xuICAgIHRoaXMuYnVpbGRVc2VyQ29uZmlnKHVzZXJDb25maWcsIGZpZWxkcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZWxhc3RpY2x1bnIudXRpbHMud2FybigndXNlciBjb25maWd1cmF0aW9uIHBhcnNlIGZhaWxlZCwgd2lsbCB1c2UgZGVmYXVsdCBjb25maWd1cmF0aW9uJyk7XG4gICAgdGhpcy5idWlsZERlZmF1bHRDb25maWcoZmllbGRzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBCdWlsZCBkZWZhdWx0IHNlYXJjaCBjb25maWd1cmF0aW9uLlxuICogXG4gKiBAcGFyYW0ge0FycmF5fSBmaWVsZHMgZmllbGRzIG9mIGluZGV4IGluc3RhbmNlXG4gKi9cbmVsYXN0aWNsdW5yLkNvbmZpZ3VyYXRpb24ucHJvdG90eXBlLmJ1aWxkRGVmYXVsdENvbmZpZyA9IGZ1bmN0aW9uIChmaWVsZHMpIHtcbiAgdGhpcy5yZXNldCgpO1xuICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICB0aGlzLmNvbmZpZ1tmaWVsZF0gPSB7XG4gICAgICBib29zdDogMSxcbiAgICAgIGJvb2w6IFwiT1JcIixcbiAgICAgIGV4cGFuZDogZmFsc2VcbiAgICB9O1xuICB9LCB0aGlzKTtcbn07XG5cbi8qKlxuICogQnVpbGQgdXNlciBjb25maWd1cmF0aW9uLlxuICogXG4gKiBAcGFyYW0ge0pTT059IGNvbmZpZyBVc2VyIEpTT04gY29uZmlndXJhdG9pblxuICogQHBhcmFtIHtBcnJheX0gZmllbGRzIGZpZWxkcyBvZiBpbmRleCBpbnN0YW5jZVxuICovXG5lbGFzdGljbHVuci5Db25maWd1cmF0aW9uLnByb3RvdHlwZS5idWlsZFVzZXJDb25maWcgPSBmdW5jdGlvbiAoY29uZmlnLCBmaWVsZHMpIHtcbiAgdmFyIGdsb2JhbF9ib29sID0gXCJPUlwiO1xuICB2YXIgZ2xvYmFsX2V4cGFuZCA9IGZhbHNlO1xuXG4gIHRoaXMucmVzZXQoKTtcbiAgaWYgKCdib29sJyBpbiBjb25maWcpIHtcbiAgICBnbG9iYWxfYm9vbCA9IGNvbmZpZ1snYm9vbCddIHx8IGdsb2JhbF9ib29sO1xuICB9XG5cbiAgaWYgKCdleHBhbmQnIGluIGNvbmZpZykge1xuICAgIGdsb2JhbF9leHBhbmQgPSBjb25maWdbJ2V4cGFuZCddIHx8IGdsb2JhbF9leHBhbmQ7XG4gIH1cblxuICBpZiAoJ2ZpZWxkcycgaW4gY29uZmlnKSB7XG4gICAgZm9yICh2YXIgZmllbGQgaW4gY29uZmlnWydmaWVsZHMnXSkge1xuICAgICAgaWYgKGZpZWxkcy5pbmRleE9mKGZpZWxkKSA+IC0xKSB7XG4gICAgICAgIHZhciBmaWVsZF9jb25maWcgPSBjb25maWdbJ2ZpZWxkcyddW2ZpZWxkXTtcbiAgICAgICAgdmFyIGZpZWxkX2V4cGFuZCA9IGdsb2JhbF9leHBhbmQ7XG4gICAgICAgIGlmIChmaWVsZF9jb25maWcuZXhwYW5kICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGZpZWxkX2V4cGFuZCA9IGZpZWxkX2NvbmZpZy5leHBhbmQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbmZpZ1tmaWVsZF0gPSB7XG4gICAgICAgICAgYm9vc3Q6IChmaWVsZF9jb25maWcuYm9vc3QgfHwgZmllbGRfY29uZmlnLmJvb3N0ID09PSAwKSA/IGZpZWxkX2NvbmZpZy5ib29zdCA6IDEsXG4gICAgICAgICAgYm9vbDogZmllbGRfY29uZmlnLmJvb2wgfHwgZ2xvYmFsX2Jvb2wsXG4gICAgICAgICAgZXhwYW5kOiBmaWVsZF9leHBhbmRcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsYXN0aWNsdW5yLnV0aWxzLndhcm4oJ2ZpZWxkIG5hbWUgaW4gdXNlciBjb25maWd1cmF0aW9uIG5vdCBmb3VuZCBpbiBpbmRleCBpbnN0YW5jZSBmaWVsZHMnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5hZGRBbGxGaWVsZHMyVXNlckNvbmZpZyhnbG9iYWxfYm9vbCwgZ2xvYmFsX2V4cGFuZCwgZmllbGRzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBZGQgYWxsIGZpZWxkcyB0byB1c2VyIHNlYXJjaCBjb25maWd1cmF0aW9uLlxuICogXG4gKiBAcGFyYW0ge1N0cmluZ30gYm9vbCBCb29sZWFuIG1vZGVsXG4gKiBAcGFyYW0ge1N0cmluZ30gZXhwYW5kIEV4cGFuZCBtb2RlbFxuICogQHBhcmFtIHtBcnJheX0gZmllbGRzIGZpZWxkcyBvZiBpbmRleCBpbnN0YW5jZVxuICovXG5lbGFzdGljbHVuci5Db25maWd1cmF0aW9uLnByb3RvdHlwZS5hZGRBbGxGaWVsZHMyVXNlckNvbmZpZyA9IGZ1bmN0aW9uIChib29sLCBleHBhbmQsIGZpZWxkcykge1xuICBmaWVsZHMuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcbiAgICB0aGlzLmNvbmZpZ1tmaWVsZF0gPSB7XG4gICAgICBib29zdDogMSxcbiAgICAgIGJvb2w6IGJvb2wsXG4gICAgICBleHBhbmQ6IGV4cGFuZFxuICAgIH07XG4gIH0sIHRoaXMpO1xufTtcblxuLyoqXG4gKiBnZXQgY3VycmVudCB1c2VyIGNvbmZpZ3VyYXRpb25cbiAqL1xuZWxhc3RpY2x1bnIuQ29uZmlndXJhdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb25maWc7XG59O1xuXG4vKipcbiAqIHJlc2V0IHVzZXIgc2VhcmNoIGNvbmZpZ3VyYXRpb24uXG4gKi9cbmVsYXN0aWNsdW5yLkNvbmZpZ3VyYXRpb24ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmNvbmZpZyA9IHt9O1xufTtcbi8qKlxuICogc29ydGVkX3NldC5qcyBpcyBhZGRlZCBvbmx5IHRvIG1ha2UgZWxhc3RpY2x1bnIuanMgY29tcGF0aWJsZSB3aXRoIGx1bnItbGFuZ3VhZ2VzLlxuICogaWYgZWxhc3RpY2x1bnIuanMgc3VwcG9ydCBkaWZmZXJlbnQgbGFuZ3VhZ2VzIGJ5IGRlZmF1bHQsIHRoaXMgd2lsbCBtYWtlIGVsYXN0aWNsdW5yLmpzXG4gKiBtdWNoIGJpZ2dlciB0aGF0IG5vdCBnb29kIGZvciBicm93c2VyIHVzYWdlLlxuICpcbiAqL1xuXG5cbi8qIVxuICogbHVuci5Tb3J0ZWRTZXRcbiAqIENvcHlyaWdodCAoQykgMjAxNiBPbGl2ZXIgTmlnaHRpbmdhbGVcbiAqL1xuXG4vKipcbiAqIGx1bnIuU29ydGVkU2V0cyBhcmUgdXNlZCB0byBtYWludGFpbiBhbiBhcnJheSBvZiB1bmlxIHZhbHVlcyBpbiBhIHNvcnRlZFxuICogb3JkZXIuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmx1bnIuU29ydGVkU2V0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmxlbmd0aCA9IDBcbiAgdGhpcy5lbGVtZW50cyA9IFtdXG59XG5cbi8qKlxuICogTG9hZHMgYSBwcmV2aW91c2x5IHNlcmlhbGlzZWQgc29ydGVkIHNldC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBzZXJpYWxpc2VkRGF0YSBUaGUgc2VyaWFsaXNlZCBzZXQgdG8gbG9hZC5cbiAqIEByZXR1cm5zIHtsdW5yLlNvcnRlZFNldH1cbiAqIEBtZW1iZXJPZiBTb3J0ZWRTZXRcbiAqL1xubHVuci5Tb3J0ZWRTZXQubG9hZCA9IGZ1bmN0aW9uIChzZXJpYWxpc2VkRGF0YSkge1xuICB2YXIgc2V0ID0gbmV3IHRoaXNcblxuICBzZXQuZWxlbWVudHMgPSBzZXJpYWxpc2VkRGF0YVxuICBzZXQubGVuZ3RoID0gc2VyaWFsaXNlZERhdGEubGVuZ3RoXG5cbiAgcmV0dXJuIHNldFxufVxuXG4vKipcbiAqIEluc2VydHMgbmV3IGl0ZW1zIGludG8gdGhlIHNldCBpbiB0aGUgY29ycmVjdCBwb3NpdGlvbiB0byBtYWludGFpbiB0aGVcbiAqIG9yZGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBUaGUgb2JqZWN0cyB0byBhZGQgdG8gdGhpcyBzZXQuXG4gKiBAbWVtYmVyT2YgU29ydGVkU2V0XG4gKi9cbmx1bnIuU29ydGVkU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpLCBlbGVtZW50XG5cbiAgZm9yIChpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGVsZW1lbnQgPSBhcmd1bWVudHNbaV1cbiAgICBpZiAofnRoaXMuaW5kZXhPZihlbGVtZW50KSkgY29udGludWVcbiAgICB0aGlzLmVsZW1lbnRzLnNwbGljZSh0aGlzLmxvY2F0aW9uRm9yKGVsZW1lbnQpLCAwLCBlbGVtZW50KVxuICB9XG5cbiAgdGhpcy5sZW5ndGggPSB0aGlzLmVsZW1lbnRzLmxlbmd0aFxufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoaXMgc29ydGVkIHNldCBpbnRvIGFuIGFycmF5LlxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBtZW1iZXJPZiBTb3J0ZWRTZXRcbiAqL1xubHVuci5Tb3J0ZWRTZXQucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmVsZW1lbnRzLnNsaWNlKClcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGFycmF5IHdpdGggdGhlIHJlc3VsdHMgb2YgY2FsbGluZyBhIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIGV2ZXJ5XG4gKiBlbGVtZW50IGluIHRoaXMgc29ydGVkIHNldC5cbiAqXG4gKiBEZWxlZ2F0ZXMgdG8gQXJyYXkucHJvdG90eXBlLm1hcCBhbmQgaGFzIHRoZSBzYW1lIHNpZ25hdHVyZS5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgb24gZWFjaCBlbGVtZW50IG9mIHRoZVxuICogc2V0LlxuICogQHBhcmFtIHtPYmplY3R9IGN0eCBBbiBvcHRpb25hbCBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyB0aGUgY29udGV4dFxuICogZm9yIHRoZSBmdW5jdGlvbiBmbi5cbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBtZW1iZXJPZiBTb3J0ZWRTZXRcbiAqL1xubHVuci5Tb3J0ZWRTZXQucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChmbiwgY3R4KSB7XG4gIHJldHVybiB0aGlzLmVsZW1lbnRzLm1hcChmbiwgY3R4KVxufVxuXG4vKipcbiAqIEV4ZWN1dGVzIGEgcHJvdmlkZWQgZnVuY3Rpb24gb25jZSBwZXIgc29ydGVkIHNldCBlbGVtZW50LlxuICpcbiAqIERlbGVnYXRlcyB0byBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCBhbmQgaGFzIHRoZSBzYW1lIHNpZ25hdHVyZS5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgb24gZWFjaCBlbGVtZW50IG9mIHRoZVxuICogc2V0LlxuICogQHBhcmFtIHtPYmplY3R9IGN0eCBBbiBvcHRpb25hbCBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyB0aGUgY29udGV4dFxuICogQG1lbWJlck9mIFNvcnRlZFNldFxuICogZm9yIHRoZSBmdW5jdGlvbiBmbi5cbiAqL1xubHVuci5Tb3J0ZWRTZXQucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoZm4sIGN0eCkge1xuICByZXR1cm4gdGhpcy5lbGVtZW50cy5mb3JFYWNoKGZuLCBjdHgpXG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYSBnaXZlbiBlbGVtZW50IGNhbiBiZSBmb3VuZCBpbiB0aGVcbiAqIHNvcnRlZCBzZXQsIG9yIC0xIGlmIGl0IGlzIG5vdCBwcmVzZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtIFRoZSBvYmplY3QgdG8gbG9jYXRlIGluIHRoZSBzb3J0ZWQgc2V0LlxuICogQHJldHVybnMge051bWJlcn1cbiAqIEBtZW1iZXJPZiBTb3J0ZWRTZXRcbiAqL1xubHVuci5Tb3J0ZWRTZXQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiAoZWxlbSkge1xuICB2YXIgc3RhcnQgPSAwLFxuICAgICAgZW5kID0gdGhpcy5lbGVtZW50cy5sZW5ndGgsXG4gICAgICBzZWN0aW9uTGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICBwaXZvdCA9IHN0YXJ0ICsgTWF0aC5mbG9vcihzZWN0aW9uTGVuZ3RoIC8gMiksXG4gICAgICBwaXZvdEVsZW0gPSB0aGlzLmVsZW1lbnRzW3Bpdm90XVxuXG4gIHdoaWxlIChzZWN0aW9uTGVuZ3RoID4gMSkge1xuICAgIGlmIChwaXZvdEVsZW0gPT09IGVsZW0pIHJldHVybiBwaXZvdFxuXG4gICAgaWYgKHBpdm90RWxlbSA8IGVsZW0pIHN0YXJ0ID0gcGl2b3RcbiAgICBpZiAocGl2b3RFbGVtID4gZWxlbSkgZW5kID0gcGl2b3RcblxuICAgIHNlY3Rpb25MZW5ndGggPSBlbmQgLSBzdGFydFxuICAgIHBpdm90ID0gc3RhcnQgKyBNYXRoLmZsb29yKHNlY3Rpb25MZW5ndGggLyAyKVxuICAgIHBpdm90RWxlbSA9IHRoaXMuZWxlbWVudHNbcGl2b3RdXG4gIH1cblxuICBpZiAocGl2b3RFbGVtID09PSBlbGVtKSByZXR1cm4gcGl2b3RcblxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwb3NpdGlvbiB3aXRoaW4gdGhlIHNvcnRlZCBzZXQgdGhhdCBhbiBlbGVtZW50IHNob3VsZCBiZVxuICogaW5zZXJ0ZWQgYXQgdG8gbWFpbnRhaW4gdGhlIGN1cnJlbnQgb3JkZXIgb2YgdGhlIHNldC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCB0aGUgZWxlbWVudCB0byBzZWFyY2ggZm9yIGRvZXMgbm90IGFscmVhZHkgZXhpc3RcbiAqIGluIHRoZSBzb3J0ZWQgc2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtIFRoZSBlbGVtIHRvIGZpbmQgdGhlIHBvc2l0aW9uIGZvciBpbiB0aGUgc2V0XG4gKiBAcmV0dXJucyB7TnVtYmVyfVxuICogQG1lbWJlck9mIFNvcnRlZFNldFxuICovXG5sdW5yLlNvcnRlZFNldC5wcm90b3R5cGUubG9jYXRpb25Gb3IgPSBmdW5jdGlvbiAoZWxlbSkge1xuICB2YXIgc3RhcnQgPSAwLFxuICAgICAgZW5kID0gdGhpcy5lbGVtZW50cy5sZW5ndGgsXG4gICAgICBzZWN0aW9uTGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICBwaXZvdCA9IHN0YXJ0ICsgTWF0aC5mbG9vcihzZWN0aW9uTGVuZ3RoIC8gMiksXG4gICAgICBwaXZvdEVsZW0gPSB0aGlzLmVsZW1lbnRzW3Bpdm90XVxuXG4gIHdoaWxlIChzZWN0aW9uTGVuZ3RoID4gMSkge1xuICAgIGlmIChwaXZvdEVsZW0gPCBlbGVtKSBzdGFydCA9IHBpdm90XG4gICAgaWYgKHBpdm90RWxlbSA+IGVsZW0pIGVuZCA9IHBpdm90XG5cbiAgICBzZWN0aW9uTGVuZ3RoID0gZW5kIC0gc3RhcnRcbiAgICBwaXZvdCA9IHN0YXJ0ICsgTWF0aC5mbG9vcihzZWN0aW9uTGVuZ3RoIC8gMilcbiAgICBwaXZvdEVsZW0gPSB0aGlzLmVsZW1lbnRzW3Bpdm90XVxuICB9XG5cbiAgaWYgKHBpdm90RWxlbSA+IGVsZW0pIHJldHVybiBwaXZvdFxuICBpZiAocGl2b3RFbGVtIDwgZWxlbSkgcmV0dXJuIHBpdm90ICsgMVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbHVuci5Tb3J0ZWRTZXQgdGhhdCBjb250YWlucyB0aGUgZWxlbWVudHMgaW4gdGhlIGludGVyc2VjdGlvblxuICogb2YgdGhpcyBzZXQgYW5kIHRoZSBwYXNzZWQgc2V0LlxuICpcbiAqIEBwYXJhbSB7bHVuci5Tb3J0ZWRTZXR9IG90aGVyU2V0IFRoZSBzZXQgdG8gaW50ZXJzZWN0IHdpdGggdGhpcyBzZXQuXG4gKiBAcmV0dXJucyB7bHVuci5Tb3J0ZWRTZXR9XG4gKiBAbWVtYmVyT2YgU29ydGVkU2V0XG4gKi9cbmx1bnIuU29ydGVkU2V0LnByb3RvdHlwZS5pbnRlcnNlY3QgPSBmdW5jdGlvbiAob3RoZXJTZXQpIHtcbiAgdmFyIGludGVyc2VjdFNldCA9IG5ldyBsdW5yLlNvcnRlZFNldCxcbiAgICAgIGkgPSAwLCBqID0gMCxcbiAgICAgIGFfbGVuID0gdGhpcy5sZW5ndGgsIGJfbGVuID0gb3RoZXJTZXQubGVuZ3RoLFxuICAgICAgYSA9IHRoaXMuZWxlbWVudHMsIGIgPSBvdGhlclNldC5lbGVtZW50c1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKGkgPiBhX2xlbiAtIDEgfHwgaiA+IGJfbGVuIC0gMSkgYnJlYWtcblxuICAgIGlmIChhW2ldID09PSBiW2pdKSB7XG4gICAgICBpbnRlcnNlY3RTZXQuYWRkKGFbaV0pXG4gICAgICBpKyssIGorK1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBpZiAoYVtpXSA8IGJbal0pIHtcbiAgICAgIGkrK1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBpZiAoYVtpXSA+IGJbal0pIHtcbiAgICAgIGorK1xuICAgICAgY29udGludWVcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGludGVyc2VjdFNldFxufVxuXG4vKipcbiAqIE1ha2VzIGEgY29weSBvZiB0aGlzIHNldFxuICpcbiAqIEByZXR1cm5zIHtsdW5yLlNvcnRlZFNldH1cbiAqIEBtZW1iZXJPZiBTb3J0ZWRTZXRcbiAqL1xubHVuci5Tb3J0ZWRTZXQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY2xvbmUgPSBuZXcgbHVuci5Tb3J0ZWRTZXRcblxuICBjbG9uZS5lbGVtZW50cyA9IHRoaXMudG9BcnJheSgpXG4gIGNsb25lLmxlbmd0aCA9IGNsb25lLmVsZW1lbnRzLmxlbmd0aFxuXG4gIHJldHVybiBjbG9uZVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbHVuci5Tb3J0ZWRTZXQgdGhhdCBjb250YWlucyB0aGUgZWxlbWVudHMgaW4gdGhlIHVuaW9uXG4gKiBvZiB0aGlzIHNldCBhbmQgdGhlIHBhc3NlZCBzZXQuXG4gKlxuICogQHBhcmFtIHtsdW5yLlNvcnRlZFNldH0gb3RoZXJTZXQgVGhlIHNldCB0byB1bmlvbiB3aXRoIHRoaXMgc2V0LlxuICogQHJldHVybnMge2x1bnIuU29ydGVkU2V0fVxuICogQG1lbWJlck9mIFNvcnRlZFNldFxuICovXG5sdW5yLlNvcnRlZFNldC5wcm90b3R5cGUudW5pb24gPSBmdW5jdGlvbiAob3RoZXJTZXQpIHtcbiAgdmFyIGxvbmdTZXQsIHNob3J0U2V0LCB1bmlvblNldFxuXG4gIGlmICh0aGlzLmxlbmd0aCA+PSBvdGhlclNldC5sZW5ndGgpIHtcbiAgICBsb25nU2V0ID0gdGhpcywgc2hvcnRTZXQgPSBvdGhlclNldFxuICB9IGVsc2Uge1xuICAgIGxvbmdTZXQgPSBvdGhlclNldCwgc2hvcnRTZXQgPSB0aGlzXG4gIH1cblxuICB1bmlvblNldCA9IGxvbmdTZXQuY2xvbmUoKVxuXG4gIGZvcih2YXIgaSA9IDAsIHNob3J0U2V0RWxlbWVudHMgPSBzaG9ydFNldC50b0FycmF5KCk7IGkgPCBzaG9ydFNldEVsZW1lbnRzLmxlbmd0aDsgaSsrKXtcbiAgICB1bmlvblNldC5hZGQoc2hvcnRTZXRFbGVtZW50c1tpXSlcbiAgfVxuXG4gIHJldHVybiB1bmlvblNldFxufVxuXG4vKipcbiAqIFJldHVybnMgYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgc29ydGVkIHNldCByZWFkeSBmb3Igc2VyaWFsaXNhdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKiBAbWVtYmVyT2YgU29ydGVkU2V0XG4gKi9cbmx1bnIuU29ydGVkU2V0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnRvQXJyYXkoKVxufVxuICAvKipcbiAgICogZXhwb3J0IHRoZSBtb2R1bGUgdmlhIEFNRCwgQ29tbW9uSlMgb3IgYXMgYSBicm93c2VyIGdsb2JhbFxuICAgKiBFeHBvcnQgY29kZSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS91bWRqcy91bWQvYmxvYi9tYXN0ZXIvcmV0dXJuRXhwb3J0cy5qc1xuICAgKi9cbiAgOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgIGRlZmluZShmYWN0b3J5KVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAvKipcbiAgICAgICAqIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgICAgICogb25seSBDb21tb25KUy1saWtlIGVudmlyb21lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAgICAqIGxpa2UgTm9kZS5cbiAgICAgICAqL1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KClcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICAgIHJvb3QuZWxhc3RpY2x1bnIgPSBmYWN0b3J5KClcbiAgICB9XG4gIH0odGhpcywgZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEp1c3QgcmV0dXJuIGEgdmFsdWUgdG8gZGVmaW5lIHRoZSBtb2R1bGUgZXhwb3J0LlxuICAgICAqIFRoaXMgZXhhbXBsZSByZXR1cm5zIGFuIG9iamVjdCwgYnV0IHRoZSBtb2R1bGVcbiAgICAgKiBjYW4gcmV0dXJuIGEgZnVuY3Rpb24gYXMgdGhlIGV4cG9ydGVkIHZhbHVlLlxuICAgICAqL1xuICAgIHJldHVybiBlbGFzdGljbHVuclxuICB9KSlcbn0pKCk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/elasticlunr/elasticlunr.js\n");

/***/ }),

/***/ "./node_modules/index-of/index.js":
/*!****************************************!*\
  !*** ./node_modules/index-of/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*!\n * index-of <https://github.com/jonschlinkert/index-of>\n *\n * Copyright (c) 2014-2015 Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n\n\nmodule.exports = function indexOf(arr, ele, start) {\n  start = start || 0;\n  var idx = -1;\n\n  if (arr == null) return idx;\n  var len = arr.length;\n  var i = start < 0\n    ? (len + start)\n    : start;\n\n  if (i >= arr.length) {\n    return -1;\n  }\n\n  while (i < len) {\n    if (arr[i] === ele) {\n      return i;\n    }\n    i++;\n  }\n\n  return -1;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5kZXgtb2YvaW5kZXguanM/NGQxYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2luZGV4LW9mL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBpbmRleC1vZiA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaW5kZXgtb2Y+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTUgSm9uIFNjaGxpbmtlcnQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluZGV4T2YoYXJyLCBlbGUsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGlkeCA9IC0xO1xuXG4gIGlmIChhcnIgPT0gbnVsbCkgcmV0dXJuIGlkeDtcbiAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gIHZhciBpID0gc3RhcnQgPCAwXG4gICAgPyAobGVuICsgc3RhcnQpXG4gICAgOiBzdGFydDtcblxuICBpZiAoaSA+PSBhcnIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICBpZiAoYXJyW2ldID09PSBlbGUpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgICBpKys7XG4gIH1cblxuICByZXR1cm4gLTE7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/index-of/index.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/setimmediate/setImmediate.js\n");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz81MTE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxtQkFBTyxDQUFDLGlFQUFjO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/timers-browserify/main.js\n");

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=template&id=7c00fc59&":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=template&id=7c00fc59& ***!
  \*****************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      ref: \"annotationToolbarPopover\",\n      style: _vm.style,\n      attrs: { id: \"annotation-toolbar-popover\" }\n    },\n    [\n      _c(\"div\", {\n        directives: [\n          {\n            name: \"show\",\n            rawName: \"v-show\",\n            value: _vm.arrowDirection === _vm.ArrowDirection.UP,\n            expression: \"arrowDirection === ArrowDirection.UP\"\n          }\n        ],\n        ref: \"arrowUp\",\n        staticClass: \"arrow-up mx-auto\"\n      }),\n      _vm._v(\" \"),\n      _c(\n        \"div\",\n        {\n          staticClass: \"d-flex align-items-center p-1\",\n          class: {\n            \"shadow-down\": _vm.arrowDirection === _vm.ArrowDirection.DOWN,\n            \"shadow-up\": _vm.arrowDirection === _vm.ArrowDirection.UP\n          },\n          attrs: { id: \"annotation-toolbar\" }\n        },\n        [\n          _vm._l(_vm.highlightingOptions, function(option, index) {\n            return _c(\n              \"div\",\n              {\n                key: index,\n                staticClass: \"annotation-toolbar-item dot longpage-highlight\",\n                class: [option],\n                style: option,\n                on: {\n                  click: function($event) {\n                    $event.preventDefault()\n                    return _vm.$emit(\"highlight\", option)\n                  }\n                }\n              },\n              [_vm._v(\"A\")]\n            )\n          }),\n          _vm._v(\" \"),\n          _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.showDelete,\n                  expression: \"showDelete\"\n                }\n              ],\n              staticClass: \"annotation-toolbar-item\"\n            },\n            [\n              _c(\"i\", {\n                staticClass: \"fa fa-trash\",\n                on: {\n                  click: function($event) {\n                    $event.preventDefault()\n                    return _vm.$emit(\"delete\")\n                  }\n                }\n              })\n            ]\n          )\n        ],\n        2\n      ),\n      _vm._v(\" \"),\n      _c(\"div\", {\n        directives: [\n          {\n            name: \"show\",\n            rawName: \"v-show\",\n            value: _vm.arrowDirection === _vm.ArrowDirection.DOWN,\n            expression: \"arrowDirection === ArrowDirection.DOWN\"\n          }\n        ],\n        ref: \"arrowDown\",\n        staticClass: \"arrow-down mx-auto\"\n      })\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hbm5vdGF0aW9uL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWU/OWVlYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLGtCQUFrQjtBQUNsQixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8hLi9zcmMvY29tcG9uZW50cy9hbm5vdGF0aW9uL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2MwMGZjNTkmLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHtcbiAgICAgIHJlZjogXCJhbm5vdGF0aW9uVG9vbGJhclBvcG92ZXJcIixcbiAgICAgIHN0eWxlOiBfdm0uc3R5bGUsXG4gICAgICBhdHRyczogeyBpZDogXCJhbm5vdGF0aW9uLXRvb2xiYXItcG9wb3ZlclwiIH1cbiAgICB9LFxuICAgIFtcbiAgICAgIF9jKFwiZGl2XCIsIHtcbiAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwic2hvd1wiLFxuICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgIHZhbHVlOiBfdm0uYXJyb3dEaXJlY3Rpb24gPT09IF92bS5BcnJvd0RpcmVjdGlvbi5VUCxcbiAgICAgICAgICAgIGV4cHJlc3Npb246IFwiYXJyb3dEaXJlY3Rpb24gPT09IEFycm93RGlyZWN0aW9uLlVQXCJcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHJlZjogXCJhcnJvd1VwXCIsXG4gICAgICAgIHN0YXRpY0NsYXNzOiBcImFycm93LXVwIG14LWF1dG9cIlxuICAgICAgfSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIHAtMVwiLFxuICAgICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgICBcInNoYWRvdy1kb3duXCI6IF92bS5hcnJvd0RpcmVjdGlvbiA9PT0gX3ZtLkFycm93RGlyZWN0aW9uLkRPV04sXG4gICAgICAgICAgICBcInNoYWRvdy11cFwiOiBfdm0uYXJyb3dEaXJlY3Rpb24gPT09IF92bS5BcnJvd0RpcmVjdGlvbi5VUFxuICAgICAgICAgIH0sXG4gICAgICAgICAgYXR0cnM6IHsgaWQ6IFwiYW5ub3RhdGlvbi10b29sYmFyXCIgfVxuICAgICAgICB9LFxuICAgICAgICBbXG4gICAgICAgICAgX3ZtLl9sKF92bS5oaWdobGlnaHRpbmdPcHRpb25zLCBmdW5jdGlvbihvcHRpb24sIGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gX2MoXG4gICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImFubm90YXRpb24tdG9vbGJhci1pdGVtIGRvdCBsb25ncGFnZS1oaWdobGlnaHRcIixcbiAgICAgICAgICAgICAgICBjbGFzczogW29wdGlvbl0sXG4gICAgICAgICAgICAgICAgc3R5bGU6IG9wdGlvbixcbiAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLiRlbWl0KFwiaGlnaGxpZ2h0XCIsIG9wdGlvbilcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoXCJBXCIpXVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtc2hvd1wiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5zaG93RGVsZXRlLFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJzaG93RGVsZXRlXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImFubm90YXRpb24tdG9vbGJhci1pdGVtXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIF9jKFwiaVwiLCB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZmEgZmEtdHJhc2hcIixcbiAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLiRlbWl0KFwiZGVsZXRlXCIpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXVxuICAgICAgICAgIClcbiAgICAgICAgXSxcbiAgICAgICAgMlxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImRpdlwiLCB7XG4gICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICB2YWx1ZTogX3ZtLmFycm93RGlyZWN0aW9uID09PSBfdm0uQXJyb3dEaXJlY3Rpb24uRE9XTixcbiAgICAgICAgICAgIGV4cHJlc3Npb246IFwiYXJyb3dEaXJlY3Rpb24gPT09IEFycm93RGlyZWN0aW9uLkRPV05cIlxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcmVmOiBcImFycm93RG93blwiLFxuICAgICAgICBzdGF0aWNDbGFzczogXCJhcnJvdy1kb3duIG14LWF1dG9cIlxuICAgICAgfSlcbiAgICBdXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=template&id=7c00fc59&\n");

/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () {\n        injectStyles.call(\n          this,\n          (options.functional ? this.parent : this).$root.$options.shadowRoot\n        )\n      }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functional component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzPzI4NzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICAob3B0aW9ucy5mdW5jdGlvbmFsID8gdGhpcy5wYXJlbnQgOiB0aGlzKS4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290XG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIDogaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGZvciB0ZW1wbGF0ZS1vbmx5IGhvdC1yZWxvYWQgYmVjYXVzZSBpbiB0aGF0IGNhc2UgdGhlIHJlbmRlciBmbiBkb2Vzbid0XG4gICAgICAvLyBnbyB0aHJvdWdoIHRoZSBub3JtYWxpemVyXG4gICAgICBvcHRpb25zLl9pbmplY3RTdHlsZXMgPSBob29rXG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/lib/runtime/componentNormalizer.js\n");

/***/ }),

/***/ "./node_modules/vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss&":
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-style-loader!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib??vue-loader-options!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss& ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/sass-loader/dist/cjs.js!../../../node_modules/vue-loader/lib??vue-loader-options!./AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss& */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss&\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(/*! ../../../node_modules/vue-style-loader/lib/addStylesClient.js */ \"./node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"517ef937\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hbm5vdGF0aW9uL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWU/YjJiZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyx1aUJBQWlTO0FBQ3ZULDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsNkhBQWdFO0FBQ2xGLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvaW5kZXguanMhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8hLi9zcmMvY29tcG9uZW50cy9hbm5vdGF0aW9uL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Bbm5vdGF0aW9uVG9vbGJhclBvcG92ZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI1MTdlZjkzN1wiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Bbm5vdGF0aW9uVG9vbGJhclBvcG92ZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss&\n");

/***/ }),

/***/ "./node_modules/vue-style-loader/lib/addStylesClient.js":
/*!**************************************************************!*\
  !*** ./node_modules/vue-style-loader/lib/addStylesClient.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return addStylesClient; });\n/* harmony import */ var _listToStyles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./listToStyles */ \"./node_modules/vue-style-loader/lib/listToStyles.js\");\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\n\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nfunction addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = Object(_listToStyles__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = Object(_listToStyles__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-style-loader/lib/addStylesClient.js\n");

/***/ }),

/***/ "./node_modules/vue-style-loader/lib/listToStyles.js":
/*!***********************************************************!*\
  !*** ./node_modules/vue-style-loader/lib/listToStyles.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return listToStyles; });\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nfunction listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzPzliYmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2U7QUFDZjtBQUNBO0FBQ0EsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsd0JBQXdCO0FBQzNELEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVHJhbnNsYXRlcyB0aGUgbGlzdCBmb3JtYXQgcHJvZHVjZWQgYnkgY3NzLWxvYWRlciBpbnRvIHNvbWV0aGluZ1xuICogZWFzaWVyIHRvIG1hbmlwdWxhdGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAocGFyZW50SWQsIGxpc3QpIHtcbiAgdmFyIHN0eWxlcyA9IFtdXG4gIHZhciBuZXdTdHlsZXMgPSB7fVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV1cbiAgICB2YXIgaWQgPSBpdGVtWzBdXG4gICAgdmFyIGNzcyA9IGl0ZW1bMV1cbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdXG4gICAgdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM11cbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGlkOiBwYXJlbnRJZCArICc6JyArIGksXG4gICAgICBjc3M6IGNzcyxcbiAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgIHNvdXJjZU1hcDogc291cmNlTWFwXG4gICAgfVxuICAgIGlmICghbmV3U3R5bGVzW2lkXSkge1xuICAgICAgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHsgaWQ6IGlkLCBwYXJ0czogW3BhcnRdIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KVxuICAgIH1cbiAgfVxuICByZXR1cm4gc3R5bGVzXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/vue-style-loader/lib/listToStyles.js\n");

/***/ }),

/***/ "./node_modules/vue/dist/vue.esm.js":
/*!******************************************!*\
  !*** ./node_modules/vue/dist/vue.esm.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!\n * Vue.js v2.6.12\n * (c) 2014-2020 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a string containing static keys from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (target) {\n  targetStack.push(target);\n  Dep.target = target;\n}\n\nfunction popTarget () {\n  targetStack.pop();\n  Dep.target = targetStack[targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      protoAugment(value, arrayMethods);\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar isUsingMicroTask = false;\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n  isUsingMicroTask = true;\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n  isUsingMicroTask = true;\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Technically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals. ' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a special value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if ( true && isDef(data) && isDef(data.nativeOn)) {\n        warn(\n          (\"The .native modifier for v-on is only valid on components but it was used on <\" + tag + \">.\"),\n          context\n        );\n      }\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if ( true && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before () {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.12';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');\n\nvar convertEnumeratedValue = function (key, value) {\n  return isFalsyAttrValue(value) || value === 'false'\n    ? 'false'\n    // allow arbitrary string value for contenteditable\n    : key === 'contenteditable' && isValidContentEditableValue(value)\n      ? value\n      : 'true'\n};\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n       true && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\nvar nodeOps = /*#__PURE__*/Object.freeze({\n  createElement: createElement$1,\n  createElementNS: createElementNS,\n  createTextNode: createTextNode,\n  createComment: createComment,\n  insertBefore: insertBefore,\n  removeChild: removeChild,\n  appendChild: appendChild,\n  parentNode: parentNode,\n  nextSibling: nextSibling,\n  tagName: tagName,\n  setTextContent: setTextContent,\n  setStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (true) {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if ( true && data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        insert(parentElm, vnode.elm, refElm);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (nodeOps.parentNode(ref$$1) === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (true) {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (true) {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (\n    oldVnode,\n    vnode,\n    insertedVnodeQueue,\n    ownerArray,\n    index,\n    removeOnly\n  ) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // clone reused vnode\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (true) {\n          checkDuplicateKeys(ch);\n        }\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (true) {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if ( true &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if ( true &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (true) {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm)) {\n          removeVnodes([oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      dir.oldArg = oldDir.arg;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, convertEnumeratedValue(key, value));\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && value !== '' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + (args !== ')' ? ',' + args : args))\n  }\n}\n\n/*  */\n\n\n\n/* eslint-disable no-unused-vars */\nfunction baseWarn (msg, range) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n/* eslint-enable no-unused-vars */\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value, range, dynamic) {\n  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\n  el.plain = false;\n}\n\nfunction addAttr (el, name, value, range, dynamic) {\n  var attrs = dynamic\n    ? (el.dynamicAttrs || (el.dynamicAttrs = []))\n    : (el.attrs || (el.attrs = []));\n  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\n  el.plain = false;\n}\n\n// add a raw attr (use this in preTransforms)\nfunction addRawAttr (el, name, value, range) {\n  el.attrsMap[name] = value;\n  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  isDynamicArg,\n  modifiers,\n  range\n) {\n  (el.directives || (el.directives = [])).push(rangeSetItem({\n    name: name,\n    rawName: rawName,\n    value: value,\n    arg: arg,\n    isDynamicArg: isDynamicArg,\n    modifiers: modifiers\n  }, range));\n  el.plain = false;\n}\n\nfunction prependModifierMarker (symbol, name, dynamic) {\n  return dynamic\n    ? (\"_p(\" + name + \",\\\"\" + symbol + \"\\\")\")\n    : symbol + name // mark the event as captured\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn,\n  range,\n  dynamic\n) {\n  modifiers = modifiers || emptyObject;\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n     true && warn &&\n    modifiers.prevent && modifiers.passive\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.',\n      range\n    );\n  }\n\n  // normalize click.right and click.middle since they don't actually fire\n  // this is technically browser-specific, but at least for now browsers are\n  // the only target envs that have right/middle clicks.\n  if (modifiers.right) {\n    if (dynamic) {\n      name = \"(\" + name + \")==='click'?'contextmenu':(\" + name + \")\";\n    } else if (name === 'click') {\n      name = 'contextmenu';\n      delete modifiers.right;\n    }\n  } else if (modifiers.middle) {\n    if (dynamic) {\n      name = \"(\" + name + \")==='click'?'mouseup':(\" + name + \")\";\n    } else if (name === 'click') {\n      name = 'mouseup';\n    }\n  }\n\n  // check capture modifier\n  if (modifiers.capture) {\n    delete modifiers.capture;\n    name = prependModifierMarker('!', name, dynamic);\n  }\n  if (modifiers.once) {\n    delete modifiers.once;\n    name = prependModifierMarker('~', name, dynamic);\n  }\n  /* istanbul ignore if */\n  if (modifiers.passive) {\n    delete modifiers.passive;\n    name = prependModifierMarker('&', name, dynamic);\n  }\n\n  var events;\n  if (modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n\n  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers;\n  }\n\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n\n  el.plain = false;\n}\n\nfunction getRawBindingAttr (\n  el,\n  name\n) {\n  return el.rawAttrsMap[':' + name] ||\n    el.rawAttrsMap['v-bind:' + name] ||\n    el.rawAttrsMap[name]\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\nfunction getAndRemoveAttr (\n  el,\n  name,\n  removeFromMap\n) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  if (removeFromMap) {\n    delete el.attrsMap[name];\n  }\n  return val\n}\n\nfunction getAndRemoveAttrByRegex (\n  el,\n  name\n) {\n  var list = el.attrsList;\n  for (var i = 0, l = list.length; i < l; i++) {\n    var attr = list[i];\n    if (name.test(attr.name)) {\n      list.splice(i, 1);\n      return attr\n    }\n  }\n}\n\nfunction rangeSetItem (\n  item,\n  range\n) {\n  if (range) {\n    if (range.start != null) {\n      item.start = range.start;\n    }\n    if (range.end != null) {\n      item.end = range.end;\n    }\n  }\n  return item\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n      \"? \" + baseValueExpression + \".trim()\" +\n      \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: JSON.stringify(value),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var res = parseModel(value);\n  if (res.key === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * Parse a v-model expression into a base path and a final key segment.\n * Handles both dot-path and possible square brackets.\n *\n * Possible cases:\n *\n * - test\n * - test[key]\n * - test[test1[key]]\n * - test[\"a\"][key]\n * - xxx.test[a[a].test1[key]]\n * - test.xxx.a[\"asa\"][test1[key]]\n *\n */\n\nvar len, str, chr, index$1, expressionPos, expressionEndPos;\n\n\n\nfunction parseModel (val) {\n  // Fix https://github.com/vuejs/vue/pull/7730\n  // allow v-model=\"obj.val \" (trailing whitespace)\n  val = val.trim();\n  len = val.length;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    index$1 = val.lastIndexOf('.');\n    if (index$1 > -1) {\n      return {\n        exp: val.slice(0, index$1),\n        key: '\"' + val.slice(index$1 + 1) + '\"'\n      }\n    } else {\n      return {\n        exp: val,\n        key: null\n      }\n    }\n  }\n\n  str = val;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.slice(0, expressionPos),\n    key: val.slice(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (true) {\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\",\n        el.rawAttrsMap['v-model']\n      );\n    }\n  }\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (true) {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.',\n      el.rawAttrsMap['v-model']\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n    \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n      trueValueBinding === 'true'\n        ? (\":(\" + value + \")\")\n        : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n    )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + (genAssignmentCode(value, '$$a.concat([$$v])')) + \")}\" +\n      \"else{$$i>-1&&(\" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + \")}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n\n  // warn if v-bind:value conflicts with v-model\n  // except for inputs with v-bind:type\n  if (true) {\n    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (value$1 && !typeBinding) {\n      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n      warn$1(\n        binding + \"=\\\"\" + value$1 + \"\\\" conflicts with v-model on the same element \" +\n        'because the latter already expands to a value binding internally',\n        el.rawAttrsMap[binding]\n      );\n    }\n  }\n\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler$1 (event, handler, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\n// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp\n// implementation and does not fire microtasks in between event propagation, so\n// safe to exclude.\nvar useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);\n\nfunction add$1 (\n  name,\n  handler,\n  capture,\n  passive\n) {\n  // async edge case #6566: inner click event triggers patch, event handler\n  // attached to outer element during patch, and triggered again. This\n  // happens because browsers fire microtask ticks between event propagation.\n  // the solution is simple: we save the timestamp when a handler is attached,\n  // and the handler would only fire if the event passed to it was fired\n  // AFTER it was attached.\n  if (useMicrotaskFix) {\n    var attachedTimestamp = currentFlushTimestamp;\n    var original = handler;\n    handler = original._wrapper = function (e) {\n      if (\n        // no bubbling, should always fire.\n        // this is just a safety net in case event.timeStamp is unreliable in\n        // certain weird environments...\n        e.target === e.currentTarget ||\n        // event is fired after handler attachment\n        e.timeStamp >= attachedTimestamp ||\n        // bail for environments that have buggy event.timeStamp implementations\n        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState\n        // #9681 QtWebEngine event.timeStamp is negative value\n        e.timeStamp <= 0 ||\n        // #9448 bail if event is fired in another document in a multi-page\n        // electron/nw.js app, since event.timeStamp will be using a different\n        // starting reference\n        e.target.ownerDocument !== document\n      ) {\n        return original.apply(this, arguments)\n      }\n    };\n  }\n  target$1.addEventListener(\n    name,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  name,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    name,\n    handler._wrapper || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nvar svgContainer;\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (!(key in props)) {\n      elm[key] = '';\n    }\n  }\n\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value' && elm.tagName !== 'PROGRESS') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {\n      // IE doesn't support innerHTML for SVG elements\n      svgContainer = svgContainer || document.createElement('div');\n      svgContainer.innerHTML = \"<svg>\" + cur + \"</svg>\";\n      var svg = svgContainer.firstChild;\n      while (elm.firstChild) {\n        elm.removeChild(elm.firstChild);\n      }\n      while (svg.firstChild) {\n        elm.appendChild(svg.firstChild);\n      }\n    } else if (\n      // skip the update if old and new VDOM state is the same.\n      // `value` is handled separately because the DOM value may be temporarily\n      // out of sync with VDOM state due to focus, composition and modifiers.\n      // This  #4521 by skipping the unnecessary `checked` update.\n      cur !== oldProps[key]\n    ) {\n      // some property updates can throw\n      // e.g. `value` on <progress> w/ non-finite value\n      try {\n        elm[key] = cur;\n      } catch (e) {}\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\nvar whitespaceRE = /\\s+/;\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  // JSDOM may return undefined for transition properties\n  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');\n  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');\n  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers\n// in a locale-dependent way, using a comma instead of a dot.\n// If comma is not replaced with a dot, the input will be rounded down (i.e. acting\n// as a floor function) causing unexpected behaviors\nfunction toMs (s) {\n  return Number(s.slice(0, -1).replace(',', '.')) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    context = transitionNode.context;\n    transitionNode = transitionNode.parent;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if ( true && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if ( true && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show && el.parentNode) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n     true && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n};\n\n/*  */\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };\n\nvar isVShowDirective = function (d) { return d.name === 'show'; };\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(isNotTextNode);\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if ( true && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if ( true &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(isVShowDirective)) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  beforeMount: function beforeMount () {\n    var this$1 = this;\n\n    var update = this._update;\n    this._update = function (vnode, hydrating) {\n      var restoreActiveInstance = setActiveInstance(this$1);\n      // force removing pass\n      this$1.__patch__(\n        this$1._vnode,\n        this$1.kept,\n        false, // hydrating\n        true // removeOnly (!important, avoids unnecessary moves)\n      );\n      this$1._vnode = this$1.kept;\n      restoreActiveInstance();\n      update.call(this$1, vnode, hydrating);\n    };\n  },\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (true) {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (e && e.target !== el) {\n            return\n          }\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        true\n      ) {\n        console[console.info ? 'info' : 'log'](\n          'Download the Vue Devtools extension for a better development experience:\\n' +\n          'https://github.com/vuejs/vue-devtools'\n        );\n      }\n    }\n    if ( true &&\n      config.productionTip !== false &&\n      typeof console !== 'undefined'\n    ) {\n      console[console.info ? 'info' : 'log'](\n        \"You are running Vue in development mode.\\n\" +\n        \"Make sure to turn on production mode when deploying for production.\\n\" +\n        \"See more tips at https://vuejs.org/guide/deployment.html\"\n      );\n    }\n  }, 0);\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\n\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var rawTokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, tokenValue;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\n      tokens.push(JSON.stringify(tokenValue));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    rawTokens.push({ '@binding': exp });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex));\n    tokens.push(JSON.stringify(tokenValue));\n  }\n  return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if ( true && staticClass) {\n    var res = parseText(staticClass, options.delimiters);\n    if (res) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.',\n        el.rawAttrsMap['class']\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (true) {\n      var res = parseText(staticStyle, options.delimiters);\n      if (res) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.',\n          el.rawAttrsMap['style']\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n};\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n};\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\nvar dynamicArgAttribute = /^\\s*((?:v-[\\w-]+:|@|:|#)\\[[^=]+\\][^\\s\"'<>\\/=]*)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\nvar ncname = \"[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z\" + (unicodeRegExp.source) + \"]*\";\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\n// #7298: escape - to avoid being passed as HTML comment when inlined in page\nvar comment = /^<!\\--/;\nvar conditionalComment = /^<!\\[/;\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n',\n  '&#9;': '\\t',\n  '&#39;': \"'\"\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n      }\n\n      if (text) {\n        advance(text.length);\n      }\n\n      if (options.chars && text) {\n        options.chars(text, index - text.length, index);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!\\--([\\s\\S]*?)-->/g, '$1') // #7298\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if ( true && !stack.length && options.warn) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"), { start: index + html.length });\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {\n        attr.start = index;\n        advance(attr[0].length);\n        attr.end = index;\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      var value = args[3] || args[4] || args[5] || '';\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines;\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      };\n      if ( true && options.outputSourceRange) {\n        attrs[i].start = args.start + args[0].match(/^\\s*/).length;\n        attrs[i].end = args.end;\n      }\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if ( true &&\n          (i > pos || !tagName) &&\n          options.warn\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\"),\n            { start: stack[i].start, end: stack[i].end }\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:|^#/;\nvar forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\nvar dynamicArgRE = /^\\[.*\\]$/;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^\\.|^v-bind:/;\nvar modifierRE = /\\.[^.\\]]+(?=[^\\]]*$)/g;\n\nvar slotRE = /^v-slot(:|$)|^#/;\n\nvar lineBreakRE = /[\\r\\n]/;\nvar whitespaceRE$1 = /\\s+/g;\n\nvar invalidAttributeRE = /[\\s\"'<>\\/=]/;\n\nvar decodeHTMLCached = cached(he.decode);\n\nvar emptySlotScopeToken = \"_empty_\";\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\nvar maybeComponent;\n\nfunction createASTElement (\n  tag,\n  attrs,\n  parent\n) {\n  return {\n    type: 1,\n    tag: tag,\n    attrsList: attrs,\n    attrsMap: makeAttrsMap(attrs),\n    rawAttrsMap: {},\n    parent: parent,\n    children: []\n  }\n}\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n  var isReservedTag = options.isReservedTag || no;\n  maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var whitespaceOption = options.whitespace;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg, range) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg, range);\n    }\n  }\n\n  function closeElement (element) {\n    trimEndingWhitespace(element);\n    if (!inVPre && !element.processed) {\n      element = processElement(element, options);\n    }\n    // tree management\n    if (!stack.length && element !== root) {\n      // allow root elements with v-if, v-else-if and v-else\n      if (root.if && (element.elseif || element.else)) {\n        if (true) {\n          checkRootConstraints(element);\n        }\n        addIfCondition(root, {\n          exp: element.elseif,\n          block: element\n        });\n      } else if (true) {\n        warnOnce(\n          \"Component template should contain exactly one root element. \" +\n          \"If you are using v-if on multiple elements, \" +\n          \"use v-else-if to chain them instead.\",\n          { start: element.start }\n        );\n      }\n    }\n    if (currentParent && !element.forbidden) {\n      if (element.elseif || element.else) {\n        processIfConditions(element, currentParent);\n      } else {\n        if (element.slotScope) {\n          // scoped slot\n          // keep it in the children list so that v-else(-if) conditions can\n          // find it as the prev node.\n          var name = element.slotTarget || '\"default\"'\n          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        }\n        currentParent.children.push(element);\n        element.parent = currentParent;\n      }\n    }\n\n    // final children cleanup\n    // filter out scoped slots\n    element.children = element.children.filter(function (c) { return !(c).slotScope; });\n    // remove trailing whitespace node again\n    trimEndingWhitespace(element);\n\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n    // apply post-transforms\n    for (var i = 0; i < postTransforms.length; i++) {\n      postTransforms[i](element, options);\n    }\n  }\n\n  function trimEndingWhitespace (el) {\n    // remove trailing whitespace node\n    if (!inPre) {\n      var lastNode;\n      while (\n        (lastNode = el.children[el.children.length - 1]) &&\n        lastNode.type === 3 &&\n        lastNode.text === ' '\n      ) {\n        el.children.pop();\n      }\n    }\n  }\n\n  function checkRootConstraints (el) {\n    if (el.tag === 'slot' || el.tag === 'template') {\n      warnOnce(\n        \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n        'contain multiple nodes.',\n        { start: el.start }\n      );\n    }\n    if (el.attrsMap.hasOwnProperty('v-for')) {\n      warnOnce(\n        'Cannot use v-for on stateful component root element because ' +\n        'it renders multiple elements.',\n        el.rawAttrsMap['v-for']\n      );\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    outputSourceRange: options.outputSourceRange,\n    start: function start (tag, attrs, unary, start$1, end) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = createASTElement(tag, attrs, currentParent);\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (true) {\n        if (options.outputSourceRange) {\n          element.start = start$1;\n          element.end = end;\n          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {\n            cumulated[attr.name] = attr;\n            return cumulated\n          }, {});\n        }\n        attrs.forEach(function (attr) {\n          if (invalidAttributeRE.test(attr.name)) {\n            warn$2(\n              \"Invalid dynamic argument expression: attribute names cannot contain \" +\n              \"spaces, quotes, <, >, / or =.\",\n              {\n                start: attr.start + attr.name.indexOf(\"[\"),\n                end: attr.start + attr.name.length\n              }\n            );\n          }\n        });\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n         true && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.',\n          { start: element.start }\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        element = preTransforms[i](element, options) || element;\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else if (!element.processed) {\n        // structural directives\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n      }\n\n      if (!root) {\n        root = element;\n        if (true) {\n          checkRootConstraints(root);\n        }\n      }\n\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        closeElement(element);\n      }\n    },\n\n    end: function end (tag, start, end$1) {\n      var element = stack[stack.length - 1];\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      if ( true && options.outputSourceRange) {\n        element.end = end$1;\n      }\n      closeElement(element);\n    },\n\n    chars: function chars (text, start, end) {\n      if (!currentParent) {\n        if (true) {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.',\n              { start: start }\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\"),\n              { start: start }\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      if (inPre || text.trim()) {\n        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);\n      } else if (!children.length) {\n        // remove the whitespace-only node right after an opening tag\n        text = '';\n      } else if (whitespaceOption) {\n        if (whitespaceOption === 'condense') {\n          // in condense mode, remove the whitespace node if it contains\n          // line break, otherwise condense to a single space\n          text = lineBreakRE.test(text) ? '' : ' ';\n        } else {\n          text = ' ';\n        }\n      } else {\n        text = preserveWhitespace ? ' ' : '';\n      }\n      if (text) {\n        if (!inPre && whitespaceOption === 'condense') {\n          // condense consecutive whitespaces into single space\n          text = text.replace(whitespaceRE$1, ' ');\n        }\n        var res;\n        var child;\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          child = {\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text: text\n          };\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          child = {\n            type: 3,\n            text: text\n          };\n        }\n        if (child) {\n          if ( true && options.outputSourceRange) {\n            child.start = start;\n            child.end = end;\n          }\n          children.push(child);\n        }\n      }\n    },\n    comment: function comment (text, start, end) {\n      // adding anything as a sibling to the root node is forbidden\n      // comments should still be allowed, but ignored\n      if (currentParent) {\n        var child = {\n          type: 3,\n          text: text,\n          isComment: true\n        };\n        if ( true && options.outputSourceRange) {\n          child.start = start;\n          child.end = end;\n        }\n        currentParent.children.push(child);\n      }\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var list = el.attrsList;\n  var len = list.length;\n  if (len) {\n    var attrs = el.attrs = new Array(len);\n    for (var i = 0; i < len; i++) {\n      attrs[i] = {\n        name: list[i].name,\n        value: JSON.stringify(list[i].value)\n      };\n      if (list[i].start != null) {\n        attrs[i].start = list[i].start;\n        attrs[i].end = list[i].end;\n      }\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processElement (\n  element,\n  options\n) {\n  processKey(element);\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = (\n    !element.key &&\n    !element.scopedSlots &&\n    !element.attrsList.length\n  );\n\n  processRef(element);\n  processSlotContent(element);\n  processSlotOutlet(element);\n  processComponent(element);\n  for (var i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element;\n  }\n  processAttrs(element);\n  return element\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (true) {\n      if (el.tag === 'template') {\n        warn$2(\n          \"<template> cannot be keyed. Place the key on real elements instead.\",\n          getRawBindingAttr(el, 'key')\n        );\n      }\n      if (el.for) {\n        var iterator = el.iterator2 || el.iterator1;\n        var parent = el.parent;\n        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {\n          warn$2(\n            \"Do not use v-for index as key on <transition-group> children, \" +\n            \"this is the same as not using keys.\",\n            getRawBindingAttr(el, 'key'),\n            true /* tip */\n          );\n        }\n      }\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var res = parseFor(exp);\n    if (res) {\n      extend(el, res);\n    } else if (true) {\n      warn$2(\n        (\"Invalid v-for expression: \" + exp),\n        el.rawAttrsMap['v-for']\n      );\n    }\n  }\n}\n\n\n\nfunction parseFor (exp) {\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) { return }\n  var res = {};\n  res.for = inMatch[2].trim();\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\n  var iteratorMatch = alias.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.alias = alias.replace(forIteratorRE, '').trim();\n    res.iterator1 = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.iterator2 = iteratorMatch[2].trim();\n    }\n  } else {\n    res.alias = alias;\n  }\n  return res\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (true) {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\",\n      el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if ( true && children[i].text !== ' ') {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\",\n          children[i]\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\n// handle content being passed to a component as slot,\n// e.g. <template slot=\"xxx\">, <div slot-scope=\"xxx\">\nfunction processSlotContent (el) {\n  var slotScope;\n  if (el.tag === 'template') {\n    slotScope = getAndRemoveAttr(el, 'scope');\n    /* istanbul ignore if */\n    if ( true && slotScope) {\n      warn$2(\n        \"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\n        \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\n        \"can also be used on plain elements in addition to <template> to \" +\n        \"denote scoped slots.\",\n        el.rawAttrsMap['scope'],\n        true\n      );\n    }\n    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n    /* istanbul ignore if */\n    if ( true && el.attrsMap['v-for']) {\n      warn$2(\n        \"Ambiguous combined usage of slot-scope and v-for on <\" + (el.tag) + \"> \" +\n        \"(v-for takes higher priority). Use a wrapper <template> for the \" +\n        \"scoped slot to make it clearer.\",\n        el.rawAttrsMap['slot-scope'],\n        true\n      );\n    }\n    el.slotScope = slotScope;\n  }\n\n  // slot=\"xxx\"\n  var slotTarget = getBindingAttr(el, 'slot');\n  if (slotTarget) {\n    el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);\n    // preserve slot as an attribute for native shadow DOM compat\n    // only for non-scoped slots.\n    if (el.tag !== 'template' && !el.slotScope) {\n      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));\n    }\n  }\n\n  // 2.6 v-slot syntax\n  {\n    if (el.tag === 'template') {\n      // v-slot on <template>\n      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);\n      if (slotBinding) {\n        if (true) {\n          if (el.slotTarget || el.slotScope) {\n            warn$2(\n              \"Unexpected mixed usage of different slot syntaxes.\",\n              el\n            );\n          }\n          if (el.parent && !maybeComponent(el.parent)) {\n            warn$2(\n              \"<template v-slot> can only appear at the root level inside \" +\n              \"the receiving component\",\n              el\n            );\n          }\n        }\n        var ref = getSlotName(slotBinding);\n        var name = ref.name;\n        var dynamic = ref.dynamic;\n        el.slotTarget = name;\n        el.slotTargetDynamic = dynamic;\n        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf\n      }\n    } else {\n      // v-slot on component, denotes default slot\n      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);\n      if (slotBinding$1) {\n        if (true) {\n          if (!maybeComponent(el)) {\n            warn$2(\n              \"v-slot can only be used on components or <template>.\",\n              slotBinding$1\n            );\n          }\n          if (el.slotScope || el.slotTarget) {\n            warn$2(\n              \"Unexpected mixed usage of different slot syntaxes.\",\n              el\n            );\n          }\n          if (el.scopedSlots) {\n            warn$2(\n              \"To avoid scope ambiguity, the default slot should also use \" +\n              \"<template> syntax when there are other named slots.\",\n              slotBinding$1\n            );\n          }\n        }\n        // add the component's children to its default slot\n        var slots = el.scopedSlots || (el.scopedSlots = {});\n        var ref$1 = getSlotName(slotBinding$1);\n        var name$1 = ref$1.name;\n        var dynamic$1 = ref$1.dynamic;\n        var slotContainer = slots[name$1] = createASTElement('template', [], el);\n        slotContainer.slotTarget = name$1;\n        slotContainer.slotTargetDynamic = dynamic$1;\n        slotContainer.children = el.children.filter(function (c) {\n          if (!c.slotScope) {\n            c.parent = slotContainer;\n            return true\n          }\n        });\n        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;\n        // remove children as they are returned from scopedSlots now\n        el.children = [];\n        // mark el non-plain so data gets generated\n        el.plain = false;\n      }\n    }\n  }\n}\n\nfunction getSlotName (binding) {\n  var name = binding.name.replace(slotRE, '');\n  if (!name) {\n    if (binding.name[0] !== '#') {\n      name = 'default';\n    } else if (true) {\n      warn$2(\n        \"v-slot shorthand syntax requires a slot name.\",\n        binding\n      );\n    }\n  }\n  return dynamicArgRE.test(name)\n    // dynamic [name]\n    ? { name: name.slice(1, -1), dynamic: true }\n    // static name\n    : { name: (\"\\\"\" + name + \"\\\"\"), dynamic: false }\n}\n\n// handle <slot/> outlets\nfunction processSlotOutlet (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if ( true && el.key) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\",\n        getRawBindingAttr(el, 'key')\n      );\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name.replace(dirRE, ''));\n      // support .foo shorthand syntax for the .prop modifier\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isDynamic = dynamicArgRE.test(name);\n        if (isDynamic) {\n          name = name.slice(1, -1);\n        }\n        if (\n           true &&\n          value.trim().length === 0\n        ) {\n          warn$2(\n            (\"The value for a v-bind expression cannot be empty. Found in \\\"v-bind:\" + name + \"\\\"\")\n          );\n        }\n        if (modifiers) {\n          if (modifiers.prop && !isDynamic) {\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel && !isDynamic) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            syncGen = genAssignmentCode(value, \"$event\");\n            if (!isDynamic) {\n              addHandler(\n                el,\n                (\"update:\" + (camelize(name))),\n                syncGen,\n                null,\n                false,\n                warn$2,\n                list[i]\n              );\n              if (hyphenate(name) !== camelize(name)) {\n                addHandler(\n                  el,\n                  (\"update:\" + (hyphenate(name))),\n                  syncGen,\n                  null,\n                  false,\n                  warn$2,\n                  list[i]\n                );\n              }\n            } else {\n              // handler w/ dynamic event name\n              addHandler(\n                el,\n                (\"\\\"update:\\\"+(\" + name + \")\"),\n                syncGen,\n                null,\n                false,\n                warn$2,\n                list[i],\n                true // dynamic\n              );\n            }\n          }\n        }\n        if ((modifiers && modifiers.prop) || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value, list[i], isDynamic);\n        } else {\n          addAttr(el, name, value, list[i], isDynamic);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        isDynamic = dynamicArgRE.test(name);\n        if (isDynamic) {\n          name = name.slice(1, -1);\n        }\n        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        isDynamic = false;\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n          if (dynamicArgRE.test(arg)) {\n            arg = arg.slice(1, -1);\n            isDynamic = true;\n          }\n        }\n        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);\n        if ( true && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (true) {\n        var res = parseText(value, delimiters);\n        if (res) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.',\n            list[i]\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value), list[i]);\n      // #6887 firefox doesn't update muted state if set via attribute\n      // even immediately after element creation\n      if (!el.component &&\n          name === 'muted' &&\n          platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n        addProp(el, name, 'true', list[i]);\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n       true &&\n      map[attrs[i].name] && !isIE && !isEdge\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\",\n        el.rawAttrsMap['v-model']\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nfunction preTransformNode (el, options) {\n  if (el.tag === 'input') {\n    var map = el.attrsMap;\n    if (!map['v-model']) {\n      return\n    }\n\n    var typeBinding;\n    if (map[':type'] || map['v-bind:type']) {\n      typeBinding = getBindingAttr(el, 'type');\n    }\n    if (!map.type && !typeBinding && map['v-bind']) {\n      typeBinding = \"(\" + (map['v-bind']) + \").type\";\n    }\n\n    if (typeBinding) {\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n      var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n      // 1. checkbox\n      var branch0 = cloneASTElement(el);\n      // process for on the main node\n      processFor(branch0);\n      addRawAttr(branch0, 'type', 'checkbox');\n      processElement(branch0, options);\n      branch0.processed = true; // prevent it from double-processed\n      branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\n      addIfCondition(branch0, {\n        exp: branch0.if,\n        block: branch0\n      });\n      // 2. add radio else-if condition\n      var branch1 = cloneASTElement(el);\n      getAndRemoveAttr(branch1, 'v-for', true);\n      addRawAttr(branch1, 'type', 'radio');\n      processElement(branch1, options);\n      addIfCondition(branch0, {\n        exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\n        block: branch1\n      });\n      // 3. other\n      var branch2 = cloneASTElement(el);\n      getAndRemoveAttr(branch2, 'v-for', true);\n      addRawAttr(branch2, ':type', typeBinding);\n      processElement(branch2, options);\n      addIfCondition(branch0, {\n        exp: ifCondition,\n        block: branch2\n      });\n\n      if (hasElse) {\n        branch0.else = true;\n      } else if (elseIfCondition) {\n        branch0.elseif = elseIfCondition;\n      }\n\n      return branch0\n    }\n  }\n}\n\nfunction cloneASTElement (el) {\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent)\n}\n\nvar model$1 = {\n  preTransformNode: preTransformNode\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1,\n  model$1\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"), dir);\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"), dir);\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function(?:\\s+[\\w$]+)?\\s*\\(/;\nvar fnInvokeRE = /\\([^)]*?\\);*$/;\nvar simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\n\n// KeyboardEvent.keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// KeyboardEvent.key aliases\nvar keyNames = {\n  // #7880: IE11 and Edge use `Esc` for Escape key name.\n  esc: ['Esc', 'Escape'],\n  tab: 'Tab',\n  enter: 'Enter',\n  // #9112: IE11 uses `Spacebar` for Space key name.\n  space: [' ', 'Spacebar'],\n  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\n  up: ['Up', 'ArrowUp'],\n  left: ['Left', 'ArrowLeft'],\n  right: ['Right', 'ArrowRight'],\n  down: ['Down', 'ArrowDown'],\n  // #9112: IE11 uses `Del` for Delete key name.\n  'delete': ['Backspace', 'Delete', 'Del']\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative\n) {\n  var prefix = isNative ? 'nativeOn:' : 'on:';\n  var staticHandlers = \"\";\n  var dynamicHandlers = \"\";\n  for (var name in events) {\n    var handlerCode = genHandler(events[name]);\n    if (events[name] && events[name].dynamic) {\n      dynamicHandlers += name + \",\" + handlerCode + \",\";\n    } else {\n      staticHandlers += \"\\\"\" + name + \"\\\":\" + handlerCode + \",\";\n    }\n  }\n  staticHandlers = \"{\" + (staticHandlers.slice(0, -1)) + \"}\";\n  if (dynamicHandlers) {\n    return prefix + \"_d(\" + staticHandlers + \",[\" + (dynamicHandlers.slice(0, -1)) + \"])\"\n  } else {\n    return prefix + staticHandlers\n  }\n}\n\nfunction genHandler (handler) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));\n\n  if (!handler.modifiers) {\n    if (isMethodPath || isFunctionExpression) {\n      return handler.value\n    }\n    return (\"function($event){\" + (isFunctionInvocation ? (\"return \" + (handler.value)) : handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else if (key === 'exact') {\n        var modifiers = (handler.modifiers);\n        genModifierCode += genGuard(\n          ['ctrl', 'shift', 'alt', 'meta']\n            .filter(function (keyModifier) { return !modifiers[keyModifier]; })\n            .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\n            .join('||')\n        );\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? (\"return \" + (handler.value) + \"($event)\")\n      : isFunctionExpression\n        ? (\"return (\" + (handler.value) + \")($event)\")\n        : isFunctionInvocation\n          ? (\"return \" + (handler.value))\n          : handler.value;\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\n    // make sure the key filters only apply to KeyboardEvents\n    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake\n    // key events that do not have keyCode property...\n    \"if(!$event.type.indexOf('key')&&\" +\n    (keys.map(genFilterCode).join('&&')) + \")return null;\"\n  )\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var keyCode = keyCodes[key];\n  var keyName = keyNames[key];\n  return (\n    \"_k($event.keyCode,\" +\n    (JSON.stringify(key)) + \",\" +\n    (JSON.stringify(keyCode)) + \",\" +\n    \"$event.key,\" +\n    \"\" + (JSON.stringify(keyName)) +\n    \")\"\n  )\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if ( true && dir.modifiers) {\n    warn(\"v-on without argument does not support modifiers.\");\n  }\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\n\n\n\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n  this.pre = false;\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.parent) {\n    el.pre = el.pre || el.parent.pre;\n  }\n\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data;\n      if (!el.plain || (el.pre && state.maybeComponent(el))) {\n        data = genData$2(el, state);\n      }\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  // Some elements (templates) need to behave differently inside of a v-pre\n  // node.  All pre nodes are static roots, so we can use this as a location to\n  // wrap a state change and reset it upon exiting the pre node.\n  var originalPreState = state.pre;\n  if (el.pre) {\n    state.pre = el.pre;\n  }\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  state.pre = originalPreState;\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n       true && state.warn(\n        \"v-once can only be used inside v-for that is keyed. \",\n        el.rawAttrsMap['v-once']\n      );\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if ( true &&\n    state.maybeComponent(el) &&\n    el.tag !== 'slot' &&\n    el.tag !== 'template' &&\n    !el.key\n  ) {\n    state.warn(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      el.rawAttrsMap['v-for'],\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:\" + (genProps(el.attrs)) + \",\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:\" + (genProps(el.props)) + \",\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true)) + \",\";\n  }\n  // slot target\n  // only for non-scoped slots\n  if (el.slotTarget && !el.slotScope) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el, el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind dynamic argument wrap\n  // v-bind with dynamic arguments must be applied using the same v-bind object\n  // merge helper so that class/style/mustUseProp attrs are handled correctly.\n  if (el.dynamicAttrs) {\n    data = \"_b(\" + data + \",\\\"\" + (el.tag) + \"\\\",\" + (genProps(el.dynamicAttrs)) + \")\";\n  }\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\" + (dir.isDynamicArg ? dir.arg : (\"\\\"\" + (dir.arg) + \"\\\"\"))) : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if ( true && (\n    el.children.length !== 1 || ast.type !== 1\n  )) {\n    state.warn(\n      'Inline-template components must have exactly one child element.',\n      { start: el.start }\n    );\n  }\n  if (ast && ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  el,\n  slots,\n  state\n) {\n  // by default scoped slots are considered \"stable\", this allows child\n  // components with only scoped slots to skip forced updates from parent.\n  // but in some cases we have to bail-out of this optimization\n  // for example if the slot contains dynamic names, has v-if or v-for on them...\n  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {\n    var slot = slots[key];\n    return (\n      slot.slotTargetDynamic ||\n      slot.if ||\n      slot.for ||\n      containsSlotChild(slot) // is passing down slot from parent which may be dynamic\n    )\n  });\n\n  // #9534: if a component with scoped slots is inside a conditional branch,\n  // it's possible for the same component to be reused but with different\n  // compiled slot content. To avoid that, we generate a unique key based on\n  // the generated code of all the slot contents.\n  var needsKey = !!el.if;\n\n  // OR when it is inside another scoped slot or v-for (the reactivity may be\n  // disconnected due to the intermediate scope variable)\n  // #9438, #9506\n  // TODO: this can be further optimized by properly analyzing in-scope bindings\n  // and skip force updating ones that do not actually use scope variables.\n  if (!needsForceUpdate) {\n    var parent = el.parent;\n    while (parent) {\n      if (\n        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||\n        parent.for\n      ) {\n        needsForceUpdate = true;\n        break\n      }\n      if (parent.if) {\n        needsKey = true;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  var generatedSlots = Object.keys(slots)\n    .map(function (key) { return genScopedSlot(slots[key], state); })\n    .join(',');\n\n  return (\"scopedSlots:_u([\" + generatedSlots + \"]\" + (needsForceUpdate ? \",null,true\" : \"\") + (!needsForceUpdate && needsKey ? (\",null,false,\" + (hash(generatedSlots))) : \"\") + \")\")\n}\n\nfunction hash(str) {\n  var hash = 5381;\n  var i = str.length;\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n  return hash >>> 0\n}\n\nfunction containsSlotChild (el) {\n  if (el.type === 1) {\n    if (el.tag === 'slot') {\n      return true\n    }\n    return el.children.some(containsSlotChild)\n  }\n  return false\n}\n\nfunction genScopedSlot (\n  el,\n  state\n) {\n  var isLegacySyntax = el.attrsMap['slot-scope'];\n  if (el.if && !el.ifProcessed && !isLegacySyntax) {\n    return genIf(el, state, genScopedSlot, \"null\")\n  }\n  if (el.for && !el.forProcessed) {\n    return genFor(el, state, genScopedSlot)\n  }\n  var slotScope = el.slotScope === emptySlotScopeToken\n    ? \"\"\n    : String(el.slotScope);\n  var fn = \"function(\" + slotScope + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? el.if && isLegacySyntax\n        ? (\"(\" + (el.if) + \")?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\n        : genChildren(el, state) || 'undefined'\n      : genElement(el, state)) + \"}\";\n  // reverse proxy v-slot without scope on this.$slots\n  var reverseProxy = slotScope ? \"\" : \",proxy:true\";\n  return (\"{key:\" + (el.slotTarget || \"\\\"default\\\"\") + \",fn:\" + fn + reverseProxy + \"}\")\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      var normalizationType = checkSkip\n        ? state.maybeComponent(el$1) ? \",1\" : \",0\"\n        : \"\";\n      return (\"\" + ((altGenElement || genElement)(el$1, state)) + normalizationType)\n    }\n    var normalizationType$1 = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType$1 ? (\",\" + normalizationType$1) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } else if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs || el.dynamicAttrs\n    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({\n        // slot props are camelized\n        name: camelize(attr.name),\n        value: attr.value,\n        dynamic: attr.dynamic\n      }); }))\n    : null;\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var staticProps = \"\";\n  var dynamicProps = \"\";\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    var value = transformSpecialNewlines(prop.value);\n    if (prop.dynamic) {\n      dynamicProps += (prop.name) + \",\" + value + \",\";\n    } else {\n      staticProps += \"\\\"\" + (prop.name) + \"\\\":\" + value + \",\";\n    }\n  }\n  staticProps = \"{\" + (staticProps.slice(0, -1)) + \"}\";\n  if (dynamicProps) {\n    return (\"_d(\" + staticProps + \",[\" + (dynamicProps.slice(0, -1)) + \"])\")\n  } else {\n    return staticProps\n  }\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast, warn) {\n  if (ast) {\n    checkNode(ast, warn);\n  }\n}\n\nfunction checkNode (node, warn) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          var range = node.rawAttrsMap[name];\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), warn, range);\n          } else if (name === 'v-slot' || name[0] === '#') {\n            checkFunctionParameterExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], warn);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, warn, node);\n  }\n}\n\nfunction checkEvent (exp, text, warn, range) {\n  var stripped = exp.replace(stripStringRE, '');\n  var keywordMatch = stripped.match(unaryOperatorsRE);\n  if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {\n    warn(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim()),\n      range\n    );\n  }\n  checkExpression(exp, text, warn, range);\n}\n\nfunction checkFor (node, text, warn, range) {\n  checkExpression(node.for || '', text, warn, range);\n  checkIdentifier(node.alias, 'v-for alias', text, warn, range);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);\n}\n\nfunction checkIdentifier (\n  ident,\n  type,\n  text,\n  warn,\n  range\n) {\n  if (typeof ident === 'string') {\n    try {\n      new Function((\"var \" + ident + \"=_\"));\n    } catch (e) {\n      warn((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())), range);\n    }\n  }\n}\n\nfunction checkExpression (exp, text, warn, range) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      warn(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim()),\n        range\n      );\n    } else {\n      warn(\n        \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\n        \"    \" + exp + \"\\n\\n\" +\n        \"  Raw expression: \" + (text.trim()) + \"\\n\",\n        range\n      );\n    }\n  }\n}\n\nfunction checkFunctionParameterExpression (exp, text, warn, range) {\n  try {\n    new Function(exp, '');\n  } catch (e) {\n    warn(\n      \"invalid function parameter expression: \" + (e.message) + \" in\\n\\n\" +\n      \"    \" + exp + \"\\n\\n\" +\n      \"  Raw expression: \" + (text.trim()) + \"\\n\",\n      range\n    );\n  }\n}\n\n/*  */\n\nvar range = 2;\n\nfunction generateCodeFrame (\n  source,\n  start,\n  end\n) {\n  if ( start === void 0 ) start = 0;\n  if ( end === void 0 ) end = source.length;\n\n  var lines = source.split(/\\r?\\n/);\n  var count = 0;\n  var res = [];\n  for (var i = 0; i < lines.length; i++) {\n    count += lines[i].length + 1;\n    if (count >= start) {\n      for (var j = i - range; j <= i + range || end > count; j++) {\n        if (j < 0 || j >= lines.length) { continue }\n        res.push((\"\" + (j + 1) + (repeat$1(\" \", 3 - String(j + 1).length)) + \"|  \" + (lines[j])));\n        var lineLength = lines[j].length;\n        if (j === i) {\n          // push underline\n          var pad = start - (count - lineLength) + 1;\n          var length = end > count ? lineLength - pad : end - start;\n          res.push(\"   |  \" + repeat$1(\" \", pad) + repeat$1(\"^\", length));\n        } else if (j > i) {\n          if (end > count) {\n            var length$1 = Math.min(end - count, lineLength);\n            res.push(\"   |  \" + repeat$1(\"^\", length$1));\n          }\n          count += lineLength + 1;\n        }\n      }\n      break\n    }\n  }\n  return res.join('\\n')\n}\n\nfunction repeat$1 (str, n) {\n  var result = '';\n  if (n > 0) {\n    while (true) { // eslint-disable-line\n      if (n & 1) { result += str; }\n      n >>>= 1;\n      if (n <= 0) { break }\n      str += str;\n    }\n  }\n  return result\n}\n\n/*  */\n\n\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = extend({}, options);\n    var warn$$1 = options.warn || warn;\n    delete options.warn;\n\n    /* istanbul ignore if */\n    if (true) {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn$$1(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (true) {\n      if (compiled.errors && compiled.errors.length) {\n        if (options.outputSourceRange) {\n          compiled.errors.forEach(function (e) {\n            warn$$1(\n              \"Error compiling template:\\n\\n\" + (e.msg) + \"\\n\\n\" +\n              generateCodeFrame(template, e.start, e.end),\n              vm\n            );\n          });\n        } else {\n          warn$$1(\n            \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n            compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n            vm\n          );\n        }\n      }\n      if (compiled.tips && compiled.tips.length) {\n        if (options.outputSourceRange) {\n          compiled.tips.forEach(function (e) { return tip(e.msg, vm); });\n        } else {\n          compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n        }\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (true) {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn$$1(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n\n      var warn = function (msg, range, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        if ( true && options.outputSourceRange) {\n          // $flow-disable-line\n          var leadingSpaceLength = template.match(/^\\s*/)[0].length;\n\n          warn = function (msg, range, tip) {\n            var data = { msg: msg };\n            if (range) {\n              if (range.start != null) {\n                data.start = range.start + leadingSpaceLength;\n              }\n              if (range.end != null) {\n                data.end = range.end + leadingSpaceLength;\n              }\n            }\n            (tip ? tips : errors).push(data);\n          };\n        }\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives || null),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      finalOptions.warn = warn;\n\n      var compiled = baseCompile(template.trim(), finalOptions);\n      if (true) {\n        detectErrors(compiled.ast, warn);\n      }\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    optimize(ast, options);\n  }\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compile = ref$1.compile;\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nvar div;\nfunction getShouldDecode (href) {\n  div = div || document.createElement('div');\n  div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n  return div.innerHTML.indexOf('&#10;') > 0\n}\n\n// #3663: IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n// #6828: chrome encodes content in a[href]\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue.prototype.$mount;\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n     true && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if ( true && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (true) {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if ( true && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        outputSourceRange: \"development\" !== 'production',\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if ( true && config.performance && mark) {\n        mark('compile end');\n        measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue.compile = compileToFunctions;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue/dist/vue.esm.js\n");

/***/ }),

/***/ "./node_modules/vuex/dist/vuex.esm.js":
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: default, Store, createLogger, createNamespacedHelpers, install, mapActions, mapGetters, mapMutations, mapState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return Store; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createLogger\", function() { return createLogger; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createNamespacedHelpers\", function() { return createNamespacedHelpers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"install\", function() { return install; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapActions\", function() { return mapActions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapGetters\", function() { return mapGetters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapMutations\", function() { return mapMutations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapState\", function() { return mapState; });\n/*!\n * vuex v3.5.1\n * (c) 2020 Evan You\n * @license MIT\n */\nfunction applyMixin (Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    Vue.mixin({ beforeCreate: vuexInit });\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      if ( options === void 0 ) options = {};\n\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit;\n      _init.call(this, options);\n    };\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    var options = this.$options;\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n  }\n}\n\nvar target = typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n    ? global\n    : {};\nvar devtoolHook = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  }, { prepend: true });\n\n  store.subscribeAction(function (action, state) {\n    devtoolHook.emit('vuex:action', action, state);\n  }, { prepend: true });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\nfunction find (list, f) {\n  return list.filter(f)[0]\n}\n\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\nfunction deepCopy (obj, cache) {\n  if ( cache === void 0 ) cache = [];\n\n  // just return if obj is immutable value\n  if (obj === null || typeof obj !== 'object') {\n    return obj\n  }\n\n  // if obj is hit, it is in circular structure\n  var hit = find(cache, function (c) { return c.original === obj; });\n  if (hit) {\n    return hit.copy\n  }\n\n  var copy = Array.isArray(obj) ? [] : {};\n  // put the copy into cache at first\n  // because we want to refer it in recursive deepCopy\n  cache.push({\n    original: obj,\n    copy: copy\n  });\n\n  Object.keys(obj).forEach(function (key) {\n    copy[key] = deepCopy(obj[key], cache);\n  });\n\n  return copy\n}\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nfunction partial (fn, arg) {\n  return function () {\n    return fn(arg)\n  }\n}\n\n// Base data struct for store's module, package with some attribute and method\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  // Store some children item\n  this._children = Object.create(null);\n  // Store the origin module object which passed by programmer\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n\n  // Store the origin module's state\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors = { namespaced: { configurable: true } };\n\nprototypeAccessors.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.hasChild = function hasChild (key) {\n  return key in this._children\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  // register root module (Vuex.Store options)\n  this.register([], rawRootModule, false);\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update([], this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  if ((true)) {\n    assertRawModule(path, rawModule);\n  }\n\n  var newModule = new Module(rawModule, runtime);\n  if (path.length === 0) {\n    this.root = newModule;\n  } else {\n    var parent = this.get(path.slice(0, -1));\n    parent.addChild(path[path.length - 1], newModule);\n  }\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  var child = parent.getChild(key);\n\n  if (!child) {\n    if ((true)) {\n      console.warn(\n        \"[vuex] trying to unregister module '\" + key + \"', which is \" +\n        \"not registered\"\n      );\n    }\n    return\n  }\n\n  if (!child.runtime) {\n    return\n  }\n\n  parent.removeChild(key);\n};\n\nModuleCollection.prototype.isRegistered = function isRegistered (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n\n  return parent.hasChild(key)\n};\n\nfunction update (path, targetModule, newModule) {\n  if ((true)) {\n    assertRawModule(path, newModule);\n  }\n\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        if ((true)) {\n          console.warn(\n            \"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" +\n            'manual reload is needed'\n          );\n        }\n        return\n      }\n      update(\n        path.concat(key),\n        targetModule.getChild(key),\n        newModule.modules[key]\n      );\n    }\n  }\n}\n\nvar functionAssert = {\n  assert: function (value) { return typeof value === 'function'; },\n  expected: 'function'\n};\n\nvar objectAssert = {\n  assert: function (value) { return typeof value === 'function' ||\n    (typeof value === 'object' && typeof value.handler === 'function'); },\n  expected: 'function or object with \"handler\" function'\n};\n\nvar assertTypes = {\n  getters: functionAssert,\n  mutations: functionAssert,\n  actions: objectAssert\n};\n\nfunction assertRawModule (path, rawModule) {\n  Object.keys(assertTypes).forEach(function (key) {\n    if (!rawModule[key]) { return }\n\n    var assertOptions = assertTypes[key];\n\n    forEachValue(rawModule[key], function (value, type) {\n      assert(\n        assertOptions.assert(value),\n        makeAssertionMessage(path, key, type, value, assertOptions.expected)\n      );\n    });\n  });\n}\n\nfunction makeAssertionMessage (path, key, type, value, expected) {\n  var buf = key + \" should be \" + expected + \" but \\\"\" + key + \".\" + type + \"\\\"\";\n  if (path.length > 0) {\n    buf += \" in module \\\"\" + (path.join('.')) + \"\\\"\";\n  }\n  buf += \" is \" + (JSON.stringify(value)) + \".\";\n  return buf\n}\n\nvar Vue; // bind on install\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  // Auto install if it is not done yet and `window` has `Vue`.\n  // To allow users to avoid auto-installation in some cases,\n  // this code should be placed here. See #731\n  if (!Vue && typeof window !== 'undefined' && window.Vue) {\n    install(window.Vue);\n  }\n\n  if ((true)) {\n    assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\");\n    assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n    assert(this instanceof Store, \"store must be called with the new operator.\");\n  }\n\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._actionSubscribers = [];\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._watcherVM = new Vue();\n  this._makeLocalGettersCache = Object.create(null);\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  var state = this._modules.root.state;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state);\n\n  // apply plugins\n  plugins.forEach(function (plugin) { return plugin(this$1); });\n\n  var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;\n  if (useDevtools) {\n    devtoolPlugin(this);\n  }\n};\n\nvar prototypeAccessors$1 = { state: { configurable: true } };\n\nprototypeAccessors$1.state.get = function () {\n  return this._vm._data.$$state\n};\n\nprototypeAccessors$1.state.set = function (v) {\n  if ((true)) {\n    assert(false, \"use store.replaceState() to explicit replace store state.\");\n  }\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    if ((true)) {\n      console.error((\"[vuex] unknown mutation type: \" + type));\n    }\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n\n  this._subscribers\n    .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe\n    .forEach(function (sub) { return sub(mutation, this$1.state); });\n\n  if (\n    ( true) &&\n    options && options.silent\n  ) {\n    console.warn(\n      \"[vuex] mutation type: \" + type + \". Silent option has been removed. \" +\n      'Use the filter functionality in the vue-devtools'\n    );\n  }\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n    var this$1 = this;\n\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var action = { type: type, payload: payload };\n  var entry = this._actions[type];\n  if (!entry) {\n    if ((true)) {\n      console.error((\"[vuex] unknown action type: \" + type));\n    }\n    return\n  }\n\n  try {\n    this._actionSubscribers\n      .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe\n      .filter(function (sub) { return sub.before; })\n      .forEach(function (sub) { return sub.before(action, this$1.state); });\n  } catch (e) {\n    if ((true)) {\n      console.warn(\"[vuex] error in before action subscribers: \");\n      console.error(e);\n    }\n  }\n\n  var result = entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload);\n\n  return new Promise(function (resolve, reject) {\n    result.then(function (res) {\n      try {\n        this$1._actionSubscribers\n          .filter(function (sub) { return sub.after; })\n          .forEach(function (sub) { return sub.after(action, this$1.state); });\n      } catch (e) {\n        if ((true)) {\n          console.warn(\"[vuex] error in after action subscribers: \");\n          console.error(e);\n        }\n      }\n      resolve(res);\n    }, function (error) {\n      try {\n        this$1._actionSubscribers\n          .filter(function (sub) { return sub.error; })\n          .forEach(function (sub) { return sub.error(action, this$1.state, error); });\n      } catch (e) {\n        if ((true)) {\n          console.warn(\"[vuex] error in error action subscribers: \");\n          console.error(e);\n        }\n      }\n      reject(error);\n    });\n  })\n};\n\nStore.prototype.subscribe = function subscribe (fn, options) {\n  return genericSubscribe(fn, this._subscribers, options)\n};\n\nStore.prototype.subscribeAction = function subscribeAction (fn, options) {\n  var subs = typeof fn === 'function' ? { before: fn } : fn;\n  return genericSubscribe(subs, this._actionSubscribers, options)\n};\n\nStore.prototype.watch = function watch (getter, cb, options) {\n    var this$1 = this;\n\n  if ((true)) {\n    assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n  }\n  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm._data.$$state = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule, options) {\n    if ( options === void 0 ) options = {};\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if ((true)) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n    assert(path.length > 0, 'cannot register the root module by using registerModule.');\n  }\n\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path), options.preserveState);\n  // reset store to update getters...\n  resetStoreVM(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if ((true)) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  }\n\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    Vue.delete(parentState, path[path.length - 1]);\n  });\n  resetStore(this);\n};\n\nStore.prototype.hasModule = function hasModule (path) {\n  if (typeof path === 'string') { path = [path]; }\n\n  if ((true)) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  }\n\n  return this._modules.isRegistered(path)\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors$1 );\n\nfunction genericSubscribe (fn, subs, options) {\n  if (subs.indexOf(fn) < 0) {\n    options && options.prepend\n      ? subs.unshift(fn)\n      : subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n}\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset vm\n  resetStoreVM(store, state, hot);\n}\n\nfunction resetStoreVM (store, state, hot) {\n  var oldVm = store._vm;\n\n  // bind store public getters\n  store.getters = {};\n  // reset local getters cache\n  store._makeLocalGettersCache = Object.create(null);\n  var wrappedGetters = store._wrappedGetters;\n  var computed = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    // direct inline function use will lead to closure preserving oldVm.\n    // using partial to return function with only arguments preserved in closure environment.\n    computed[key] = partial(fn, store);\n    Object.defineProperty(store.getters, key, {\n      get: function () { return store._vm[key]; },\n      enumerable: true // for local getters\n    });\n  });\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed: computed\n  });\n  Vue.config.silent = silent;\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldVm._data.$$state = null;\n      });\n    }\n    Vue.nextTick(function () { return oldVm.$destroy(); });\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    if (store._modulesNamespaceMap[namespace] && (\"development\" !== 'production')) {\n      console.error((\"[vuex] duplicate namespace \" + namespace + \" for the namespaced module \" + (path.join('/'))));\n    }\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      if ((true)) {\n        if (moduleName in parentState) {\n          console.warn(\n            (\"[vuex] state field \\\"\" + moduleName + \"\\\" was overridden by a module with the same name at \\\"\" + (path.join('.')) + \"\\\"\")\n          );\n        }\n      }\n      Vue.set(parentState, moduleName, module.state);\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var type = action.root ? key : namespace + key;\n    var handler = action.handler || action;\n    registerAction(store, type, handler, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if (( true) && !store._actions[type]) {\n          console.error((\"[vuex] unknown local action type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if (( true) && !store._mutations[type]) {\n          console.error((\"[vuex] unknown local mutation type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by vm update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  if (!store._makeLocalGettersCache[namespace]) {\n    var gettersProxy = {};\n    var splitPos = namespace.length;\n    Object.keys(store.getters).forEach(function (type) {\n      // skip if the target getter is not match this namespace\n      if (type.slice(0, splitPos) !== namespace) { return }\n\n      // extract local getter type\n      var localType = type.slice(splitPos);\n\n      // Add a port to the getters proxy.\n      // Define as getter property because\n      // we do not want to evaluate the getters in this time.\n      Object.defineProperty(gettersProxy, localType, {\n        get: function () { return store.getters[type]; },\n        enumerable: true\n      });\n    });\n    store._makeLocalGettersCache[namespace] = gettersProxy;\n  }\n\n  return store._makeLocalGettersCache[namespace]\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload) {\n    var res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    if ((true)) {\n      console.error((\"[vuex] duplicate getter key: \" + type));\n    }\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  store._vm.$watch(function () { return this._data.$$state }, function () {\n    if ((true)) {\n      assert(store._committing, \"do not mutate vuex store state outside mutation handlers.\");\n    }\n  }, { deep: true, sync: true });\n}\n\nfunction getNestedState (state, path) {\n  return path.reduce(function (state, key) { return state[key]; }, state)\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  if ((true)) {\n    assert(typeof type === 'string', (\"expects string as the type, but found \" + (typeof type) + \".\"));\n  }\n\n  return { type: type, payload: payload, options: options }\n}\n\nfunction install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    if ((true)) {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      );\n    }\n    return\n  }\n  Vue = _Vue;\n  applyMixin(Vue);\n}\n\n/**\n * Reduce the code which written in Vue.js for getting the state.\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.\n * @param {Object}\n */\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  if (( true) && !isValidMap(states)) {\n    console.error('[vuex] mapState: mapper parameter must be either an Array or an Object');\n  }\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for committing the mutation\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept anthor params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.\n * @return {Object}\n */\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  if (( true) && !isValidMap(mutations)) {\n    console.error('[vuex] mapMutations: mapper parameter must be either an Array or an Object');\n  }\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      // Get the commit method from store\n      var commit = this.$store.commit;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);\n        if (!module) {\n          return\n        }\n        commit = module.context.commit;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [commit].concat(args))\n        : commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for getting the getters\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} getters\n * @return {Object}\n */\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  if (( true) && !isValidMap(getters)) {\n    console.error('[vuex] mapGetters: mapper parameter must be either an Array or an Object');\n  }\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    // The namespace has been mutated by normalizeNamespace\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return\n      }\n      if (( true) && !(val in this.$store.getters)) {\n        console.error((\"[vuex] unknown getter: \" + val));\n        return\n      }\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for dispatch the action\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.\n * @return {Object}\n */\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  if (( true) && !isValidMap(actions)) {\n    console.error('[vuex] mapActions: mapper parameter must be either an Array or an Object');\n  }\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      // get dispatch function from store\n      var dispatch = this.$store.dispatch;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);\n        if (!module) {\n          return\n        }\n        dispatch = module.context.dispatch;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [dispatch].concat(args))\n        : dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\n/**\n * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object\n * @param {String} namespace\n * @return {Object}\n */\nvar createNamespacedHelpers = function (namespace) { return ({\n  mapState: mapState.bind(null, namespace),\n  mapGetters: mapGetters.bind(null, namespace),\n  mapMutations: mapMutations.bind(null, namespace),\n  mapActions: mapActions.bind(null, namespace)\n}); };\n\n/**\n * Normalize the map\n * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]\n * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]\n * @param {Array|Object} map\n * @return {Object}\n */\nfunction normalizeMap (map) {\n  if (!isValidMap(map)) {\n    return []\n  }\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\n/**\n * Validate whether given map is valid or not\n * @param {*} map\n * @return {Boolean}\n */\nfunction isValidMap (map) {\n  return Array.isArray(map) || isObject(map)\n}\n\n/**\n * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.\n * @param {Function} fn\n * @return {Function}\n */\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map)\n  }\n}\n\n/**\n * Search a special module from store by namespace. if module not exist, print error message.\n * @param {Object} store\n * @param {String} helper\n * @param {String} namespace\n * @return {Object}\n */\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if (( true) && !module) {\n    console.error((\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace));\n  }\n  return module\n}\n\n// Credits: borrowed code from fcomb/redux-logger\n\nfunction createLogger (ref) {\n  if ( ref === void 0 ) ref = {};\n  var collapsed = ref.collapsed; if ( collapsed === void 0 ) collapsed = true;\n  var filter = ref.filter; if ( filter === void 0 ) filter = function (mutation, stateBefore, stateAfter) { return true; };\n  var transformer = ref.transformer; if ( transformer === void 0 ) transformer = function (state) { return state; };\n  var mutationTransformer = ref.mutationTransformer; if ( mutationTransformer === void 0 ) mutationTransformer = function (mut) { return mut; };\n  var actionFilter = ref.actionFilter; if ( actionFilter === void 0 ) actionFilter = function (action, state) { return true; };\n  var actionTransformer = ref.actionTransformer; if ( actionTransformer === void 0 ) actionTransformer = function (act) { return act; };\n  var logMutations = ref.logMutations; if ( logMutations === void 0 ) logMutations = true;\n  var logActions = ref.logActions; if ( logActions === void 0 ) logActions = true;\n  var logger = ref.logger; if ( logger === void 0 ) logger = console;\n\n  return function (store) {\n    var prevState = deepCopy(store.state);\n\n    if (typeof logger === 'undefined') {\n      return\n    }\n\n    if (logMutations) {\n      store.subscribe(function (mutation, state) {\n        var nextState = deepCopy(state);\n\n        if (filter(mutation, prevState, nextState)) {\n          var formattedTime = getFormattedTime();\n          var formattedMutation = mutationTransformer(mutation);\n          var message = \"mutation \" + (mutation.type) + formattedTime;\n\n          startMessage(logger, message, collapsed);\n          logger.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState));\n          logger.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation);\n          logger.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState));\n          endMessage(logger);\n        }\n\n        prevState = nextState;\n      });\n    }\n\n    if (logActions) {\n      store.subscribeAction(function (action, state) {\n        if (actionFilter(action, state)) {\n          var formattedTime = getFormattedTime();\n          var formattedAction = actionTransformer(action);\n          var message = \"action \" + (action.type) + formattedTime;\n\n          startMessage(logger, message, collapsed);\n          logger.log('%c action', 'color: #03A9F4; font-weight: bold', formattedAction);\n          endMessage(logger);\n        }\n      });\n    }\n  }\n}\n\nfunction startMessage (logger, message, collapsed) {\n  var startMessage = collapsed\n    ? logger.groupCollapsed\n    : logger.group;\n\n  // render\n  try {\n    startMessage.call(logger, message);\n  } catch (e) {\n    logger.log(message);\n  }\n}\n\nfunction endMessage (logger) {\n  try {\n    logger.groupEnd();\n  } catch (e) {\n    logger.log('—— log end ——');\n  }\n}\n\nfunction getFormattedTime () {\n  var time = new Date();\n  return (\" @ \" + (pad(time.getHours(), 2)) + \":\" + (pad(time.getMinutes(), 2)) + \":\" + (pad(time.getSeconds(), 2)) + \".\" + (pad(time.getMilliseconds(), 3)))\n}\n\nfunction repeat (str, times) {\n  return (new Array(times + 1)).join(str)\n}\n\nfunction pad (num, maxLength) {\n  return repeat('0', maxLength - num.toString().length) + num\n}\n\nvar index = {\n  Store: Store,\n  install: install,\n  version: '3.5.1',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions,\n  createNamespacedHelpers: createNamespacedHelpers,\n  createLogger: createLogger\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index);\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vuex/dist/vuex.esm.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/zen-observable/index.js":
/*!**********************************************!*\
  !*** ./node_modules/zen-observable/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/Observable.js */ \"./node_modules/zen-observable/lib/Observable.js\").Observable;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvemVuLW9ic2VydmFibGUvaW5kZXguanM/MDAxMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyw0RUFBcUIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvemVuLW9ic2VydmFibGUvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL09ic2VydmFibGUuanMnKS5PYnNlcnZhYmxlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/zen-observable/index.js\n");

/***/ }),

/***/ "./node_modules/zen-observable/lib/Observable.js":
/*!*******************************************************!*\
  !*** ./node_modules/zen-observable/lib/Observable.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Observable = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// === Symbol Support ===\nvar hasSymbols = function () {\n  return typeof Symbol === 'function';\n};\n\nvar hasSymbol = function (name) {\n  return hasSymbols() && Boolean(Symbol[name]);\n};\n\nvar getSymbol = function (name) {\n  return hasSymbol(name) ? Symbol[name] : '@@' + name;\n};\n\nif (hasSymbols() && !hasSymbol('observable')) {\n  Symbol.observable = Symbol('observable');\n}\n\nvar SymbolIterator = getSymbol('iterator');\nvar SymbolObservable = getSymbol('observable');\nvar SymbolSpecies = getSymbol('species'); // === Abstract Operations ===\n\nfunction getMethod(obj, key) {\n  var value = obj[key];\n  if (value == null) return undefined;\n  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');\n  return value;\n}\n\nfunction getSpecies(obj) {\n  var ctor = obj.constructor;\n\n  if (ctor !== undefined) {\n    ctor = ctor[SymbolSpecies];\n\n    if (ctor === null) {\n      ctor = undefined;\n    }\n  }\n\n  return ctor !== undefined ? ctor : Observable;\n}\n\nfunction isObservable(x) {\n  return x instanceof Observable; // SPEC: Brand check\n}\n\nfunction hostReportError(e) {\n  if (hostReportError.log) {\n    hostReportError.log(e);\n  } else {\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nfunction enqueue(fn) {\n  Promise.resolve().then(function () {\n    try {\n      fn();\n    } catch (e) {\n      hostReportError(e);\n    }\n  });\n}\n\nfunction cleanupSubscription(subscription) {\n  var cleanup = subscription._cleanup;\n  if (cleanup === undefined) return;\n  subscription._cleanup = undefined;\n\n  if (!cleanup) {\n    return;\n  }\n\n  try {\n    if (typeof cleanup === 'function') {\n      cleanup();\n    } else {\n      var unsubscribe = getMethod(cleanup, 'unsubscribe');\n\n      if (unsubscribe) {\n        unsubscribe.call(cleanup);\n      }\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n}\n\nfunction closeSubscription(subscription) {\n  subscription._observer = undefined;\n  subscription._queue = undefined;\n  subscription._state = 'closed';\n}\n\nfunction flushSubscription(subscription) {\n  var queue = subscription._queue;\n\n  if (!queue) {\n    return;\n  }\n\n  subscription._queue = undefined;\n  subscription._state = 'ready';\n\n  for (var i = 0; i < queue.length; ++i) {\n    notifySubscription(subscription, queue[i].type, queue[i].value);\n    if (subscription._state === 'closed') break;\n  }\n}\n\nfunction notifySubscription(subscription, type, value) {\n  subscription._state = 'running';\n  var observer = subscription._observer;\n\n  try {\n    var m = getMethod(observer, type);\n\n    switch (type) {\n      case 'next':\n        if (m) m.call(observer, value);\n        break;\n\n      case 'error':\n        closeSubscription(subscription);\n        if (m) m.call(observer, value);else throw value;\n        break;\n\n      case 'complete':\n        closeSubscription(subscription);\n        if (m) m.call(observer);\n        break;\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n\n  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';\n}\n\nfunction onNotify(subscription, type, value) {\n  if (subscription._state === 'closed') return;\n\n  if (subscription._state === 'buffering') {\n    subscription._queue.push({\n      type: type,\n      value: value\n    });\n\n    return;\n  }\n\n  if (subscription._state !== 'ready') {\n    subscription._state = 'buffering';\n    subscription._queue = [{\n      type: type,\n      value: value\n    }];\n    enqueue(function () {\n      return flushSubscription(subscription);\n    });\n    return;\n  }\n\n  notifySubscription(subscription, type, value);\n}\n\nvar Subscription =\n/*#__PURE__*/\nfunction () {\n  function Subscription(observer, subscriber) {\n    _classCallCheck(this, Subscription);\n\n    // ASSERT: observer is an object\n    // ASSERT: subscriber is callable\n    this._cleanup = undefined;\n    this._observer = observer;\n    this._queue = undefined;\n    this._state = 'initializing';\n    var subscriptionObserver = new SubscriptionObserver(this);\n\n    try {\n      this._cleanup = subscriber.call(undefined, subscriptionObserver);\n    } catch (e) {\n      subscriptionObserver.error(e);\n    }\n\n    if (this._state === 'initializing') this._state = 'ready';\n  }\n\n  _createClass(Subscription, [{\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      if (this._state !== 'closed') {\n        closeSubscription(this);\n        cleanupSubscription(this);\n      }\n    }\n  }, {\n    key: \"closed\",\n    get: function () {\n      return this._state === 'closed';\n    }\n  }]);\n\n  return Subscription;\n}();\n\nvar SubscriptionObserver =\n/*#__PURE__*/\nfunction () {\n  function SubscriptionObserver(subscription) {\n    _classCallCheck(this, SubscriptionObserver);\n\n    this._subscription = subscription;\n  }\n\n  _createClass(SubscriptionObserver, [{\n    key: \"next\",\n    value: function next(value) {\n      onNotify(this._subscription, 'next', value);\n    }\n  }, {\n    key: \"error\",\n    value: function error(value) {\n      onNotify(this._subscription, 'error', value);\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      onNotify(this._subscription, 'complete');\n    }\n  }, {\n    key: \"closed\",\n    get: function () {\n      return this._subscription._state === 'closed';\n    }\n  }]);\n\n  return SubscriptionObserver;\n}();\n\nvar Observable =\n/*#__PURE__*/\nfunction () {\n  function Observable(subscriber) {\n    _classCallCheck(this, Observable);\n\n    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');\n    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');\n    this._subscriber = subscriber;\n  }\n\n  _createClass(Observable, [{\n    key: \"subscribe\",\n    value: function subscribe(observer) {\n      if (typeof observer !== 'object' || observer === null) {\n        observer = {\n          next: observer,\n          error: arguments[1],\n          complete: arguments[2]\n        };\n      }\n\n      return new Subscription(observer, this._subscriber);\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (typeof fn !== 'function') {\n          reject(new TypeError(fn + ' is not a function'));\n          return;\n        }\n\n        function done() {\n          subscription.unsubscribe();\n          resolve();\n        }\n\n        var subscription = _this.subscribe({\n          next: function (value) {\n            try {\n              fn(value, done);\n            } catch (e) {\n              reject(e);\n              subscription.unsubscribe();\n            }\n          },\n          error: reject,\n          complete: resolve\n        });\n      });\n    }\n  }, {\n    key: \"map\",\n    value: function map(fn) {\n      var _this2 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        return _this2.subscribe({\n          next: function (value) {\n            try {\n              value = fn(value);\n            } catch (e) {\n              return observer.error(e);\n            }\n\n            observer.next(value);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(fn) {\n      var _this3 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        return _this3.subscribe({\n          next: function (value) {\n            try {\n              if (!fn(value)) return;\n            } catch (e) {\n              return observer.error(e);\n            }\n\n            observer.next(value);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"reduce\",\n    value: function reduce(fn) {\n      var _this4 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      var hasSeed = arguments.length > 1;\n      var hasValue = false;\n      var seed = arguments[1];\n      var acc = seed;\n      return new C(function (observer) {\n        return _this4.subscribe({\n          next: function (value) {\n            var first = !hasValue;\n            hasValue = true;\n\n            if (!first || hasSeed) {\n              try {\n                acc = fn(acc, value);\n              } catch (e) {\n                return observer.error(e);\n              }\n            } else {\n              acc = value;\n            }\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));\n            observer.next(acc);\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      var _this5 = this;\n\n      for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n        sources[_key] = arguments[_key];\n      }\n\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        var subscription;\n        var index = 0;\n\n        function startNext(next) {\n          subscription = next.subscribe({\n            next: function (v) {\n              observer.next(v);\n            },\n            error: function (e) {\n              observer.error(e);\n            },\n            complete: function () {\n              if (index === sources.length) {\n                subscription = undefined;\n                observer.complete();\n              } else {\n                startNext(C.from(sources[index++]));\n              }\n            }\n          });\n        }\n\n        startNext(_this5);\n        return function () {\n          if (subscription) {\n            subscription.unsubscribe();\n            subscription = undefined;\n          }\n        };\n      });\n    }\n  }, {\n    key: \"flatMap\",\n    value: function flatMap(fn) {\n      var _this6 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n      var C = getSpecies(this);\n      return new C(function (observer) {\n        var subscriptions = [];\n\n        var outer = _this6.subscribe({\n          next: function (value) {\n            if (fn) {\n              try {\n                value = fn(value);\n              } catch (e) {\n                return observer.error(e);\n              }\n            }\n\n            var inner = C.from(value).subscribe({\n              next: function (value) {\n                observer.next(value);\n              },\n              error: function (e) {\n                observer.error(e);\n              },\n              complete: function () {\n                var i = subscriptions.indexOf(inner);\n                if (i >= 0) subscriptions.splice(i, 1);\n                completeIfDone();\n              }\n            });\n            subscriptions.push(inner);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            completeIfDone();\n          }\n        });\n\n        function completeIfDone() {\n          if (outer.closed && subscriptions.length === 0) observer.complete();\n        }\n\n        return function () {\n          subscriptions.forEach(function (s) {\n            return s.unsubscribe();\n          });\n          outer.unsubscribe();\n        };\n      });\n    }\n  }, {\n    key: SymbolObservable,\n    value: function () {\n      return this;\n    }\n  }], [{\n    key: \"from\",\n    value: function from(x) {\n      var C = typeof this === 'function' ? this : Observable;\n      if (x == null) throw new TypeError(x + ' is not an object');\n      var method = getMethod(x, SymbolObservable);\n\n      if (method) {\n        var observable = method.call(x);\n        if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');\n        if (isObservable(observable) && observable.constructor === C) return observable;\n        return new C(function (observer) {\n          return observable.subscribe(observer);\n        });\n      }\n\n      if (hasSymbol('iterator')) {\n        method = getMethod(x, SymbolIterator);\n\n        if (method) {\n          return new C(function (observer) {\n            enqueue(function () {\n              if (observer.closed) return;\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  var _item = _step.value;\n                  observer.next(_item);\n                  if (observer.closed) return;\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n\n              observer.complete();\n            });\n          });\n        }\n      }\n\n      if (Array.isArray(x)) {\n        return new C(function (observer) {\n          enqueue(function () {\n            if (observer.closed) return;\n\n            for (var i = 0; i < x.length; ++i) {\n              observer.next(x[i]);\n              if (observer.closed) return;\n            }\n\n            observer.complete();\n          });\n        });\n      }\n\n      throw new TypeError(x + ' is not observable');\n    }\n  }, {\n    key: \"of\",\n    value: function of() {\n      for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        items[_key2] = arguments[_key2];\n      }\n\n      var C = typeof this === 'function' ? this : Observable;\n      return new C(function (observer) {\n        enqueue(function () {\n          if (observer.closed) return;\n\n          for (var i = 0; i < items.length; ++i) {\n            observer.next(items[i]);\n            if (observer.closed) return;\n          }\n\n          observer.complete();\n        });\n      });\n    }\n  }, {\n    key: SymbolSpecies,\n    get: function () {\n      return this;\n    }\n  }]);\n\n  return Observable;\n}();\n\nexports.Observable = Observable;\n\nif (hasSymbols()) {\n  Object.defineProperty(Observable, Symbol('extensions'), {\n    value: {\n      symbol: SymbolObservable,\n      hostReportError: hostReportError\n    },\n    configurable: true\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/zen-observable/lib/Observable.js\n");

/***/ }),

/***/ "./src/App.js":
/*!********************!*\
  !*** ./src/App.js ***!
  \********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_AnnotationWrapper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/AnnotationWrapper */ \"./src/components/AnnotationWrapper.js\");\n/* harmony import */ var _components_CourseRecommondation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/CourseRecommondation */ \"./src/components/CourseRecommondation.js\");\n/* harmony import */ var _components_ReadingProgress__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/ReadingProgress */ \"./src/components/ReadingProgress.js\");\n/* harmony import */ var _components_ReadingTime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/ReadingTime */ \"./src/components/ReadingTime.js\");\n/* harmony import */ var _components_TableOfContent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/TableOfContent */ \"./src/components/TableOfContent.js\");\n/* harmony import */ var _components_Search__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/Search */ \"./src/components/Search.js\");\n/* harmony import */ var _styles_main_scss__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./styles/main.scss */ \"./src/styles/main.scss\");\n/* harmony import */ var _styles_main_scss__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_styles_main_scss__WEBPACK_IMPORTED_MODULE_7__);\n/**\n * TODO\n * ---\n * - replace jquery event handling\n *\n */\n\n // import Bookmark from './components/Bookmark';\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (Vue, Store, utils, logger, context) {\n  const pageStore = new Store(context);\n  document.body.appendChild((() => {\n    const div = document.createElement('div');\n    div.setAttribute('id', 'annotation-toolbar-popover');\n    return div;\n  })());\n  new Vue({\n    el: '#annotation-toolbar-popover',\n    render: h => h(_components_AnnotationWrapper__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n  });\n  new Vue({\n    el: 'longpage-container',\n    components: {\n      CourseRecommondation: _components_CourseRecommondation__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n      ReadingProgress: _components_ReadingProgress__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n      ReadingTime: _components_ReadingTime__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n      Search: _components_Search__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n      TableOfContent: _components_TableOfContent__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n    },\n    store: pageStore.store,\n    data: function () {\n      return {\n        context: context,\n        tabContentVisible: false\n      };\n    },\n    created: function () {\n      let _this = this;\n\n      document.addEventListener('keyup', function (evt) {\n        if (evt.keyCode === 27) {\n          _this.hideTabContent();\n        }\n      });\n    },\n    mounted: function () {\n      var _this = this;\n\n      this.$store.dispatch('loadBookmarks'); // log bootstrap interactions\n\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()('.longpage-citation').click(function () {\n        _this.log('citation_view', {\n          citation: jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).data('content')\n        });\n      });\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()('.longpage-footnote').click(function () {\n        _this.log('footnote_view', {\n          title: jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).find('button').data('original-title'),\n          text: jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).find('button').data('content')\n        });\n      });\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()('.longpage-crossref').click(function () {\n        _this.log('crossref_follow', {\n          source: jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).text(),\n          target: jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).attr('href'),\n          parent: jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).parent().attr('id')\n        });\n      });\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()('.longpage-assignment-link').click(function () {\n        _this.log('assignment_open', {\n          target: jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).attr('href')\n        });\n      });\n    },\n    methods: {\n      log(key, values) {\n        logger.add(key, values);\n      },\n\n      showTabContent() {\n        this.tabContentVisible = true;\n      },\n\n      hideTabContent() {\n        this.tabContentVisible = false;\n\n        if (document.querySelector('#longpage-features').querySelector('a.active.show')) {\n          document.querySelector('#longpage-features').querySelector('a.active.show').classList.remove(\"active\");\n        }\n      },\n\n      followLink: function (target, event) {\n        let elem = document.getElementById(target);\n\n        if (!elem) {\n          return;\n        } //this.$emit('log', 'toc_entry_open', { level: level, target: target, title: elem.innerHTML });\n        //history.pushState(null, null, target)\n\n\n        let elScrollOffset = elem.getBoundingClientRect().top;\n        let scrollOffset = window.pageYOffset || document.documentElement.scrollTop;\n        let padding = 150;\n        window.scroll({\n          top: elScrollOffset + scrollOffset - padding,\n          behavior: 'smooth'\n        });\n        this.hideTabContent();\n        event.preventDefault();\n      }\n    },\n    template: `\n            <div>\n                <nav id=\"longpage-navbar\" class=\"navbar-expand navbar-light bg-light py-2 mx-0 pl-1 pr-2\">\n                    <div class=\"row w-100 px-0 mx-0\">\n                        <span class=\"title-toc col-4 col-sm-4 col-xs-12\">\n                            <a class=\"navbar-brand\">{{ context.pagename }}</a>\n                        </span>\n                        <div class=\"col-8 col-md-8 col-xs-12\">\n                            <ul class=\"nav nav-tabs\" id=\"longpage-features\" role=\"tablist\">\n                                <li class=\"nav-item\">\n                                    <a class=\"nav-link\" id=\"toc-tab\" title=\"Inhaltsverzeichnis\" data-toggle=\"tab\" href=\"#tableofcontent\" role=\"tab\" aria-controls=\"tableofcontents\" aria-selected=\"false\" @click=\"showTabContent()\">\n                                        <i class=\"fa fa-list\"></i><span class=\"ml-1 d-none d-md-inline\">Inhaltsverzeichnis</span>\n                                    </a>\n                                </li>\n                                <li hidden class=\"nav-item\">\n                                    <a class=\"nav-link\" id=\"concepts-tab\" title=\"Concept Map\" data-toggle=\"tab\" href=\"#concepts\" role=\"tab\" aria-controls=\"concepts\" aria-selected=\"false\" @click=\"showTabContent()\">\n                                        <i class=\"fa fa-map\"></i><span class=\"ml-1 d-none d-md-inline\">Concept Map</span>\n                                    </a>\n                                </li>\n                                <li hidden class=\"nav-item\">\n                                    <a class=\"nav-link\" id=\"tests-tab\" title=\"Selbsttests\" data-toggle=\"tab\" href=\"#tests\" role=\"tab\" aria-controls=\"tests\" aria-selected=\"false\" @click=\"showTabContent()\">\n                                        <i class=\"fa fa-check\"></i> <span class=\"ml-1 d-none d-md-inline\">Selbsttestaufgaben</span>\n                                    </a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"nav-link\" id=\"bookmarks-tab\" title=\"Lesezeichen\" data-toggle=\"tab\" href=\"#bookmarks\" role=\"tab\" aria-controls=\"bookmarkss\" aria-selected=\"false\" @click=\"showTabContent()\">\n                                        <i class=\"fa fa-bookmark\"></i><span class=\"ml-1 d-none d-md-inline\">Lesezeichen</span>\n                                    </a>\n                                </li>\n                                <li hidden class=\"nav-item\">\n                                    <a class=\"nav-link\" id=\"annotations-tab\" title=\"Hervorhebungen\" data-toggle=\"tab\" href=\"#annotations\" role=\"tab\" aria-controls=\"annotations\" aria-selected=\"false\" @click=\"showTabContent()\">\n                                        <i class=\"fa fa-pencil\"></i><span class=\"ml-1 d-none d-md-inline\">Hervorhebungen</span>\n                                    </a>\n                                </li>\n                                <li class=\"nav-item\">\n                                    <a class=\"nav-link\" id=\"search-tab\" data-toggle=\"tab\" href=\"#search\" role=\"tab\" aria-controls=\"search\" aria-selected=\"false\" @click=\"showTabContent()\">\n                                        <i class=\"fa fa-search\"></i> <span class=\"ml-1 d-none d-md-inline\">Suche</span>\n                                    </a>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    \n                    <!-- Longpage Feature Tabs -->\n                    <div :style=\"{display: tabContentVisible ? 'block' : 'none'}\" class=\"tab-content\" id=\"myTabContent\">\n                        <div class=\"tab-pane fade p-3\" id=\"tableofcontent\" role=\"tabpanel\" aria-labelledby=\"toc-tab\">\n                            <TableOfContent @hideTabContent='hideTabContent' v-on:log='log'></TableOfContent>\n                        </div>\n                        <div class=\"tab-pane fade v\" id=\"concepts\" role=\"tabpanel\" aria-labelledby=\"toc-tab\">\n                            <CourseRecommondation @hideTabContent='hideTabContent' v-on:log='log'></CourseRecommondation>\n                        </div>\n                        <div class=\"tab-pane fade p-3\" id=\"tests\" role=\"tabpanel\" aria-labelledby=\"toc-tab\">\n                            Tests\n                            <button type=\"button\" class=\"close ml-auto align-self-center d-block\" aria-label=\"Close\" v-on:click=\"hideTabContent()\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div class=\"tab-pane fade p-3\" id=\"bookmarks\" role=\"tabpanel\" aria-labelledby=\"toc-tab\">\n                            <button type=\"button\" class=\"close ml-auto align-self-center d-block\" aria-label=\"Close\" v-on:click=\"hideTabContent()\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                            <div class=\"w-75\" v-if=\"$store.getters.getBookmarks.length == 0\">\n                                Es wurden noch keine Lesezeichen angelegt. Markieren Sie einen Textauschnitt, um ein Lesezeichen anzulegen.\n                            </div>\n                            <div v-if=\"$store.getters.getBookmarks.length > 0\">\n                                Meine Lesezeichen:\n                                <ul>\n                                    <li v-for=\"b in $store.getters.getBookmarks\">\n                                        <a v-on:click=\"followLink(b.target, $event)\" style=\"cursor:pointer;\">{{ b.selection }}</a> \n                                        <i v-on:click=\"$store.commit('removeBookmark', b.id)\" class=\"ml-3 p-1 fa fa-trash\"></i>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                        <div class=\"tab-pane fade p-3\" id=\"annotations\" role=\"tabpanel\" aria-labelledby=\"toc-tab\">\n                            Annotations\n                            <button type=\"button\" class=\"close ml-auto align-self-center d-block\" aria-label=\"Close\" v-on:click=\"hideTabContent()\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div class=\"tab-pane fade p-3\" id=\"search\" role=\"tabpanel\" aria-labelledby=\"search-tab\">\n                            <Search @hideTabContent='hideTabContent' v-on:log='log'></Search>\n                        </div>\n                    </div>\n                </nav>\n\n                <ReadingTime></ReadingTime>\n                <ReadingProgress v-on:log='log' v-bind:context=\"context\"></ReadingProgress>\n<!--                <Bookmark v-on:log='log'></Bookmark>-->\n            </div>\n        `\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/App.js\n");

/***/ }),

/***/ "./src/components/AnnotationWrapper.js":
/*!*********************************************!*\
  !*** ./src/components/AnnotationWrapper.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _annotation_AnnotationToolbarPopover_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./annotation/AnnotationToolbarPopover.vue */ \"./src/components/annotation/AnnotationToolbarPopover.vue\");\n/* harmony import */ var _lib_annotation_annotation_toolbar_popover_positioner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/annotation/annotation-toolbar-popover-positioner */ \"./src/lib/annotation/annotation-toolbar-popover-positioner.js\");\n/* harmony import */ var _config_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config/constants */ \"./src/config/constants.js\");\n/* harmony import */ var _lib_annotation_selection_listener__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/annotation/selection-listener */ \"./src/lib/annotation/selection-listener.js\");\n/* harmony import */ var _lib_annotation_hypothesis_anchoring_html__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/annotation/hypothesis/anchoring/html */ \"./src/lib/annotation/hypothesis/anchoring/html.js\");\n/* harmony import */ var _lib_annotation_types_annotation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../lib/annotation/types/annotation */ \"./src/lib/annotation/types/annotation.js\");\n/* harmony import */ var _lib_annotation_types_annotation_target__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lib/annotation/types/annotation-target */ \"./src/lib/annotation/types/annotation-target.js\");\n/* harmony import */ var _lib_annotation_anchoring__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../lib/annotation/anchoring */ \"./src/lib/annotation/anchoring.js\");\n/* harmony import */ var _lib_annotation_highlighting__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../lib/annotation/highlighting */ \"./src/lib/annotation/highlighting.js\");\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: \"AnnotationWrapper\",\n  components: {\n    AnnotationToolbarPopover: _annotation_AnnotationToolbarPopover_vue__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n  },\n\n  data() {\n    return {\n      anchoring: null,\n      annotationToolbarPopoverProps: {\n        arrowDirection: _config_constants__WEBPACK_IMPORTED_MODULE_2__[\"ArrowDirection\"].UP,\n        highlightingOptions: [\"bg-yellow\", \"bg-blue\", \"bg-magenta\", \"bg-green\"],\n        left: 0,\n        showDelete: false,\n        top: 0,\n        visible: false,\n        zIndex: undefined\n      },\n      targetRoot: null,\n      selectionListener: new _lib_annotation_selection_listener__WEBPACK_IMPORTED_MODULE_3__[\"SelectionListener\"](),\n      selectedRanges: []\n    };\n  },\n\n  computed: {\n    annotationToolbarPopover() {\n      return this.$refs.annotationToolbarPopover;\n    },\n\n    annotationToolbarPopoverPositioner() {\n      return new _lib_annotation_annotation_toolbar_popover_positioner__WEBPACK_IMPORTED_MODULE_1__[\"AnnotationToolbarPopoverPositioner\"](this.targetRoot, this.annotationToolbarPopover.height.bind(this.annotationToolbarPopover), this.annotationToolbarPopover.width.bind(this.annotationToolbarPopover), this.annotationToolbarPopover.arrowHeight.bind(this.annotationToolbarPopover));\n    }\n\n  },\n\n  mounted() {\n    this.$nextTick(() => {\n      this.targetRoot = document.body;\n      this.selectionListener.subscribe(this.onSelection.bind(this), this.onClearSelection.bind(this));\n      this.anchoring = new _lib_annotation_anchoring__WEBPACK_IMPORTED_MODULE_7__[\"Anchoring\"](this.targetRoot);\n      Object(_lib_annotation_highlighting__WEBPACK_IMPORTED_MODULE_8__[\"setHighlightsVisible\"])(this.targetRoot, true);\n    });\n  },\n\n  beforeDestroy() {\n    this.selectionListener.unsubscribe();\n  },\n\n  methods: {\n    createAnnotation(styleClass) {\n      // TODO: Insert in store\n      Promise.all(this.selectedRanges.map(this.getSelectors)).then(selectors => {\n        const annotation = new _lib_annotation_types_annotation__WEBPACK_IMPORTED_MODULE_5__[\"Annotation\"](0, selectors.map(selectors => new _lib_annotation_types_annotation_target__WEBPACK_IMPORTED_MODULE_6__[\"AnnotationTarget\"](selectors, 0, styleClass))); // TODO: Insert userid & pageid\n\n        this.anchoring.anchor(annotation, styleClass).then(() => {\n          console.log(annotation);\n        });\n      });\n    },\n\n    getSelectors(range) {\n      return Object(_lib_annotation_hypothesis_anchoring_html__WEBPACK_IMPORTED_MODULE_4__[\"describe\"])(this.targetRoot, range);\n    },\n\n    onClearSelection() {\n      this.selectedRanges = [];\n      this.annotationToolbarPopoverProps.visible = false;\n    },\n\n    onSelection(range, focusRect, isBackwards) {\n      if (!focusRect) this.onClearSelection();\n      this.selectedRanges = [range];\n      this.setPositionProps(this.annotationToolbarPopoverPositioner.calculatePositionProps(focusRect, isBackwards));\n      this.annotationToolbarPopoverProps.visible = true;\n    },\n\n    setPositionProps({\n      arrowDirection,\n      left,\n      top,\n      zIndex\n    }) {\n      this.annotationToolbarPopoverProps.arrowDirection = arrowDirection;\n      this.annotationToolbarPopoverProps.left = left;\n      this.annotationToolbarPopoverProps.top = top;\n      this.annotationToolbarPopoverProps.zIndex = zIndex;\n    }\n\n  },\n  template: `\n      <annotation-toolbar-popover\n          v-bind=\"annotationToolbarPopoverProps\"\n          @highlight=\"createAnnotation\"\n          ref=\"annotationToolbarPopover\"\n          class=\"longpage-highlights-always-on\"\n      />\n  `\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Bbm5vdGF0aW9uV3JhcHBlci5qcz9hNDcxIl0sIm5hbWVzIjpbIm5hbWUiLCJjb21wb25lbnRzIiwiQW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyIiwiZGF0YSIsImFuY2hvcmluZyIsImFubm90YXRpb25Ub29sYmFyUG9wb3ZlclByb3BzIiwiYXJyb3dEaXJlY3Rpb24iLCJBcnJvd0RpcmVjdGlvbiIsIlVQIiwiaGlnaGxpZ2h0aW5nT3B0aW9ucyIsImxlZnQiLCJzaG93RGVsZXRlIiwidG9wIiwidmlzaWJsZSIsInpJbmRleCIsInVuZGVmaW5lZCIsInRhcmdldFJvb3QiLCJzZWxlY3Rpb25MaXN0ZW5lciIsIlNlbGVjdGlvbkxpc3RlbmVyIiwic2VsZWN0ZWRSYW5nZXMiLCJjb21wdXRlZCIsImFubm90YXRpb25Ub29sYmFyUG9wb3ZlciIsIiRyZWZzIiwiYW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyUG9zaXRpb25lciIsIkFubm90YXRpb25Ub29sYmFyUG9wb3ZlclBvc2l0aW9uZXIiLCJoZWlnaHQiLCJiaW5kIiwid2lkdGgiLCJhcnJvd0hlaWdodCIsIm1vdW50ZWQiLCIkbmV4dFRpY2siLCJkb2N1bWVudCIsImJvZHkiLCJzdWJzY3JpYmUiLCJvblNlbGVjdGlvbiIsIm9uQ2xlYXJTZWxlY3Rpb24iLCJBbmNob3JpbmciLCJzZXRIaWdobGlnaHRzVmlzaWJsZSIsImJlZm9yZURlc3Ryb3kiLCJ1bnN1YnNjcmliZSIsIm1ldGhvZHMiLCJjcmVhdGVBbm5vdGF0aW9uIiwic3R5bGVDbGFzcyIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJnZXRTZWxlY3RvcnMiLCJ0aGVuIiwic2VsZWN0b3JzIiwiYW5ub3RhdGlvbiIsIkFubm90YXRpb24iLCJBbm5vdGF0aW9uVGFyZ2V0IiwiYW5jaG9yIiwiY29uc29sZSIsImxvZyIsInJhbmdlIiwiZGVzY3JpYmUiLCJmb2N1c1JlY3QiLCJpc0JhY2t3YXJkcyIsInNldFBvc2l0aW9uUHJvcHMiLCJjYWxjdWxhdGVQb3NpdGlvblByb3BzIiwidGVtcGxhdGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRWU7QUFDYkEsTUFBSSxFQUFFLG1CQURPO0FBRWJDLFlBQVUsRUFBRTtBQUNWQyw4R0FBd0JBO0FBRGQsR0FGQzs7QUFLYkMsTUFBSSxHQUFHO0FBQ0wsV0FBTztBQUNMQyxlQUFTLEVBQUUsSUFETjtBQUVMQyxtQ0FBNkIsRUFBRTtBQUM3QkMsc0JBQWMsRUFBRUMsZ0VBQWMsQ0FBQ0MsRUFERjtBQUU3QkMsMkJBQW1CLEVBQUUsQ0FDbkIsV0FEbUIsRUFFbkIsU0FGbUIsRUFHbkIsWUFIbUIsRUFJbkIsVUFKbUIsQ0FGUTtBQVE3QkMsWUFBSSxFQUFFLENBUnVCO0FBUzdCQyxrQkFBVSxFQUFFLEtBVGlCO0FBVTdCQyxXQUFHLEVBQUUsQ0FWd0I7QUFXN0JDLGVBQU8sRUFBRSxLQVhvQjtBQVk3QkMsY0FBTSxFQUFFQztBQVpxQixPQUYxQjtBQWdCTEMsZ0JBQVUsRUFBRSxJQWhCUDtBQWlCTEMsdUJBQWlCLEVBQUUsSUFBSUMsb0ZBQUosRUFqQmQ7QUFrQkxDLG9CQUFjLEVBQUU7QUFsQlgsS0FBUDtBQW9CRCxHQTFCWTs7QUEyQmJDLFVBQVEsRUFBRTtBQUNSQyw0QkFBd0IsR0FBRztBQUN6QixhQUFPLEtBQUtDLEtBQUwsQ0FBV0Qsd0JBQWxCO0FBQ0QsS0FITzs7QUFJUkUsc0NBQWtDLEdBQUc7QUFDbkMsYUFBTyxJQUFJQyx3SEFBSixDQUNILEtBQUtSLFVBREYsRUFFSCxLQUFLSyx3QkFBTCxDQUE4QkksTUFBOUIsQ0FBcUNDLElBQXJDLENBQTBDLEtBQUtMLHdCQUEvQyxDQUZHLEVBR0gsS0FBS0Esd0JBQUwsQ0FBOEJNLEtBQTlCLENBQW9DRCxJQUFwQyxDQUF5QyxLQUFLTCx3QkFBOUMsQ0FIRyxFQUlILEtBQUtBLHdCQUFMLENBQThCTyxXQUE5QixDQUEwQ0YsSUFBMUMsQ0FBK0MsS0FBS0wsd0JBQXBELENBSkcsQ0FBUDtBQU1EOztBQVhPLEdBM0JHOztBQXdDYlEsU0FBTyxHQUFHO0FBQ1IsU0FBS0MsU0FBTCxDQUFlLE1BQU07QUFDbkIsV0FBS2QsVUFBTCxHQUFrQmUsUUFBUSxDQUFDQyxJQUEzQjtBQUNBLFdBQUtmLGlCQUFMLENBQXVCZ0IsU0FBdkIsQ0FDSSxLQUFLQyxXQUFMLENBQWlCUixJQUFqQixDQUFzQixJQUF0QixDQURKLEVBRUksS0FBS1MsZ0JBQUwsQ0FBc0JULElBQXRCLENBQTJCLElBQTNCLENBRko7QUFJQSxXQUFLdEIsU0FBTCxHQUFpQixJQUFJZ0MsbUVBQUosQ0FBYyxLQUFLcEIsVUFBbkIsQ0FBakI7QUFDQXFCLCtGQUFvQixDQUFDLEtBQUtyQixVQUFOLEVBQWtCLElBQWxCLENBQXBCO0FBQ0QsS0FSRDtBQVNELEdBbERZOztBQW1EYnNCLGVBQWEsR0FBRztBQUNkLFNBQUtyQixpQkFBTCxDQUF1QnNCLFdBQXZCO0FBQ0QsR0FyRFk7O0FBc0RiQyxTQUFPLEVBQUU7QUFDUEMsb0JBQWdCLENBQUNDLFVBQUQsRUFBYTtBQUFFO0FBQzdCQyxhQUFPLENBQUNDLEdBQVIsQ0FBWSxLQUFLekIsY0FBTCxDQUFvQjBCLEdBQXBCLENBQXdCLEtBQUtDLFlBQTdCLENBQVosRUFBd0RDLElBQXhELENBQTZEQyxTQUFTLElBQUk7QUFDeEUsY0FBTUMsVUFBVSxHQUFHLElBQUlDLDJFQUFKLENBQWUsQ0FBZixFQUFrQkYsU0FBUyxDQUFDSCxHQUFWLENBQWNHLFNBQVMsSUFBSyxJQUFJRyx3RkFBSixDQUFxQkgsU0FBckIsRUFBZ0MsQ0FBaEMsRUFBbUNOLFVBQW5DLENBQTVCLENBQWxCLENBQW5CLENBRHdFLENBQzRDOztBQUNwSCxhQUFLdEMsU0FBTCxDQUFlZ0QsTUFBZixDQUFzQkgsVUFBdEIsRUFBa0NQLFVBQWxDLEVBQThDSyxJQUE5QyxDQUFtRCxNQUFNO0FBQ3ZETSxpQkFBTyxDQUFDQyxHQUFSLENBQVlMLFVBQVo7QUFDRCxTQUZEO0FBR0QsT0FMRDtBQU1ELEtBUk07O0FBU1BILGdCQUFZLENBQUNTLEtBQUQsRUFBUTtBQUNsQixhQUFPQywwRkFBUSxDQUFDLEtBQUt4QyxVQUFOLEVBQWtCdUMsS0FBbEIsQ0FBZjtBQUNELEtBWE07O0FBWVBwQixvQkFBZ0IsR0FBRztBQUNqQixXQUFLaEIsY0FBTCxHQUFzQixFQUF0QjtBQUNBLFdBQUtkLDZCQUFMLENBQW1DUSxPQUFuQyxHQUE2QyxLQUE3QztBQUNELEtBZk07O0FBZ0JQcUIsZUFBVyxDQUFDcUIsS0FBRCxFQUFRRSxTQUFSLEVBQW1CQyxXQUFuQixFQUFnQztBQUN6QyxVQUFJLENBQUNELFNBQUwsRUFBZ0IsS0FBS3RCLGdCQUFMO0FBQ2hCLFdBQUtoQixjQUFMLEdBQXNCLENBQUNvQyxLQUFELENBQXRCO0FBQ0EsV0FBS0ksZ0JBQUwsQ0FBc0IsS0FBS3BDLGtDQUFMLENBQXdDcUMsc0JBQXhDLENBQStESCxTQUEvRCxFQUEwRUMsV0FBMUUsQ0FBdEI7QUFDQSxXQUFLckQsNkJBQUwsQ0FBbUNRLE9BQW5DLEdBQTZDLElBQTdDO0FBQ0QsS0FyQk07O0FBc0JQOEMsb0JBQWdCLENBQUM7QUFBQ3JELG9CQUFEO0FBQWlCSSxVQUFqQjtBQUF1QkUsU0FBdkI7QUFBNEJFO0FBQTVCLEtBQUQsRUFBc0M7QUFDcEQsV0FBS1QsNkJBQUwsQ0FBbUNDLGNBQW5DLEdBQW9EQSxjQUFwRDtBQUNBLFdBQUtELDZCQUFMLENBQW1DSyxJQUFuQyxHQUEwQ0EsSUFBMUM7QUFDQSxXQUFLTCw2QkFBTCxDQUFtQ08sR0FBbkMsR0FBeUNBLEdBQXpDO0FBQ0EsV0FBS1AsNkJBQUwsQ0FBbUNTLE1BQW5DLEdBQTRDQSxNQUE1QztBQUNEOztBQTNCTSxHQXRESTtBQW1GYitDLFVBQVEsRUFBRztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBMUZlLENBQWYiLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9Bbm5vdGF0aW9uV3JhcHBlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBbm5vdGF0aW9uVG9vbGJhclBvcG92ZXIgZnJvbSBcIi4vYW5ub3RhdGlvbi9Bbm5vdGF0aW9uVG9vbGJhclBvcG92ZXIudnVlXCI7XG5pbXBvcnQgeyBBbm5vdGF0aW9uVG9vbGJhclBvcG92ZXJQb3NpdGlvbmVyIH0gZnJvbSBcIi4uL2xpYi9hbm5vdGF0aW9uL2Fubm90YXRpb24tdG9vbGJhci1wb3BvdmVyLXBvc2l0aW9uZXJcIjtcbmltcG9ydCB7IEFycm93RGlyZWN0aW9uIH0gZnJvbSBcIi4uL2NvbmZpZy9jb25zdGFudHNcIjtcbmltcG9ydCB7IFNlbGVjdGlvbkxpc3RlbmVyIH0gZnJvbSBcIi4uL2xpYi9hbm5vdGF0aW9uL3NlbGVjdGlvbi1saXN0ZW5lclwiO1xuaW1wb3J0IHsgZGVzY3JpYmUgfSBmcm9tIFwiLi4vbGliL2Fubm90YXRpb24vaHlwb3RoZXNpcy9hbmNob3JpbmcvaHRtbFwiO1xuaW1wb3J0IHsgQW5ub3RhdGlvbiB9IGZyb20gXCIuLi9saWIvYW5ub3RhdGlvbi90eXBlcy9hbm5vdGF0aW9uXCI7XG5pbXBvcnQgeyBBbm5vdGF0aW9uVGFyZ2V0IH0gZnJvbSBcIi4uL2xpYi9hbm5vdGF0aW9uL3R5cGVzL2Fubm90YXRpb24tdGFyZ2V0XCI7XG5pbXBvcnQge0FuY2hvcmluZ30gZnJvbSBcIi4uL2xpYi9hbm5vdGF0aW9uL2FuY2hvcmluZ1wiO1xuaW1wb3J0IHtzZXRIaWdobGlnaHRzVmlzaWJsZX0gZnJvbSBcIi4uL2xpYi9hbm5vdGF0aW9uL2hpZ2hsaWdodGluZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6IFwiQW5ub3RhdGlvbldyYXBwZXJcIixcbiAgY29tcG9uZW50czoge1xuICAgIEFubm90YXRpb25Ub29sYmFyUG9wb3ZlclxuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhbmNob3Jpbmc6IG51bGwsXG4gICAgICBhbm5vdGF0aW9uVG9vbGJhclBvcG92ZXJQcm9wczoge1xuICAgICAgICBhcnJvd0RpcmVjdGlvbjogQXJyb3dEaXJlY3Rpb24uVVAsXG4gICAgICAgIGhpZ2hsaWdodGluZ09wdGlvbnM6IFtcbiAgICAgICAgICBcImJnLXllbGxvd1wiLFxuICAgICAgICAgIFwiYmctYmx1ZVwiLFxuICAgICAgICAgIFwiYmctbWFnZW50YVwiLFxuICAgICAgICAgIFwiYmctZ3JlZW5cIixcbiAgICAgICAgXSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgc2hvd0RlbGV0ZTogZmFsc2UsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIHpJbmRleDogdW5kZWZpbmVkLFxuICAgICAgfSxcbiAgICAgIHRhcmdldFJvb3Q6IG51bGwsXG4gICAgICBzZWxlY3Rpb25MaXN0ZW5lcjogbmV3IFNlbGVjdGlvbkxpc3RlbmVyKCksXG4gICAgICBzZWxlY3RlZFJhbmdlczogW10sXG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGFubm90YXRpb25Ub29sYmFyUG9wb3ZlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzLmFubm90YXRpb25Ub29sYmFyUG9wb3ZlcjtcbiAgICB9LFxuICAgIGFubm90YXRpb25Ub29sYmFyUG9wb3ZlclBvc2l0aW9uZXIoKSB7XG4gICAgICByZXR1cm4gbmV3IEFubm90YXRpb25Ub29sYmFyUG9wb3ZlclBvc2l0aW9uZXIoXG4gICAgICAgICAgdGhpcy50YXJnZXRSb290LFxuICAgICAgICAgIHRoaXMuYW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyLmhlaWdodC5iaW5kKHRoaXMuYW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyKSxcbiAgICAgICAgICB0aGlzLmFubm90YXRpb25Ub29sYmFyUG9wb3Zlci53aWR0aC5iaW5kKHRoaXMuYW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyKSxcbiAgICAgICAgICB0aGlzLmFubm90YXRpb25Ub29sYmFyUG9wb3Zlci5hcnJvd0hlaWdodC5iaW5kKHRoaXMuYW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyKSxcbiAgICAgICk7XG4gICAgfVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgIHRoaXMudGFyZ2V0Um9vdCA9IGRvY3VtZW50LmJvZHk7XG4gICAgICB0aGlzLnNlbGVjdGlvbkxpc3RlbmVyLnN1YnNjcmliZShcbiAgICAgICAgICB0aGlzLm9uU2VsZWN0aW9uLmJpbmQodGhpcyksXG4gICAgICAgICAgdGhpcy5vbkNsZWFyU2VsZWN0aW9uLmJpbmQodGhpcyksXG4gICAgICApO1xuICAgICAgdGhpcy5hbmNob3JpbmcgPSBuZXcgQW5jaG9yaW5nKHRoaXMudGFyZ2V0Um9vdCk7XG4gICAgICBzZXRIaWdobGlnaHRzVmlzaWJsZSh0aGlzLnRhcmdldFJvb3QsIHRydWUpO1xuICAgIH0pO1xuICB9LFxuICBiZWZvcmVEZXN0cm95KCkge1xuICAgIHRoaXMuc2VsZWN0aW9uTGlzdGVuZXIudW5zdWJzY3JpYmUoKTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGNyZWF0ZUFubm90YXRpb24oc3R5bGVDbGFzcykgeyAvLyBUT0RPOiBJbnNlcnQgaW4gc3RvcmVcbiAgICAgIFByb21pc2UuYWxsKHRoaXMuc2VsZWN0ZWRSYW5nZXMubWFwKHRoaXMuZ2V0U2VsZWN0b3JzKSkudGhlbihzZWxlY3RvcnMgPT4ge1xuICAgICAgICBjb25zdCBhbm5vdGF0aW9uID0gbmV3IEFubm90YXRpb24oMCwgc2VsZWN0b3JzLm1hcChzZWxlY3RvcnMgPT4gKG5ldyBBbm5vdGF0aW9uVGFyZ2V0KHNlbGVjdG9ycywgMCwgc3R5bGVDbGFzcykpKSk7IC8vIFRPRE86IEluc2VydCB1c2VyaWQgJiBwYWdlaWRcbiAgICAgICAgdGhpcy5hbmNob3JpbmcuYW5jaG9yKGFubm90YXRpb24sIHN0eWxlQ2xhc3MpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGFubm90YXRpb24pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0U2VsZWN0b3JzKHJhbmdlKSB7XG4gICAgICByZXR1cm4gZGVzY3JpYmUodGhpcy50YXJnZXRSb290LCByYW5nZSk7XG4gICAgfSxcbiAgICBvbkNsZWFyU2VsZWN0aW9uKCkge1xuICAgICAgdGhpcy5zZWxlY3RlZFJhbmdlcyA9IFtdO1xuICAgICAgdGhpcy5hbm5vdGF0aW9uVG9vbGJhclBvcG92ZXJQcm9wcy52aXNpYmxlID0gZmFsc2U7XG4gICAgfSxcbiAgICBvblNlbGVjdGlvbihyYW5nZSwgZm9jdXNSZWN0LCBpc0JhY2t3YXJkcykge1xuICAgICAgaWYgKCFmb2N1c1JlY3QpIHRoaXMub25DbGVhclNlbGVjdGlvbigpO1xuICAgICAgdGhpcy5zZWxlY3RlZFJhbmdlcyA9IFtyYW5nZV07XG4gICAgICB0aGlzLnNldFBvc2l0aW9uUHJvcHModGhpcy5hbm5vdGF0aW9uVG9vbGJhclBvcG92ZXJQb3NpdGlvbmVyLmNhbGN1bGF0ZVBvc2l0aW9uUHJvcHMoZm9jdXNSZWN0LCBpc0JhY2t3YXJkcykpO1xuICAgICAgdGhpcy5hbm5vdGF0aW9uVG9vbGJhclBvcG92ZXJQcm9wcy52aXNpYmxlID0gdHJ1ZTtcbiAgICB9LFxuICAgIHNldFBvc2l0aW9uUHJvcHMoe2Fycm93RGlyZWN0aW9uLCBsZWZ0LCB0b3AsIHpJbmRleH0pIHtcbiAgICAgIHRoaXMuYW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyUHJvcHMuYXJyb3dEaXJlY3Rpb24gPSBhcnJvd0RpcmVjdGlvbjtcbiAgICAgIHRoaXMuYW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyUHJvcHMubGVmdCA9IGxlZnQ7XG4gICAgICB0aGlzLmFubm90YXRpb25Ub29sYmFyUG9wb3ZlclByb3BzLnRvcCA9IHRvcDtcbiAgICAgIHRoaXMuYW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyUHJvcHMuekluZGV4ID0gekluZGV4O1xuICAgIH1cbiAgfSxcbiAgdGVtcGxhdGU6IGBcbiAgICAgIDxhbm5vdGF0aW9uLXRvb2xiYXItcG9wb3ZlclxuICAgICAgICAgIHYtYmluZD1cImFubm90YXRpb25Ub29sYmFyUG9wb3ZlclByb3BzXCJcbiAgICAgICAgICBAaGlnaGxpZ2h0PVwiY3JlYXRlQW5ub3RhdGlvblwiXG4gICAgICAgICAgcmVmPVwiYW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyXCJcbiAgICAgICAgICBjbGFzcz1cImxvbmdwYWdlLWhpZ2hsaWdodHMtYWx3YXlzLW9uXCJcbiAgICAgIC8+XG4gIGAsXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/AnnotationWrapper.js\n");

/***/ }),

/***/ "./src/components/CourseRecommondation.js":
/*!************************************************!*\
  !*** ./src/components/CourseRecommondation.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* eslint-disable max-len, no-console, no-undef, no-unused-vars, no-bitwise */\n\n/**\n * TODO:\n * - cleanup server: /home/abb/Documents/proj_002_aple/Kurstextanalyse/kurstext-webservice/\n * - send large text\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'CourseRecommondation',\n  props: ['hideTabContent', 'log'],\n  data: function () {\n    return {\n      serverPath: 'http://127.0.0.1:8080/course-recommender',\n      courses: [],\n      blacklist: [1144, 2333, 2337, 2351, 2355, 2353, 2366, 1662, 1664, 1666, 1671, 1661, 1672, 1675, 1665, 1810, 1602, 1603, 1358]\n    };\n  },\n  mounted: function () {\n    let _this = this; // This.getRelatedUnits();\n    // Mock\n\n\n    let data = {\n      ke1: [],\n      ke2: [],\n      ke3: [],\n      ke4: []\n    };\n    return; // Go through text passages\n\n    jquery__WEBPACK_IMPORTED_MODULE_0___default()('.longpage-container').each(function (e) {\n      var text = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).text(); // Text = $(this).nextUntil('h3').text();\n\n      /* $('p').each(function(){\n          text += ' '+$(this).text();\n      });*/\n      // console.log(text);\n\n      _this.getRelatedUnits('Rechnernetze', jquery__WEBPACK_IMPORTED_MODULE_0___default()(this));\n    });\n  },\n  methods: {\n    getRelatedUnits: function (text, selector) {\n      let _this = this;\n\n      jquery__WEBPACK_IMPORTED_MODULE_0___default.a.ajax({\n        method: \"POST\",\n        url: this.serverPath,\n        data: {\n          text: text\n        },\n        dataType: 'jsonp',\n        crossDomain: true,\n        success: function (data) {\n          _this.courses = _this.clean(data);\n        },\n        error: function (e) {\n          console.error(e);\n        }\n      });\n    },\n    clean: function (data) {\n      let _this = this;\n\n      let courses = [];\n      let course = '';\n\n      for (var i = 0; i < data.length; i++) {\n        course = data[i][0].replace('_t.pickle', '').split('/');\n\n        if (_this.blacklist.indexOf(parseInt(course[2].substr(0, 4), 10)) === -1) {\n          let c = {\n            course: course[2],\n            unit: course[3],\n            confidence: data[i][1].toFixed(2)\n          };\n          courses.push(c);\n        } else {// Console.log('blacklisted ' + course[2], course[2].substr(0, 4));\n        }\n      }\n\n      return courses;\n    }\n  },\n  template: `\n        <div>\n            <button type=\"button\" class=\"close ml-auto align-self-center d-block\" aria-label=\"Close\" v-on:click=\"$emit('hideTabContent')\">\n                <span aria-hidden=\"true\">&times;</span>\n            </button>\n            <ul>\n                <li v-for=\"course in courses\">{{ course.course}}: {{course.unit}} ({{course.confidence}})</li>\n            </ul>\n        </div>`\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Db3Vyc2VSZWNvbW1vbmRhdGlvbi5qcz9iY2M3Il0sIm5hbWVzIjpbIm5hbWUiLCJwcm9wcyIsImRhdGEiLCJzZXJ2ZXJQYXRoIiwiY291cnNlcyIsImJsYWNrbGlzdCIsIm1vdW50ZWQiLCJfdGhpcyIsImtlMSIsImtlMiIsImtlMyIsImtlNCIsIiQiLCJlYWNoIiwiZSIsInRleHQiLCJnZXRSZWxhdGVkVW5pdHMiLCJtZXRob2RzIiwic2VsZWN0b3IiLCJhamF4IiwibWV0aG9kIiwidXJsIiwiZGF0YVR5cGUiLCJjcm9zc0RvbWFpbiIsInN1Y2Nlc3MiLCJjbGVhbiIsImVycm9yIiwiY29uc29sZSIsImNvdXJzZSIsImkiLCJsZW5ndGgiLCJyZXBsYWNlIiwic3BsaXQiLCJpbmRleE9mIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJjIiwidW5pdCIsImNvbmZpZGVuY2UiLCJ0b0ZpeGVkIiwicHVzaCIsInRlbXBsYXRlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFZTtBQUNYQSxNQUFJLEVBQUUsc0JBREs7QUFFWEMsT0FBSyxFQUFFLENBQUMsZ0JBQUQsRUFBbUIsS0FBbkIsQ0FGSTtBQUlYQyxNQUFJLEVBQUUsWUFBVztBQUNiLFdBQU87QUFDSEMsZ0JBQVUsRUFBRSwwQ0FEVDtBQUVIQyxhQUFPLEVBQUUsRUFGTjtBQUdIQyxlQUFTLEVBQUUsQ0FDUCxJQURPLEVBQ0QsSUFEQyxFQUNLLElBREwsRUFDVyxJQURYLEVBQ2lCLElBRGpCLEVBQ3VCLElBRHZCLEVBQzZCLElBRDdCLEVBQ21DLElBRG5DLEVBQ3lDLElBRHpDLEVBRVAsSUFGTyxFQUVELElBRkMsRUFFSyxJQUZMLEVBRVcsSUFGWCxFQUVpQixJQUZqQixFQUV1QixJQUZ2QixFQUU2QixJQUY3QixFQUVtQyxJQUZuQyxFQUV5QyxJQUZ6QyxFQUUrQyxJQUYvQztBQUhSLEtBQVA7QUFRSCxHQWJVO0FBZVhDLFNBQU8sRUFBRSxZQUFXO0FBQ2hCLFFBQUlDLEtBQUssR0FBRyxJQUFaLENBRGdCLENBRWhCO0FBRUE7OztBQUNBLFFBQUlMLElBQUksR0FBRztBQUNQTSxTQUFHLEVBQUUsRUFERTtBQUVQQyxTQUFHLEVBQUUsRUFGRTtBQUdQQyxTQUFHLEVBQUUsRUFIRTtBQUlQQyxTQUFHLEVBQUU7QUFKRSxLQUFYO0FBTUEsV0FYZ0IsQ0FZaEI7O0FBQ0FDLGlEQUFDLENBQUMscUJBQUQsQ0FBRCxDQUF5QkMsSUFBekIsQ0FBOEIsVUFBU0MsQ0FBVCxFQUFZO0FBQ3RDLFVBQUlDLElBQUksR0FBR0gsNkNBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUUcsSUFBUixFQUFYLENBRHNDLENBRXRDOztBQUNBO0FBQ1o7QUFDQTtBQUNZOztBQUNBUixXQUFLLENBQUNTLGVBQU4sQ0FBc0IsY0FBdEIsRUFBc0NKLDZDQUFDLENBQUMsSUFBRCxDQUF2QztBQUNILEtBUkQ7QUFTSCxHQXJDVTtBQXVDWEssU0FBTyxFQUFFO0FBQ0xELG1CQUFlLEVBQUUsVUFBU0QsSUFBVCxFQUFlRyxRQUFmLEVBQXlCO0FBQ3RDLFVBQUlYLEtBQUssR0FBRyxJQUFaOztBQUVBSyxtREFBQyxDQUFDTyxJQUFGLENBQU87QUFDSEMsY0FBTSxFQUFFLE1BREw7QUFFSEMsV0FBRyxFQUFFLEtBQUtsQixVQUZQO0FBR0hELFlBQUksRUFBRTtBQUFDYSxjQUFJLEVBQUVBO0FBQVAsU0FISDtBQUlITyxnQkFBUSxFQUFFLE9BSlA7QUFLSEMsbUJBQVcsRUFBRSxJQUxWO0FBTUhDLGVBQU8sRUFBRSxVQUFTdEIsSUFBVCxFQUFlO0FBQ3BCSyxlQUFLLENBQUNILE9BQU4sR0FBZ0JHLEtBQUssQ0FBQ2tCLEtBQU4sQ0FBWXZCLElBQVosQ0FBaEI7QUFDSCxTQVJFO0FBU0h3QixhQUFLLEVBQUUsVUFBU1osQ0FBVCxFQUFZO0FBQ2ZhLGlCQUFPLENBQUNELEtBQVIsQ0FBY1osQ0FBZDtBQUNIO0FBWEUsT0FBUDtBQWFILEtBakJJO0FBbUJMVyxTQUFLLEVBQUUsVUFBU3ZCLElBQVQsRUFBZTtBQUNsQixVQUFJSyxLQUFLLEdBQUcsSUFBWjs7QUFDQSxVQUFJSCxPQUFPLEdBQUcsRUFBZDtBQUNBLFVBQUl3QixNQUFNLEdBQUcsRUFBYjs7QUFDQSxXQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUczQixJQUFJLENBQUM0QixNQUF6QixFQUFpQ0QsQ0FBQyxFQUFsQyxFQUFzQztBQUNsQ0QsY0FBTSxHQUFHMUIsSUFBSSxDQUFDMkIsQ0FBRCxDQUFKLENBQVEsQ0FBUixFQUFXRSxPQUFYLENBQW1CLFdBQW5CLEVBQWdDLEVBQWhDLEVBQW9DQyxLQUFwQyxDQUEwQyxHQUExQyxDQUFUOztBQUNBLFlBQUl6QixLQUFLLENBQUNGLFNBQU4sQ0FBZ0I0QixPQUFoQixDQUF3QkMsUUFBUSxDQUFDTixNQUFNLENBQUMsQ0FBRCxDQUFOLENBQVVPLE1BQVYsQ0FBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsQ0FBRCxFQUF5QixFQUF6QixDQUFoQyxNQUFrRSxDQUFDLENBQXZFLEVBQTBFO0FBQ3RFLGNBQUlDLENBQUMsR0FBRztBQUFDUixrQkFBTSxFQUFFQSxNQUFNLENBQUMsQ0FBRCxDQUFmO0FBQW9CUyxnQkFBSSxFQUFFVCxNQUFNLENBQUMsQ0FBRCxDQUFoQztBQUFxQ1Usc0JBQVUsRUFBRXBDLElBQUksQ0FBQzJCLENBQUQsQ0FBSixDQUFRLENBQVIsRUFBV1UsT0FBWCxDQUFtQixDQUFuQjtBQUFqRCxXQUFSO0FBQ0FuQyxpQkFBTyxDQUFDb0MsSUFBUixDQUFhSixDQUFiO0FBQ0gsU0FIRCxNQUdPLENBQ0g7QUFDSDtBQUNKOztBQUNELGFBQU9oQyxPQUFQO0FBQ0g7QUFqQ0ksR0F2Q0U7QUEyRVhxQyxVQUFRLEVBQUc7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbkZlLENBQWYiLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9Db3Vyc2VSZWNvbW1vbmRhdGlvbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4sIG5vLWNvbnNvbGUsIG5vLXVuZGVmLCBuby11bnVzZWQtdmFycywgbm8tYml0d2lzZSAqL1xuLyoqXG4gKiBUT0RPOlxuICogLSBjbGVhbnVwIHNlcnZlcjogL2hvbWUvYWJiL0RvY3VtZW50cy9wcm9qXzAwMl9hcGxlL0t1cnN0ZXh0YW5hbHlzZS9rdXJzdGV4dC13ZWJzZXJ2aWNlL1xuICogLSBzZW5kIGxhcmdlIHRleHRcbiAqL1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG5hbWU6ICdDb3Vyc2VSZWNvbW1vbmRhdGlvbicsXG4gICAgcHJvcHM6IFsnaGlkZVRhYkNvbnRlbnQnLCAnbG9nJ10sXG5cbiAgICBkYXRhOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlcnZlclBhdGg6ICdodHRwOi8vMTI3LjAuMC4xOjgwODAvY291cnNlLXJlY29tbWVuZGVyJyxcbiAgICAgICAgICAgIGNvdXJzZXM6IFtdLFxuICAgICAgICAgICAgYmxhY2tsaXN0OiBbXG4gICAgICAgICAgICAgICAgMTE0NCwgMjMzMywgMjMzNywgMjM1MSwgMjM1NSwgMjM1MywgMjM2NiwgMTY2MiwgMTY2NCxcbiAgICAgICAgICAgICAgICAxNjY2LCAxNjcxLCAxNjYxLCAxNjcyLCAxNjc1LCAxNjY1LCAxODEwLCAxNjAyLCAxNjAzLCAxMzU4XVxuXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIG1vdW50ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBUaGlzLmdldFJlbGF0ZWRVbml0cygpO1xuXG4gICAgICAgIC8vIE1vY2tcbiAgICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgICAgICBrZTE6IFtdLFxuICAgICAgICAgICAga2UyOiBbXSxcbiAgICAgICAgICAgIGtlMzogW10sXG4gICAgICAgICAgICBrZTQ6IFtdXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybjtcbiAgICAgICAgLy8gR28gdGhyb3VnaCB0ZXh0IHBhc3NhZ2VzXG4gICAgICAgICQoJy5sb25ncGFnZS1jb250YWluZXInKS5lYWNoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciB0ZXh0ID0gJCh0aGlzKS50ZXh0KCk7XG4gICAgICAgICAgICAvLyBUZXh0ID0gJCh0aGlzKS5uZXh0VW50aWwoJ2gzJykudGV4dCgpO1xuICAgICAgICAgICAgLyogJCgncCcpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB0ZXh0ICs9ICcgJyskKHRoaXMpLnRleHQoKTtcbiAgICAgICAgICAgIH0pOyovXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgICAgICAgIF90aGlzLmdldFJlbGF0ZWRVbml0cygnUmVjaG5lcm5ldHplJywgJCh0aGlzKSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGdldFJlbGF0ZWRVbml0czogZnVuY3Rpb24odGV4dCwgc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuc2VydmVyUGF0aCxcbiAgICAgICAgICAgICAgICBkYXRhOiB7dGV4dDogdGV4dH0sXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6ICdqc29ucCcsXG4gICAgICAgICAgICAgICAgY3Jvc3NEb21haW46IHRydWUsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb3Vyc2VzID0gX3RoaXMuY2xlYW4oZGF0YSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNsZWFuOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgbGV0IGNvdXJzZXMgPSBbXTtcbiAgICAgICAgICAgIGxldCBjb3Vyc2UgPSAnJztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvdXJzZSA9IGRhdGFbaV1bMF0ucmVwbGFjZSgnX3QucGlja2xlJywgJycpLnNwbGl0KCcvJyk7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmJsYWNrbGlzdC5pbmRleE9mKHBhcnNlSW50KGNvdXJzZVsyXS5zdWJzdHIoMCwgNCksIDEwKSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjID0ge2NvdXJzZTogY291cnNlWzJdLCB1bml0OiBjb3Vyc2VbM10sIGNvbmZpZGVuY2U6IGRhdGFbaV1bMV0udG9GaXhlZCgyKX07XG4gICAgICAgICAgICAgICAgICAgIGNvdXJzZXMucHVzaChjKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBDb25zb2xlLmxvZygnYmxhY2tsaXN0ZWQgJyArIGNvdXJzZVsyXSwgY291cnNlWzJdLnN1YnN0cigwLCA0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvdXJzZXM7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2UgbWwtYXV0byBhbGlnbi1zZWxmLWNlbnRlciBkLWJsb2NrXCIgYXJpYS1sYWJlbD1cIkNsb3NlXCIgdi1vbjpjbGljaz1cIiRlbWl0KCdoaWRlVGFiQ29udGVudCcpXCI+XG4gICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIDxsaSB2LWZvcj1cImNvdXJzZSBpbiBjb3Vyc2VzXCI+e3sgY291cnNlLmNvdXJzZX19OiB7e2NvdXJzZS51bml0fX0gKHt7Y291cnNlLmNvbmZpZGVuY2V9fSk8L2xpPlxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgPC9kaXY+YFxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/CourseRecommondation.js\n");

/***/ }),

/***/ "./src/components/ReadingProgress.js":
/*!*******************************************!*\
  !*** ./src/components/ReadingProgress.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* eslint-disable max-len, no-console, no-undef, no-unused-vars, no-bitwise */\n\n/**\n * Similar:\n * - https://scripting.neurotask.com/assets/js/nm/logger/docs/_build/activity_tracker.html\n * - https://gist.github.com/gaboratorium/736598ec2c001620804e94d370d6fbe3\n * - see works of Andreas Dengel\n *\n * TODO\n * - label fast scrolling and reading in data base\n * - contineously load read progress data\n * - visualize course progress\n * ---\n * - remove jquery\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'ReadingProgress',\n  props: ['log', 'context'],\n  data: function () {\n    return {};\n  },\n  mounted: function () {\n    // This.enableScrollLogging();\n    // this.visualizeReadingProgress();\n    if (\"IntersectionObserver\" in window && \"IntersectionObserverEntry\" in window && \"intersectionRatio\" in window.IntersectionObserverEntry.prototype) {\n      var observer = new IntersectionObserver(entries => {\n        if (entries[0].boundingClientRect.y < 0) {\n          document.getElementById('longpage-navbar').classList.add(\"header-not-at-top\"); // Document.getElementById('table-of-content').classList.add(\"header-not-at-top\");\n        } else {\n          document.getElementById('longpage-navbar').classList.remove(\"header-not-at-top\"); // Document.getElementById('table-of-content').classList.remove(\"header-not-at-top\");\n        }\n      });\n      observer.observe(document.querySelector(\"#top-of-site-pixel-anchor\"));\n    }\n  },\n  methods: {\n    enableScrollLogging: function () {\n      let _this = this;\n\n      if (\"IntersectionObserver\" in window && \"IntersectionObserverEntry\" in window && \"intersectionRatio\" in window.IntersectionObserverEntry.prototype && document.querySelector('.longpage-container')) {\n        var measuredElement = document.querySelector('.longpage-container');\n        var scrollHeight = document.documentElement.scrollHeight - window.innerHeight;\n        var scrollWidth = document.documentElement.scrollWidth - window.innerWidth;\n        var yPadding, xPadding;\n\n        if (window.getComputedStyle && measuredElement) {\n          var computedStyle = window.getComputedStyle(measuredElement);\n          yPadding = parseFloat(computedStyle.paddingTop) + parseFloat(computedStyle.paddingBottom);\n          xPadding = parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n        } // OffsetHeight includes border, padding and margin, but clinetHeight includes onle the padding\n\n\n        var containerHeight = measuredElement.clientHeight - yPadding;\n        var containerWidth = measuredElement.clientWidth - xPadding;\n        var scrollXDistance = 0;\n        var scrollYDistance = 0;\n        var topPadding = 0;\n        let last_entry = {};\n\n        var handleScrolling = function (entries) {\n          if (entries[0].boundingClientRect.y < topPadding) {// Document.getElementById('table-of-content').classList.add(\"scrollDown\");//header-not-at-top\n          } else {// Document.getElementById('table-of-content').classList.remove(\"scrollDown\");\n            }\n\n          let time_diff = 0; // Iterate over all entries that are within the viewport at the same time.\n\n          for (var entry of entries) {\n            // Feature detection\n            if (typeof entry.isVisible === 'undefined') {\n              // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n              entry.isVisible = true;\n            }\n\n            if (entry.isIntersecting && entry.isVisible) {\n              var now = new Date();\n              let word_count = jquery__WEBPACK_IMPORTED_MODULE_0___default()('#' + entry.target.id).text().split(' ').length; // TODO: Determine portion of visible text\n              // _this.get($('#' + entry.target.id).get(0)).visibility\n              //\n\n              scrollXDistance = window.pageXOffset || (document.documentElement || document.body.parentNode || document.body).scrollRight;\n              scrollYDistance = window.pageYOffset || (document.documentElement || document.body.parentNode || document.body).scrollTop;\n              var logentry = {\n                utc: now.getTime(),\n                pageid: _this.context.pageid,\n                relativeTime: entry.time,\n                // ??\n                targetID: entry.target.id,\n                targetTag: entry.target.localName,\n                targetClasses: entry.target.className,\n                targetWordCount: word_count,\n                scrollXDistance: scrollXDistance === undefined ? 0 : scrollXDistance,\n                scrollYDistance: scrollYDistance === undefined ? 0 : scrollYDistance,\n                scrollHeight: scrollHeight,\n                scrollWidth: scrollWidth,\n                containerHeight: containerHeight,\n                containerWidth: containerWidth,\n                behavior: null // Read, scroll, inactive\n\n              }; // Reading detection\n\n              time_diff = (now.getTime() - last_entry.utc) / 1000; // In seconds\n\n              let ratio = last_entry.targetWordCount / time_diff;\n\n              if (ratio < 0.1) {\n                last_entry.behavior = 'idle';\n              } else if (ratio >= 0.1 && ratio <= 3.6) {\n                last_entry.behavior = 'reading';\n              } else {\n                last_entry.behavior = 'scrolling';\n              } // Output\n\n\n              console.log(last_entry.targetID + '\\t', time_diff + '\\t', last_entry.targetWordCount + '\\t', ratio.toFixed(1) + '\\t', last_entry.behavior);\n\n              _this.$emit('log', 'scroll', last_entry);\n\n              last_entry = logentry; // _this.$emit('log', 'scroll', logentry);\n            }\n          }\n        };\n\n        var options = {\n          root: null,\n          rootMargin: \"0px\",\n          threshold: [1.0],\n          trackVisibility: true,\n          delay: 100\n        };\n        var observer = new IntersectionObserver(handleScrolling, options);\n        var pCounter = 0; //\n\n        const observedSelectors = ['.longpage-container h2', '.longpage-container h3', '.longpage-container pre', '.longpage-container img', 'div.longpage-image-block', 'div.longpage-assignment', '.longpage-container p', '.longpage-container .longpage-assignment', '.longpage-container ol', '.longpage-container ul', '.longpage-container h2', '.longpage-container h3', '.longpage-container h4'];\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()(observedSelectors.join(', ')).each(function (i, val) {\n          if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).attr('id') === '' || jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).attr('id') === undefined) {\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).attr('id', 'paragraph-' + pCounter).addClass('longpage-paragraph');\n            pCounter++;\n          }\n\n          observer.observe(document.querySelector(\"#\" + jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).attr('id')));\n        });\n      }\n    },\n\n    /** Detailed but slow method to estimate the portion of an element that is visble with the viewport. */\n    get: function (element) {\n      if (typeof element !== \"object\" || !(element instanceof HTMLElement)) {\n        throw new Error(\"No valid HTMLElement.\");\n      }\n\n      const b = element.getBoundingClientRect();\n      const vpw = window.innerWidth || document.documentElement.clientWidth;\n      const vph = window.innerHeight || document.documentElement.clientHeight;\n      let e = {\n        element: element,\n        dimensions: {\n          height: b.height,\n          width: b.width\n        },\n        viewport: {\n          width: vpw,\n          height: vph\n        },\n        position: {\n          top: b.top,\n          left: b.left,\n          right: b.right,\n          bottom: b.bottom,\n          centerX: b.right + b.width / 2,\n          centerY: b.top + b.height / 2\n        },\n        fullyInsideVP: b.top >= 0 && b.bottom <= vph && b.left >= 0 && b.right <= vpw ? true : false,\n        isHidden: false,\n        // This._isHidden(),\n        visibility: 0\n      };\n\n      if (!e.isHidden) {\n        let px = 0;\n\n        for (let y = 0; y < Math.floor(b.height); y++) {\n          const posY = b.top + y;\n\n          for (let x = 0; x < Math.floor(b.width); x++) {\n            const posX = b.left + x;\n\n            if (posX >= 0 && posX <= vpw && posY >= 0 && posY <= vph) {\n              let elem = document.elementFromPoint(posX, posY);\n\n              if (elem !== null && elem === element) {\n                px++;\n              }\n            }\n          }\n        }\n\n        e.visibility = px / (Math.floor(b.width) * Math.floor(b.height));\n        e.visibility = Number(e.visibility.toFixed(2));\n      }\n\n      return e;\n    },\n    visualizeReadingProgress: function () {\n      ajax.call([{\n        methodname: 'mod_page_getreadingprogress',\n        args: {\n          data: {\n            courseid: this.context.courseid,\n            pageid: this.context.pageid\n          }\n        },\n        done: function (reads) {\n          try {\n            let data = Object.values(JSON.parse(reads.response));\n            let max = data.reduce((a, b) => a.count > b.count ? a : b).count;\n\n            for (var i = 0; i < data.length; i++) {\n              jquery__WEBPACK_IMPORTED_MODULE_0___default()('#' + data[i].section).append(jquery__WEBPACK_IMPORTED_MODULE_0___default()('<span></span>') // .text(data[i].section)\n              // .addClass('reading-progress progress-' + Math.ceil(data[i].count / max * 5))\n              );\n            }\n          } catch (e) {\n            console.log(e);\n          }\n        },\n        fail: function (e) {\n          console.error('fail', e);\n        }\n      }]);\n    }\n  },\n  template: `\n        <div></div>\n    `\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ReadingProgress.js\n");

/***/ }),

/***/ "./src/components/ReadingTime.js":
/*!***************************************!*\
  !*** ./src/components/ReadingTime.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* eslint-disable max-len, no-console, no-loop-func, no-undef, no-unused-vars, no-bitwise */\n\n/**\n * TODO\n *\n * ---\n * - counting images does not work\n * - the estimation by certain types of headings should be abstracted\n * - language support / language detection\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'ReadingTime',\n  props: [],\n  data: function () {\n    return {\n      parantSelector: '.longpage-container',\n      language: 'de',\n      readingSpeedPerLanguage: {\n        // 200 word per Minute https://de.wikipedia.org/wiki/Lesegeschwindigkeit\n        // add 12 seconds for each inline image. Boom, read time.\n        de: {\n          cpm: 250,\n          variance: 50\n        }\n      },\n      slowSum: 0,\n      fastSum: 0\n    };\n  },\n  mounted: function () {\n    this.calcH3();\n    this.calcH2();\n  },\n  methods: {\n    calcH2: function () {\n      let numerOfHeadings = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this.parantSelector + ' h2').length; // Add a dummy heading at the end.\n\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this.parantSelector).append('<h2 style=\"display:inline;\" class=\"dummy-heading\">dummy</h2>'); // Iterate over all headings and determine the text length and number of images\n\n      for (var i = 0; i < numerOfHeadings; i++) {\n        let numberOfImages = 0;\n        var fromm = jquery__WEBPACK_IMPORTED_MODULE_0___default()('h2:nth(' + i + ')');\n        var to = jquery__WEBPACK_IMPORTED_MODULE_0___default()('h2:nth(' + (i + 1) + ')');\n        var a = jquery__WEBPACK_IMPORTED_MODULE_0___default()(fromm).nextUntil(to);\n        a.addClass('tmp-marked'); // Concat text from DOM\n\n        var out = '';\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('.tmp-marked').each(() => {\n          out = out + ' ' + jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).text();\n\n          if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).prop(\"tagName\") === 'IMG') {\n            numberOfImages++;\n          }\n\n          jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).removeClass('tmp-marked');\n        });\n        let output = jquery__WEBPACK_IMPORTED_MODULE_0___default()('<span></span>').addClass('mx-0 my-1 p-0').attr('style', ' font-size: 0.8em; color: #333333;').html(this.estimateTime(out, numberOfImages));\n        fromm.after(output); // Console.log('h2', numerOfHeadings, out.length, numberOfImages)\n\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('.dummy-heading').remove();\n      }\n      /*\n                  Let output = $('<span></span>')\n                      .addClass('mx-0 my-1 p-0')\n                      .attr('style', ' font-size: 0.8em; color: #333333;')\n                      .text('Geschätzte Lesezeit ' + this.convertToReadableTime(this.fastSum) + ' - ' + this.convertToReadableTime(this.slowSum) + ' Stunden');\n                  $(this.parantSelector + ' h2').after(output);\n                  */\n\n    },\n    calcH3: function () {\n      let numerOfHeadings = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this.parantSelector + ' h3').length; // Add a dummy heading at the end.\n\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()(this.parantSelector).append('<h3 style=\"display:inline;color:#fff;\" class=\"dummy-heading-3\">ENDE</h3>'); // Iterate over all headings and determine the text length and number of images\n\n      for (var i = 0; i < numerOfHeadings; i++) {\n        let numberOfImages = 0;\n        var fromm = jquery__WEBPACK_IMPORTED_MODULE_0___default()('h3:nth(' + i + ')');\n        var to = jquery__WEBPACK_IMPORTED_MODULE_0___default()('h3:nth(' + (i + 1) + ')');\n        var a = jquery__WEBPACK_IMPORTED_MODULE_0___default()(fromm).nextUntil(to);\n        a.addClass('tmp-marked-h3'); // Concat text from DOM\n\n        var out = '';\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('.tmp-marked-h3').each(function (d) {\n          out = out + ' ' + jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).text();\n\n          if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).prop(\"tagName\") === 'IMG') {\n            numberOfImages++;\n          }\n\n          jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).removeClass('tmp-marked-h3');\n        });\n        let output = jquery__WEBPACK_IMPORTED_MODULE_0___default()('<div></div>').addClass('mx-0 my-3 p-0').attr('style', ' font-size: 0.8em; color: #333333;').html(this.estimateTime(out, numberOfImages));\n        fromm.after(output); // Console.log('h3', numerOfHeadings, out.length, numberOfImages)\n\n        jquery__WEBPACK_IMPORTED_MODULE_0___default()('.dummy-heading-3').remove();\n      }\n    },\n    estimateTime: function (text, numImg) {\n      let textlength = text.match(/([\\s]+)/g).length;\n      numImg = parseInt(numImg, 10) === 0 || typeof numImg !== 'number' ? 1 : numImg;\n      let readingSpeed = this.readingSpeedPerLanguage[this.language];\n      let readingTimeSlow = Math.ceil(textlength / (readingSpeed.cpm - readingSpeed.variance) + numImg * 0.3);\n      let readingTimeFast = Math.ceil(textlength / (readingSpeed.cpm + readingSpeed.variance) + numImg * 0.3);\n      this.slowSum += readingTimeSlow;\n      this.fastSum += readingTimeFast;\n      return 'Geschätzte Lesezeit ' + this.convertToReadableTime(readingTimeFast, readingTimeSlow); // + ' (' + textlength+' Wörter)';\n    },\n    convertToReadableTime: function (fasttime, slowtime) {\n      // Return time;\n      let time = slowtime;\n\n      if (slowtime < 60) {\n        return fasttime + '-' + slowtime + ' Minuten'; // '0:' + (time < 10 ? '0' + time : time);\n      } else if (slowtime > 59 && fasttime < 3600) {\n        let slowhours = Math.ceil(slowtime / 60);\n        let slowminutes = slowtime % 60;\n        let fasthours = Math.ceil(fasttime / 60);\n        let fastminutes = fasttime % 60;\n        return fasthours + ':' + (fastminutes < 10 ? '0' + fastminutes : fastminutes) + ' &ndash; ' + slowhours + ':' + (slowminutes < 10 ? '0' + slowminutes : slowminutes) + ' Stunden';\n      }\n\n      return time; // Should be a rar case, but needs to be treated in some way\n    }\n  },\n  template: `<div></div>`\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/ReadingTime.js\n");

/***/ }),

/***/ "./src/components/Search.js":
/*!**********************************!*\
  !*** ./src/components/Search.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var elasticlunr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! elasticlunr */ \"./node_modules/elasticlunr/elasticlunr.js\");\n/* harmony import */ var elasticlunr__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(elasticlunr__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable max-len, no-console, no-loop-func, no-undef, no-unused-vars, no-bitwise */\n\n/**\n * TODO:\n * ---\n * - Suchbegriff im Text hervorheben\n * - remove jquery\n */\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'Search',\n  props: ['hideTabContent', 'log'],\n  data: function () {\n    return {\n      index: {},\n      search: '',\n      searchResults: '',\n      searchTerm: '',\n      showSearchResults: false\n    };\n  },\n  mounted: function () {\n    this.setupSearch();\n  },\n  methods: {\n    setupSearch: function () {\n      let _this = this;\n\n      var customized_stop_words = ['an', 'der', 'die', 'das']; // Add German stop words\n\n      elasticlunr__WEBPACK_IMPORTED_MODULE_1___default.a.addStopWords(customized_stop_words);\n      _this.index = elasticlunr__WEBPACK_IMPORTED_MODULE_1___default()(); // Index.use(de);\n\n      _this.index.addField('title');\n\n      _this.index.addField('body');\n\n      _this.index.setRef('id'); // Collect index\n\n\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()('.longpage-container h2, .longpage-container h3, .longpage-container h4, .longpage-container div, .longpage-container p, .longpage-container ul, .longpage-container ol, .longpage-container pre').each(function (i, val) {\n        _this.index.addDoc({\n          id: i,\n          title: jquery__WEBPACK_IMPORTED_MODULE_0___default()(val).text(),\n          body: '',\n          link: jquery__WEBPACK_IMPORTED_MODULE_0___default()(val).attr('id')\n        });\n      });\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()('.longpage-container h2, .longpage-container h3, .longpage-container h4, .longpage-container div, .longpage-container p, .longpage-container ul, .longpage-container ol, .longpage-container pre').each(function (i, val) {\n        if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).is(\"h2\") || jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).is(\"h3\") || jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).is(\"h4\")) {\n          _this.index.addDoc({\n            id: i,\n            title: jquery__WEBPACK_IMPORTED_MODULE_0___default()(val).text(),\n            body: '',\n            link: jquery__WEBPACK_IMPORTED_MODULE_0___default()(val).attr('id')\n          });\n        } else {\n          if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(val).attr('id') === '' || jquery__WEBPACK_IMPORTED_MODULE_0___default()(val).attr('id') === undefined) {\n            jquery__WEBPACK_IMPORTED_MODULE_0___default()(val).attr('id', Math.ceil(Math.random() * 1000));\n          }\n\n          _this.index.addDoc({\n            id: i,\n            title: '',\n            body: jquery__WEBPACK_IMPORTED_MODULE_0___default()(val).text(),\n            link: jquery__WEBPACK_IMPORTED_MODULE_0___default()(val).attr('id')\n          });\n        }\n      });\n    },\n    doFulltextSearch: function (e) {\n      let _this = this;\n\n      this.showSearchResults = true;\n\n      if (this.searchTerm !== '') {\n        this.searchResults = this.index.search(String(this.searchTerm), {\n          fields: {\n            title: {\n              boost: 2\n            },\n            body: {\n              boost: 1\n            }\n          }\n        });\n        this.searchResults = this.searchResults.map(function (res) {\n          let pos = res.doc.body.indexOf(_this.searchTerm);\n          res.doc.short = pos > 0 ? '... ' + res.doc.body.substr(pos - 20 > 0 ? pos - 20 : 0, 40).replace(_this.searchTerm, '<strong>' + _this.searchTerm + '</strong>') : _this.searchTerm; // Console.log(pos, _this.searchTerm, res.doc.short)\n\n          return res;\n        });\n\n        _this.$emit('log', 'searchterm', {\n          searchterm: this.searchTerm,\n          results: this.searchResults.length\n        });\n      }\n\n      e.preventDefault();\n    },\n    searchResultClick: function (doc) {\n      this.hideSearchResults();\n      this.$emit('log', 'searchresultselected', {\n        searchterm: this.term,\n        results: this.searchResults.length,\n        selected: doc.link,\n        title: doc.title\n      });\n    },\n    hideSearchResults: function () {\n      this.showSearchResults = false;\n    }\n  },\n  template: `\n        <div class=\"form-inline w-md-75 w-xs-100\">\n            <div class=\"w-100 mb-1 text-right\">\n                <input v-model=\"searchTerm\" v-on:keyup.enter=\"doFulltextSearch\" id=\"search-string\" class=\"form-control form-control-sm mr-sm-2 d-inline w-md-50 w-xs-75 d-inline ml-auto\" type=\"search\" placeholder=\"Suchen\" aria-label=\"Search\">\n                <button @click=\"doFulltextSearch\" id=\"search-full-text\" class=\"btn btn-light btn-sm d-inline mr-0\" type=\"button\"><i class=\"fa fa-search\"></i></button>\n            </div>\n            <div v-if=\"showSearchResults\" class=\"row w-md-50 w-xs-100 ml-auto px-0 mx-0\" style=\"z-index:3000;\">\n                <div class=\"w-100 text-right\">\n                    <button type=\"button\" class=\"close ml-auto align-self-center d-block\" aria-label=\"Close\" v-on:click=\"$emit('hideTabContent')\">\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>\n                <div class=\"p-3 bg-light\" style=\"max-height:80vh; overflow:auto\">\n                    <div class=\"mb-2\">{{ searchResults.length }} Suchtreffer für '{{ searchTerm }}':</div>\n                    <ul id=\"search-results\" class=\"list-unstyled\">\n                        <li class=\"mb-2\" v-for=\"res in searchResults\" v-if=\"res.doc.short.length > 0\">\n                            <a \n                                class=\"underline\"\n                                style=\"word-wrap: break-word; color: #004C97 !important;\"\n                                :href=\"'#'+res.doc.link\"\n                                @click=\"searchResultClick(res.doc)\"\n                                >\n                                <span v-html=\"res.doc.short\"></span>\n                                \n                                </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    `\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/Search.js\n");

/***/ }),

/***/ "./src/components/TableOfContent.js":
/*!******************************************!*\
  !*** ./src/components/TableOfContent.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* eslint-disable max-len */\n\n/**\n * TODO:\n * - remove jquery\n * - put toc into the store\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'TableOfContent',\n  props: ['hideTabContent', 'log'],\n  data: function () {\n    return {\n      h3: [],\n      h4: []\n    };\n  },\n  mounted: function () {\n    this.generateTableOfContent();\n  },\n  methods: {\n    generateTableOfContent: function () {\n      let _this = this; // Generates a table of content from a HTML DOM\n\n\n      var indexH3 = 0;\n      var indexH4 = 0;\n      jquery__WEBPACK_IMPORTED_MODULE_0___default()(\".longpage-container h3, .longpage-container h4\").each(function () {\n        if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).is(\"h3\")) {\n          // .tagName === 'H3'\n          _this.h3.push({\n            id: \"xh3item-\" + indexH3,\n            parent: null,\n            text: jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).text()\n          });\n\n          jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).attr('id', \"xh3item-\" + indexH3);\n          indexH3++;\n        } else if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).is(\"h4\")) {\n          _this.h4.push({\n            id: \"h4item-\" + indexH4,\n            parent: \"xh3item-\" + (indexH3 - 1),\n            text: jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).text()\n          });\n\n          jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).attr('id', \"h4item-\" + indexH4);\n          indexH4++;\n        }\n      });\n    },\n    getChildren: function (id) {\n      return this.h4.filter(function (d) {\n        return d.parent === id ? true : false;\n      });\n    },\n    followLink: function (target, level, event) {\n      let elem = document.getElementById(target);\n\n      if (!elem) {\n        return;\n      }\n\n      this.$emit('log', 'toc_entry_open', {\n        level: level,\n        target: target,\n        title: elem.innerHTML\n      }); // History.pushState(null, null, target)\n      // var scrollPos = window.scrollY || window.scrollTop || document.getElementsByTagName('html')[0].scrollTop || window.pageYOffset;\n\n      let elScrollOffset = elem.getBoundingClientRect().top;\n      let scrollOffset = window.pageYOffset || document.documentElement.scrollTop;\n      let padding = 50;\n      window.scroll({\n        top: elScrollOffset + scrollOffset - padding,\n        behavior: 'smooth'\n      });\n      this.$emit('hideTabContent');\n      event.preventDefault();\n    }\n  },\n  template: `\n        <div class=\"longpage-toc-container\">\n            <button type=\"button\" class=\"close ml-auto align-self-center d-block\" aria-label=\"Close\" v-on:click=\"$emit('hideTabContent')\">\n                <span aria-hidden=\"true\">&times;</span>\n            </button>\n            <div class=\"m-auto w-md-75 w-xs-100\" style=\"max-height:80vh; overflow:auto\">\n                <ul id=\"toc\" class=\"nav-pills list-unstyled mt-0 pt-0\">\n                    <li v-for=\"heading in h3\" class=\"mb-2\">\n                        <a v-on:click=\"followLink(heading.id, 'h3', $event)\" class=\"bold\">{{ heading.text }}</a>\n                        <ul v-if=\"getChildren(heading.id).length > 0\" class=\"ml-3\">\n                            <li v-for=\"subhead in getChildren(heading.id)\">\n                                <a v-on:click=\"followLink(subhead.id, 'h4', $event)\">{{ subhead.text }}</a>\n                            </li>\n                        </ul>\n                    </li>\n                </ul>\n                <ul hidden id=\"toclist\" class=\"nav-pills list-unstyled\"></ul>\n            </div>\n        </div>\n    `\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/components/TableOfContent.js\n");

/***/ }),

/***/ "./src/components/annotation/AnnotationToolbarPopover.vue":
/*!****************************************************************!*\
  !*** ./src/components/annotation/AnnotationToolbarPopover.vue ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _AnnotationToolbarPopover_vue_vue_type_template_id_7c00fc59___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AnnotationToolbarPopover.vue?vue&type=template&id=7c00fc59& */ \"./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=template&id=7c00fc59&\");\n/* harmony import */ var _AnnotationToolbarPopover_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AnnotationToolbarPopover.vue?vue&type=script&lang=js& */ \"./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _AnnotationToolbarPopover_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss& */ \"./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss&\");\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  _AnnotationToolbarPopover_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _AnnotationToolbarPopover_vue_vue_type_template_id_7c00fc59___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _AnnotationToolbarPopover_vue_vue_type_template_id_7c00fc59___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"src/components/annotation/AnnotationToolbarPopover.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hbm5vdGF0aW9uL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWU/MDMwOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXVHO0FBQzNCO0FBQ0w7QUFDYzs7O0FBR3JGO0FBQzZGO0FBQzdGLGdCQUFnQiwyR0FBVTtBQUMxQixFQUFFLDhGQUFNO0FBQ1IsRUFBRSxtR0FBTTtBQUNSLEVBQUUsNEdBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxJQUFJLEtBQVUsRUFBRSxZQWlCZjtBQUNEO0FBQ2UsZ0YiLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9hbm5vdGF0aW9uL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2MwMGZjNTkmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9Bbm5vdGF0aW9uVG9vbGJhclBvcG92ZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvQWRyaWFuU3RyaXR6aW5nZXIvYmEvY29kZS9tb29kbGUvbW9kL3BhZ2UvdnVlL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzdjMDBmYzU5JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzdjMDBmYzU5JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzdjMDBmYzU5JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9Bbm5vdGF0aW9uVG9vbGJhclBvcG92ZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTdjMDBmYzU5JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzdjMDBmYzU5Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvY29tcG9uZW50cy9hbm5vdGF0aW9uL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/annotation/AnnotationToolbarPopover.vue\n");

/***/ }),

/***/ "./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=script&lang=js&":
/*!*****************************************************************************************!*\
  !*** ./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=script&lang=js& ***!
  \*****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_AnnotationToolbarPopover_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib!../../../node_modules/vue-loader/lib??vue-loader-options!./AnnotationToolbarPopover.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_AnnotationToolbarPopover_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hbm5vdGF0aW9uL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWU/NjM5MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUEsd0NBQThMLENBQWdCLDRQQUFHLEVBQUMiLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9hbm5vdGF0aW9uL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Bbm5vdGF0aW9uVG9vbGJhclBvcG92ZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss&":
/*!**************************************************************************************************!*\
  !*** ./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss& ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_AnnotationToolbarPopover_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-style-loader!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/sass-loader/dist/cjs.js!../../../node_modules/vue-loader/lib??vue-loader-options!./AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss& */ \"./node_modules/vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss&\");\n/* harmony import */ var _node_modules_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_AnnotationToolbarPopover_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_AnnotationToolbarPopover_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_AnnotationToolbarPopover_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__) if([\"default\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_style_loader_index_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_AnnotationToolbarPopover_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hbm5vdGF0aW9uL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWU/ZGUwNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQSIsImZpbGUiOiIuL3NyYy9jb21wb25lbnRzL2Fubm90YXRpb24vQW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQW5ub3RhdGlvblRvb2xiYXJQb3BvdmVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=style&index=0&lang=scss&\n");

/***/ }),

/***/ "./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=template&id=7c00fc59&":
/*!***********************************************************************************************!*\
  !*** ./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=template&id=7c00fc59& ***!
  \***********************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_AnnotationToolbarPopover_vue_vue_type_template_id_7c00fc59___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./AnnotationToolbarPopover.vue?vue&type=template&id=7c00fc59& */ \"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=template&id=7c00fc59&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_AnnotationToolbarPopover_vue_vue_type_template_id_7c00fc59___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_AnnotationToolbarPopover_vue_vue_type_template_id_7c00fc59___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9hbm5vdGF0aW9uL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWU/MjY0NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9hbm5vdGF0aW9uL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2MwMGZjNTkmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0Fubm90YXRpb25Ub29sYmFyUG9wb3Zlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2MwMGZjNTkmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/annotation/AnnotationToolbarPopover.vue?vue&type=template&id=7c00fc59&\n");

/***/ }),

/***/ "./src/config/constants.js":
/*!*********************************!*\
  !*** ./src/config/constants.js ***!
  \*********************************/
/*! exports provided: ARROW_H_MARGIN, ArrowDirection, HighlightingConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ARROW_H_MARGIN\", function() { return ARROW_H_MARGIN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ArrowDirection\", function() { return ArrowDirection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HighlightingConfig\", function() { return HighlightingConfig; });\n/**\n * The preferred gap between the end of the text selection and the\n * arrow position of the annotation toolbar popover.\n */\nconst ARROW_H_MARGIN = 20;\nconst ArrowDirection = Object.freeze({\n  DOWN: 0,\n  UP: 1\n});\nconst HighlightingConfig = Object.freeze({\n  HL_TAG_NAME: 'longpage-highlight',\n  HL_CLASS_NAME: 'longpage-highlight',\n  HL_FOCUSED_CLASS_NAME: 'longpage-highlight-focused',\n  SHOW_HLS_CLASS_NAME: 'longpage-highlights-always-on'\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL2NvbnN0YW50cy5qcz82MzBhIl0sIm5hbWVzIjpbIkFSUk9XX0hfTUFSR0lOIiwiQXJyb3dEaXJlY3Rpb24iLCJPYmplY3QiLCJmcmVlemUiLCJET1dOIiwiVVAiLCJIaWdobGlnaHRpbmdDb25maWciLCJITF9UQUdfTkFNRSIsIkhMX0NMQVNTX05BTUUiLCJITF9GT0NVU0VEX0NMQVNTX05BTUUiLCJTSE9XX0hMU19DTEFTU19OQU1FIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsY0FBYyxHQUFHLEVBQXZCO0FBRUEsTUFBTUMsY0FBYyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUN4Q0MsTUFBSSxFQUFFLENBRGtDO0FBRXhDQyxJQUFFLEVBQUU7QUFGb0MsQ0FBZCxDQUF2QjtBQUtBLE1BQU1DLGtCQUFrQixHQUFHSixNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUM1Q0ksYUFBVyxFQUFFLG9CQUQrQjtBQUU1Q0MsZUFBYSxFQUFFLG9CQUY2QjtBQUc1Q0MsdUJBQXFCLEVBQUUsNEJBSHFCO0FBSTVDQyxxQkFBbUIsRUFBRTtBQUp1QixDQUFkLENBQTNCIiwiZmlsZSI6Ii4vc3JjL2NvbmZpZy9jb25zdGFudHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBwcmVmZXJyZWQgZ2FwIGJldHdlZW4gdGhlIGVuZCBvZiB0aGUgdGV4dCBzZWxlY3Rpb24gYW5kIHRoZVxuICogYXJyb3cgcG9zaXRpb24gb2YgdGhlIGFubm90YXRpb24gdG9vbGJhciBwb3BvdmVyLlxuICovXG5leHBvcnQgY29uc3QgQVJST1dfSF9NQVJHSU4gPSAyMDtcblxuZXhwb3J0IGNvbnN0IEFycm93RGlyZWN0aW9uID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgRE9XTjogMCxcbiAgICBVUDogMVxufSk7XG5cbmV4cG9ydCBjb25zdCBIaWdobGlnaHRpbmdDb25maWcgPSBPYmplY3QuZnJlZXplKHtcbiAgICBITF9UQUdfTkFNRTogJ2xvbmdwYWdlLWhpZ2hsaWdodCcsXG4gICAgSExfQ0xBU1NfTkFNRTogJ2xvbmdwYWdlLWhpZ2hsaWdodCcsXG4gICAgSExfRk9DVVNFRF9DTEFTU19OQU1FOiAnbG9uZ3BhZ2UtaGlnaGxpZ2h0LWZvY3VzZWQnLFxuICAgIFNIT1dfSExTX0NMQVNTX05BTUU6ICdsb25ncGFnZS1oaWdobGlnaHRzLWFsd2F5cy1vbicsXG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/config/constants.js\n");

/***/ }),

/***/ "./src/lib/Logging.js":
/*!****************************!*\
  !*** ./src/lib/Logging.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_ajax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core/ajax */ \"core/ajax\");\n/* harmony import */ var core_ajax__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_ajax__WEBPACK_IMPORTED_MODULE_0__);\n/* eslint-disable valid-jsdoc */\n\n/**\n * name: Logging\n * author: 2019 Niels Seidel, niels.seidel@fernuni-hagen.de\n * license: MIT License\n * description: Logs user behavior data inclunding informations about the client system, browser, and time.\n * todo:\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (utils, courseid, options) {\n  this.utils = utils;\n  this.courseid = courseid;\n  this.name = 'log_page';\n  this.options = utils.mergeObjects({\n    outputType: 1,\n    // -1: no logging, 0: console.log(), 1: server log,\n    prefix: '',\n    loggerServiceUrl: null,\n    loggerServiceParams: {\n      \"data\": {}\n    },\n    context: 'default-context'\n  }, options);\n  this.ip = '';\n  /**\n   * Adds a message to the log by constructing a log entry\n   */\n\n  this.add = function (action, msg) {\n    if (typeof msg === 'string') {\n      console.log('warning: uncaptured log entry: ' + msg);\n      return;\n    }\n\n    var time = this.getLogTime();\n    var logEntry = {\n      utc: time.utc,\n      //date: time.date,\n      //time: time.time,\n      location: {\n        //protocol: window.location.protocol,\n        //port: window.location.port,\n        host: window.location.host,\n        pathname: window.location.href,\n        hash: window.location.hash,\n        tabId: window.name.split('=')[0] === \"APLE-MOODLE\" ? window.name.split('=')[1] : \"unknown\"\n      },\n      context: this.options.context,\n      action: action,\n      value: msg,\n      userAgent: {\n        cpu: navigator.oscpu,\n        platform: navigator.platform,\n        engine: navigator.product,\n        browser: navigator.appCodeName,\n        browserVersion: navigator.appVersion,\n        userAgent: navigator.userAgent.replace(/,/gm, ';'),\n        screenHeight: screen.height,\n        // document.body.clientHeight\n        screenWidth: screen.width // document.body.clientWidth\n        // retina\n\n      }\n    };\n    this.output(logEntry);\n  };\n  /**\n   * Validates the msg against illegal characters etc.\n   */\n\n\n  this.validate = function (msg) {\n    return msg;\n  };\n  /**\n   * Returs structured time information\n   */\n\n\n  this.getLogTime = function () {\n    var date = new Date();\n    var s = date.getSeconds();\n    var mi = date.getMinutes();\n    var h = date.getHours();\n    var d = date.getDate();\n    var m = date.getMonth() + 1;\n    var y = date.getFullYear();\n    return {\n      utc: date.getTime(),\n      date: y + '-' + (m <= 9 ? '0' + m : m) + '-' + (d <= 9 ? '0' + d : d),\n      time: (h <= 9 ? '0' + h : h) + ':' + (mi <= 9 ? '0' + mi : mi) + ':' + (s <= 9 ? '0' + s : s) + ':' + date.getMilliseconds()\n    };\n  };\n  /**\n   * Interface for handling the output of the generated log entry\n   */\n\n\n  this.output = function (logEntry) {\n    switch (this.options.outputType) {\n      case 0:\n        console.log(logEntry);\n        break;\n\n      case 1:\n        this.sendLog(logEntry); //console.log(logEntry.value);\n\n        break;\n\n      default: // Do nothing\n\n    }\n  };\n  /**\n   * Makes an AJAX call to send the log data set to the server\n   */\n\n\n  this.sendLog = function (entry) {\n    let _this = this;\n\n    core_ajax__WEBPACK_IMPORTED_MODULE_0___default.a.call([{\n      methodname: 'mod_page_log',\n      args: {\n        data: {\n          courseid: _this.courseid,\n          action: entry.action,\n          utc: Math.ceil(entry.utc / 1000),\n          entry: JSON.stringify(entry)\n        }\n      },\n      done: function (msg) {// console.log('ok', msg);\n      },\n      fail: function (e) {\n        console.error('fail', e);\n      }\n    }]);\n  };\n});\n;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/Logging.js\n");

/***/ }),

/***/ "./src/lib/annotation/anchoring.js":
/*!*****************************************!*\
  !*** ./src/lib/annotation/anchoring.js ***!
  \*****************************************/
/*! exports provided: Anchoring */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Anchoring\", function() { return Anchoring; });\n/* harmony import */ var _highlighting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./highlighting */ \"./src/lib/annotation/highlighting.js\");\n/* harmony import */ var _hypothesis_anchoring_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hypothesis/anchoring/html */ \"./src/lib/annotation/hypothesis/anchoring/html.js\");\n/* harmony import */ var _hypothesis_anchoring_range__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hypothesis/anchoring/range */ \"./src/lib/annotation/hypothesis/anchoring/range.js\");\n/**\n * Based on Hypothesis client's modules (see https://github.com/hypothesis/client):\n *   - src/annotator/guest.js\n */\n\n\n\nclass Anchoring {\n  /**\n   * @param {HTMLElement} root\n   * @param {Anchor[]} anchors\n   */\n  constructor(root, anchors = []) {\n    this.anchoring = {\n      anchor: _hypothesis_anchoring_html__WEBPACK_IMPORTED_MODULE_1__[\"anchor\"]\n    };\n    this.root = root;\n    this.anchors = anchors;\n  }\n  /**\n   * Anchor (locate) an annotation's selectors in the document.\n   * Used after new annotation have been loaded & after new annotation has been created.\n   *\n   * @param {Annotation} annotation\n   * @param {string} cssClass\n   * @return {Promise<Anchor[]>}\n   */\n\n\n  anchor(annotation, cssClass) {\n    let anchor; // Anchors for all annotations are in the `anchors` instance property. These\n    // are anchors for this annotation only. After all the targets have been\n    // processed these will be appended to the list of anchors known to the\n    // instance. Anchors hold an annotation, a target of that annotation, a\n    // document range for that target and an Array of highlights.\n\n    const anchors = []; // The targets that are already anchored. This function consults this to\n    // determine which targets can be left alone.\n\n    const anchoredTargets = []; // These are the highlights for existing anchors of this annotation with\n    // targets that have since been removed from the annotation. These will\n    // be removed by this function.\n\n    let deadHighlights = []; // Initialize the target array.\n\n    if (!annotation.target) {\n      annotation.target = [];\n    }\n    /**\n     * Locate the region of the current document that the annotation refers to.\n     *\n     * @param {Target} target\n     */\n\n\n    const locate = target => {\n      // Check that the anchor has a TextQuoteSelector -- without a\n      // TextQuoteSelector we have no basis on which to verify that we have\n      // reanchored correctly and so we shouldn't even try.\n      //\n      // Returning an anchor without a range will result in this annotation being\n      // treated as an orphan (assuming no other targets anchor).\n      if (!target.selector || !target.selector.some(s => s.type === 'TextQuoteSelector')) {\n        return Promise.resolve({\n          annotation,\n          target\n        });\n      } // Find a target using the anchoring module.\n\n\n      return this.anchoring.anchor(this.root, target.selector).then(range => ({\n        annotation,\n        target,\n        range\n      })).catch(() => ({\n        annotation,\n        target\n      }));\n    };\n    /**\n     * Highlight the range for an anchor.\n     *\n     * @param {Anchor} anchor\n     */\n\n\n    const highlight = anchor => {\n      if (!anchor.range) {\n        return anchor;\n      }\n\n      const range = Object(_hypothesis_anchoring_range__WEBPACK_IMPORTED_MODULE_2__[\"sniff\"])(anchor.range);\n      const normedRange = range.normalize(this.root);\n      const highlights =\n      /** @type {AnnotationHighlight[]} */\n      Object(_highlighting__WEBPACK_IMPORTED_MODULE_0__[\"highlightRange\"])(normedRange, cssClass); // You need to put some information on the highlight so when it is clicked later on we can identify the annotation\n\n      highlights.forEach(h => {\n        h._annotation = anchor.annotation;\n      });\n      anchor.highlights = highlights;\n      return anchor;\n    };\n\n    function getAnnotationsAnchoringState(anchors) {\n      let hasAnchorableTargets = false;\n      let hasAnchoredTargets = false;\n\n      for (let anchor of anchors) {\n        if (anchor.target.selector) {\n          hasAnchorableTargets = true;\n\n          if (anchor.range) {\n            hasAnchoredTargets = true;\n            break;\n          }\n        }\n      }\n\n      return {\n        hasAnchorableTargets,\n        hasAnchoredTargets\n      };\n    }\n\n    const markOrphans = anchors => {\n      // An annotation is considered to be an orphan if it has at least one\n      // target with selectors, and all targets with selectors failed to anchor\n      // (i.e. we didn't find it in the page and thus it has no range).\n      let {\n        hasAnchorableTargets,\n        hasAnchoredTargets\n      } = getAnnotationsAnchoringState(anchors);\n      annotation.$orphan = hasAnchorableTargets && !hasAnchoredTargets;\n      return anchors;\n    };\n    /**\n     * Inform other parts of the application about\n     * the results of anchoring.\n     *\n     * @param {Anchor[]} anchors\n     */\n\n\n    const sync = anchors => {\n      // Add the anchors for this annotation to instance storage.\n      this.anchors = this.anchors.concat(anchors); // TODO: Inform other parts of the application about the results of anchoring.\n\n      return anchors;\n    }; // Remove all the anchors for this annotation from the instance storage.\n\n\n    for (anchor of this.anchors.splice(0, this.anchors.length)) {\n      if (anchor.annotation === annotation) {\n        // Anchors are valid as long as they still have a range and their target\n        // is still in the list of targets for this annotation.\n        if (anchor.range && annotation.target.includes(anchor.target)) {\n          anchors.push(anchor);\n          anchoredTargets.push(anchor.target);\n        } else if (anchor.highlights) {\n          // These highlights are no longer valid and should be removed.\n          deadHighlights = deadHighlights.concat(anchor.highlights);\n          delete anchor.highlights;\n          delete anchor.range;\n        }\n      } else {\n        // These can be ignored, so push them back onto the new list.\n        this.anchors.push(anchor);\n      }\n    } // Remove all the highlights that have no corresponding target anymore.\n\n\n    requestAnimationFrame(() => Object(_highlighting__WEBPACK_IMPORTED_MODULE_0__[\"removeHighlights\"])(deadHighlights)); // Actual work going on\n    // Anchor any targets of this annotation that are not anchored already.\n\n    for (let target of annotation.target) {\n      if (!anchoredTargets.includes(target)) {\n        anchor = locate(target).then(highlight);\n        anchors.push(anchor);\n      }\n    }\n\n    return Promise.all(anchors).then(markOrphans).then(sync);\n  }\n  /**\n   * Remove the anchors and associated highlights for an annotation from the document.\n   *\n   * @param {Annotation} annotation\n   */\n\n\n  detach(annotation) {\n    const anchors = [];\n    let unhighlight = [];\n\n    for (let anchor of this.anchors) {\n      if (anchor.annotation === annotation) {\n        unhighlight.push(...(anchor.highlights || []));\n      } else {\n        anchors.push(anchor);\n      }\n    }\n\n    this.anchors = anchors;\n    requestAnimationFrame(() => {\n      Object(_highlighting__WEBPACK_IMPORTED_MODULE_0__[\"removeHighlights\"])(unhighlight);\n    });\n  }\n\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2Fubm90YXRpb24vYW5jaG9yaW5nLmpzPzg1ZTQiXSwibmFtZXMiOlsiQW5jaG9yaW5nIiwiY29uc3RydWN0b3IiLCJyb290IiwiYW5jaG9ycyIsImFuY2hvcmluZyIsImFuY2hvciIsImFubm90YXRpb24iLCJjc3NDbGFzcyIsImFuY2hvcmVkVGFyZ2V0cyIsImRlYWRIaWdobGlnaHRzIiwidGFyZ2V0IiwibG9jYXRlIiwic2VsZWN0b3IiLCJzb21lIiwicyIsInR5cGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJyYW5nZSIsImNhdGNoIiwiaGlnaGxpZ2h0Iiwic25pZmYiLCJub3JtZWRSYW5nZSIsIm5vcm1hbGl6ZSIsImhpZ2hsaWdodHMiLCJoaWdobGlnaHRSYW5nZSIsImZvckVhY2giLCJoIiwiX2Fubm90YXRpb24iLCJnZXRBbm5vdGF0aW9uc0FuY2hvcmluZ1N0YXRlIiwiaGFzQW5jaG9yYWJsZVRhcmdldHMiLCJoYXNBbmNob3JlZFRhcmdldHMiLCJtYXJrT3JwaGFucyIsIiRvcnBoYW4iLCJzeW5jIiwiY29uY2F0Iiwic3BsaWNlIiwibGVuZ3RoIiwiaW5jbHVkZXMiLCJwdXNoIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmVtb3ZlSGlnaGxpZ2h0cyIsImFsbCIsImRldGFjaCIsInVuaGlnaGxpZ2h0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFTyxNQUFNQSxTQUFOLENBQWdCO0FBQ25CO0FBQ0o7QUFDQTtBQUNBO0FBQ0lDLGFBQVcsQ0FBQ0MsSUFBRCxFQUFPQyxPQUFPLEdBQUcsRUFBakIsRUFBcUI7QUFDNUIsU0FBS0MsU0FBTCxHQUFpQjtBQUFDQywrRUFBTUE7QUFBUCxLQUFqQjtBQUNBLFNBQUtILElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtDLE9BQUwsR0FBZUEsT0FBZjtBQUNIO0FBRUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0lFLFFBQU0sQ0FBQ0MsVUFBRCxFQUFhQyxRQUFiLEVBQXVCO0FBQ3pCLFFBQUlGLE1BQUosQ0FEeUIsQ0FHekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxVQUFNRixPQUFPLEdBQUcsRUFBaEIsQ0FSeUIsQ0FVekI7QUFDQTs7QUFDQSxVQUFNSyxlQUFlLEdBQUcsRUFBeEIsQ0FaeUIsQ0FjekI7QUFDQTtBQUNBOztBQUNBLFFBQUlDLGNBQWMsR0FBRyxFQUFyQixDQWpCeUIsQ0FtQnpCOztBQUNBLFFBQUksQ0FBQ0gsVUFBVSxDQUFDSSxNQUFoQixFQUF3QjtBQUNwQkosZ0JBQVUsQ0FBQ0ksTUFBWCxHQUFvQixFQUFwQjtBQUNIO0FBRUQ7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7O0FBQ1EsVUFBTUMsTUFBTSxHQUFHRCxNQUFNLElBQUk7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFDSSxDQUFDQSxNQUFNLENBQUNFLFFBQVIsSUFDQSxDQUFDRixNQUFNLENBQUNFLFFBQVAsQ0FBZ0JDLElBQWhCLENBQXFCQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsSUFBRixLQUFXLG1CQUFyQyxDQUZMLEVBR0U7QUFDRSxlQUFPQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0I7QUFBRVgsb0JBQUY7QUFBY0k7QUFBZCxTQUFoQixDQUFQO0FBQ0gsT0Fab0IsQ0FjckI7OztBQUNBLGFBQU8sS0FBS04sU0FBTCxDQUFlQyxNQUFmLENBQXNCLEtBQUtILElBQTNCLEVBQWlDUSxNQUFNLENBQUNFLFFBQXhDLEVBQ0ZNLElBREUsQ0FDR0MsS0FBSyxLQUFLO0FBQ1piLGtCQURZO0FBRVpJLGNBRlk7QUFHWlM7QUFIWSxPQUFMLENBRFIsRUFNRkMsS0FORSxDQU1JLE9BQU87QUFDVmQsa0JBRFU7QUFFVkk7QUFGVSxPQUFQLENBTkosQ0FBUDtBQVVILEtBekJEO0FBMkJBO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7OztBQUNRLFVBQU1XLFNBQVMsR0FBR2hCLE1BQU0sSUFBSTtBQUN4QixVQUFJLENBQUNBLE1BQU0sQ0FBQ2MsS0FBWixFQUFtQjtBQUNmLGVBQU9kLE1BQVA7QUFDSDs7QUFDRCxZQUFNYyxLQUFLLEdBQUdHLHlFQUFLLENBQUNqQixNQUFNLENBQUNjLEtBQVIsQ0FBbkI7QUFDQSxZQUFNSSxXQUFXLEdBQUdKLEtBQUssQ0FBQ0ssU0FBTixDQUFnQixLQUFLdEIsSUFBckIsQ0FBcEI7QUFDQSxZQUFNdUIsVUFBVTtBQUFHO0FBQXNDQywwRUFBYyxDQUNuRUgsV0FEbUUsRUFFbkVoQixRQUZtRSxDQUF2RSxDQU53QixDQVV4Qjs7QUFDQWtCLGdCQUFVLENBQUNFLE9BQVgsQ0FBbUJDLENBQUMsSUFBSTtBQUNwQkEsU0FBQyxDQUFDQyxXQUFGLEdBQWdCeEIsTUFBTSxDQUFDQyxVQUF2QjtBQUNILE9BRkQ7QUFHQUQsWUFBTSxDQUFDb0IsVUFBUCxHQUFvQkEsVUFBcEI7QUFDQSxhQUFPcEIsTUFBUDtBQUNILEtBaEJEOztBQWtCQSxhQUFTeUIsNEJBQVQsQ0FBc0MzQixPQUF0QyxFQUErQztBQUMzQyxVQUFJNEIsb0JBQW9CLEdBQUcsS0FBM0I7QUFDQSxVQUFJQyxrQkFBa0IsR0FBRyxLQUF6Qjs7QUFDQSxXQUFLLElBQUkzQixNQUFULElBQW1CRixPQUFuQixFQUE0QjtBQUN4QixZQUFJRSxNQUFNLENBQUNLLE1BQVAsQ0FBY0UsUUFBbEIsRUFBNEI7QUFDeEJtQiw4QkFBb0IsR0FBRyxJQUF2Qjs7QUFDQSxjQUFJMUIsTUFBTSxDQUFDYyxLQUFYLEVBQWtCO0FBQ2RhLDhCQUFrQixHQUFHLElBQXJCO0FBQ0E7QUFDSDtBQUNKO0FBQ0o7O0FBQ0QsYUFBTztBQUFDRCw0QkFBRDtBQUF1QkM7QUFBdkIsT0FBUDtBQUNIOztBQUVELFVBQU1DLFdBQVcsR0FBRzlCLE9BQU8sSUFBSTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxVQUFJO0FBQUM0Qiw0QkFBRDtBQUF1QkM7QUFBdkIsVUFBNkNGLDRCQUE0QixDQUFDM0IsT0FBRCxDQUE3RTtBQUNBRyxnQkFBVSxDQUFDNEIsT0FBWCxHQUFxQkgsb0JBQW9CLElBQUksQ0FBQ0Msa0JBQTlDO0FBQ0EsYUFBTzdCLE9BQVA7QUFDSCxLQVBEO0FBU0E7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDUSxVQUFNZ0MsSUFBSSxHQUFHaEMsT0FBTyxJQUFJO0FBQ3BCO0FBQ0EsV0FBS0EsT0FBTCxHQUFlLEtBQUtBLE9BQUwsQ0FBYWlDLE1BQWIsQ0FBb0JqQyxPQUFwQixDQUFmLENBRm9CLENBR3BCOztBQUNBLGFBQU9BLE9BQVA7QUFDSCxLQUxELENBN0d5QixDQW9IekI7OztBQUNBLFNBQUtFLE1BQUwsSUFBZSxLQUFLRixPQUFMLENBQWFrQyxNQUFiLENBQW9CLENBQXBCLEVBQXVCLEtBQUtsQyxPQUFMLENBQWFtQyxNQUFwQyxDQUFmLEVBQTREO0FBQ3hELFVBQUlqQyxNQUFNLENBQUNDLFVBQVAsS0FBc0JBLFVBQTFCLEVBQXNDO0FBQ2xDO0FBQ0E7QUFDQSxZQUFJRCxNQUFNLENBQUNjLEtBQVAsSUFBZ0JiLFVBQVUsQ0FBQ0ksTUFBWCxDQUFrQjZCLFFBQWxCLENBQTJCbEMsTUFBTSxDQUFDSyxNQUFsQyxDQUFwQixFQUErRDtBQUMzRFAsaUJBQU8sQ0FBQ3FDLElBQVIsQ0FBYW5DLE1BQWI7QUFDQUcseUJBQWUsQ0FBQ2dDLElBQWhCLENBQXFCbkMsTUFBTSxDQUFDSyxNQUE1QjtBQUNILFNBSEQsTUFHTyxJQUFJTCxNQUFNLENBQUNvQixVQUFYLEVBQXVCO0FBQzFCO0FBQ0FoQix3QkFBYyxHQUFHQSxjQUFjLENBQUMyQixNQUFmLENBQXNCL0IsTUFBTSxDQUFDb0IsVUFBN0IsQ0FBakI7QUFDQSxpQkFBT3BCLE1BQU0sQ0FBQ29CLFVBQWQ7QUFDQSxpQkFBT3BCLE1BQU0sQ0FBQ2MsS0FBZDtBQUNIO0FBQ0osT0FaRCxNQVlPO0FBQ0g7QUFDQSxhQUFLaEIsT0FBTCxDQUFhcUMsSUFBYixDQUFrQm5DLE1BQWxCO0FBQ0g7QUFDSixLQXRJd0IsQ0F3SXpCOzs7QUFDQW9DLHlCQUFxQixDQUFDLE1BQU1DLHNFQUFnQixDQUFDakMsY0FBRCxDQUF2QixDQUFyQixDQXpJeUIsQ0EySXpCO0FBQ0E7O0FBQ0EsU0FBSyxJQUFJQyxNQUFULElBQW1CSixVQUFVLENBQUNJLE1BQTlCLEVBQXNDO0FBQ2xDLFVBQUksQ0FBQ0YsZUFBZSxDQUFDK0IsUUFBaEIsQ0FBeUI3QixNQUF6QixDQUFMLEVBQXVDO0FBQ25DTCxjQUFNLEdBQUdNLE1BQU0sQ0FBQ0QsTUFBRCxDQUFOLENBQWVRLElBQWYsQ0FBb0JHLFNBQXBCLENBQVQ7QUFDQWxCLGVBQU8sQ0FBQ3FDLElBQVIsQ0FBYW5DLE1BQWI7QUFDSDtBQUNKOztBQUNELFdBQU9XLE9BQU8sQ0FBQzJCLEdBQVIsQ0FBWXhDLE9BQVosRUFBcUJlLElBQXJCLENBQTBCZSxXQUExQixFQUF1Q2YsSUFBdkMsQ0FBNENpQixJQUE1QyxDQUFQO0FBQ0g7QUFFRDtBQUNKO0FBQ0E7QUFDQTtBQUNBOzs7QUFDSVMsUUFBTSxDQUFDdEMsVUFBRCxFQUFhO0FBQ2YsVUFBTUgsT0FBTyxHQUFHLEVBQWhCO0FBQ0EsUUFBSTBDLFdBQVcsR0FBRyxFQUFsQjs7QUFFQSxTQUFLLElBQUl4QyxNQUFULElBQW1CLEtBQUtGLE9BQXhCLEVBQWlDO0FBQzdCLFVBQUlFLE1BQU0sQ0FBQ0MsVUFBUCxLQUFzQkEsVUFBMUIsRUFBc0M7QUFDbEN1QyxtQkFBVyxDQUFDTCxJQUFaLENBQWlCLElBQUluQyxNQUFNLENBQUNvQixVQUFQLElBQXFCLEVBQXpCLENBQWpCO0FBQ0gsT0FGRCxNQUVPO0FBQ0h0QixlQUFPLENBQUNxQyxJQUFSLENBQWFuQyxNQUFiO0FBQ0g7QUFDSjs7QUFFRCxTQUFLRixPQUFMLEdBQWVBLE9BQWY7QUFFQXNDLHlCQUFxQixDQUFDLE1BQU07QUFDeEJDLDRFQUFnQixDQUFDRyxXQUFELENBQWhCO0FBQ0gsS0FGb0IsQ0FBckI7QUFHSDs7QUEvTGtCIiwiZmlsZSI6Ii4vc3JjL2xpYi9hbm5vdGF0aW9uL2FuY2hvcmluZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQmFzZWQgb24gSHlwb3RoZXNpcyBjbGllbnQncyBtb2R1bGVzIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2h5cG90aGVzaXMvY2xpZW50KTpcbiAqICAgLSBzcmMvYW5ub3RhdG9yL2d1ZXN0LmpzXG4gKi9cbmltcG9ydCB7aGlnaGxpZ2h0UmFuZ2UsIHJlbW92ZUhpZ2hsaWdodHN9IGZyb20gXCIuL2hpZ2hsaWdodGluZ1wiO1xuaW1wb3J0IHthbmNob3J9IGZyb20gXCIuL2h5cG90aGVzaXMvYW5jaG9yaW5nL2h0bWxcIjtcbmltcG9ydCB7c25pZmZ9IGZyb20gXCIuL2h5cG90aGVzaXMvYW5jaG9yaW5nL3JhbmdlXCI7XG5cbmV4cG9ydCBjbGFzcyBBbmNob3Jpbmcge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvb3RcbiAgICAgKiBAcGFyYW0ge0FuY2hvcltdfSBhbmNob3JzXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iocm9vdCwgYW5jaG9ycyA9IFtdKSB7XG4gICAgICAgIHRoaXMuYW5jaG9yaW5nID0ge2FuY2hvcn07XG4gICAgICAgIHRoaXMucm9vdCA9IHJvb3RcbiAgICAgICAgdGhpcy5hbmNob3JzID0gYW5jaG9ycztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbmNob3IgKGxvY2F0ZSkgYW4gYW5ub3RhdGlvbidzIHNlbGVjdG9ycyBpbiB0aGUgZG9jdW1lbnQuXG4gICAgICogVXNlZCBhZnRlciBuZXcgYW5ub3RhdGlvbiBoYXZlIGJlZW4gbG9hZGVkICYgYWZ0ZXIgbmV3IGFubm90YXRpb24gaGFzIGJlZW4gY3JlYXRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QW5ub3RhdGlvbn0gYW5ub3RhdGlvblxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjc3NDbGFzc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8QW5jaG9yW10+fVxuICAgICAqL1xuICAgIGFuY2hvcihhbm5vdGF0aW9uLCBjc3NDbGFzcykge1xuICAgICAgICBsZXQgYW5jaG9yO1xuXG4gICAgICAgIC8vIEFuY2hvcnMgZm9yIGFsbCBhbm5vdGF0aW9ucyBhcmUgaW4gdGhlIGBhbmNob3JzYCBpbnN0YW5jZSBwcm9wZXJ0eS4gVGhlc2VcbiAgICAgICAgLy8gYXJlIGFuY2hvcnMgZm9yIHRoaXMgYW5ub3RhdGlvbiBvbmx5LiBBZnRlciBhbGwgdGhlIHRhcmdldHMgaGF2ZSBiZWVuXG4gICAgICAgIC8vIHByb2Nlc3NlZCB0aGVzZSB3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZSBsaXN0IG9mIGFuY2hvcnMga25vd24gdG8gdGhlXG4gICAgICAgIC8vIGluc3RhbmNlLiBBbmNob3JzIGhvbGQgYW4gYW5ub3RhdGlvbiwgYSB0YXJnZXQgb2YgdGhhdCBhbm5vdGF0aW9uLCBhXG4gICAgICAgIC8vIGRvY3VtZW50IHJhbmdlIGZvciB0aGF0IHRhcmdldCBhbmQgYW4gQXJyYXkgb2YgaGlnaGxpZ2h0cy5cbiAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtdO1xuXG4gICAgICAgIC8vIFRoZSB0YXJnZXRzIHRoYXQgYXJlIGFscmVhZHkgYW5jaG9yZWQuIFRoaXMgZnVuY3Rpb24gY29uc3VsdHMgdGhpcyB0b1xuICAgICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggdGFyZ2V0cyBjYW4gYmUgbGVmdCBhbG9uZS5cbiAgICAgICAgY29uc3QgYW5jaG9yZWRUYXJnZXRzID0gW107XG5cbiAgICAgICAgLy8gVGhlc2UgYXJlIHRoZSBoaWdobGlnaHRzIGZvciBleGlzdGluZyBhbmNob3JzIG9mIHRoaXMgYW5ub3RhdGlvbiB3aXRoXG4gICAgICAgIC8vIHRhcmdldHMgdGhhdCBoYXZlIHNpbmNlIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBhbm5vdGF0aW9uLiBUaGVzZSB3aWxsXG4gICAgICAgIC8vIGJlIHJlbW92ZWQgYnkgdGhpcyBmdW5jdGlvbi5cbiAgICAgICAgbGV0IGRlYWRIaWdobGlnaHRzID0gW107XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgdGFyZ2V0IGFycmF5LlxuICAgICAgICBpZiAoIWFubm90YXRpb24udGFyZ2V0KSB7XG4gICAgICAgICAgICBhbm5vdGF0aW9uLnRhcmdldCA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIExvY2F0ZSB0aGUgcmVnaW9uIG9mIHRoZSBjdXJyZW50IGRvY3VtZW50IHRoYXQgdGhlIGFubm90YXRpb24gcmVmZXJzIHRvLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1RhcmdldH0gdGFyZ2V0XG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBsb2NhdGUgPSB0YXJnZXQgPT4ge1xuICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGUgYW5jaG9yIGhhcyBhIFRleHRRdW90ZVNlbGVjdG9yIC0tIHdpdGhvdXQgYVxuICAgICAgICAgICAgLy8gVGV4dFF1b3RlU2VsZWN0b3Igd2UgaGF2ZSBubyBiYXNpcyBvbiB3aGljaCB0byB2ZXJpZnkgdGhhdCB3ZSBoYXZlXG4gICAgICAgICAgICAvLyByZWFuY2hvcmVkIGNvcnJlY3RseSBhbmQgc28gd2Ugc2hvdWxkbid0IGV2ZW4gdHJ5LlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFJldHVybmluZyBhbiBhbmNob3Igd2l0aG91dCBhIHJhbmdlIHdpbGwgcmVzdWx0IGluIHRoaXMgYW5ub3RhdGlvbiBiZWluZ1xuICAgICAgICAgICAgLy8gdHJlYXRlZCBhcyBhbiBvcnBoYW4gKGFzc3VtaW5nIG5vIG90aGVyIHRhcmdldHMgYW5jaG9yKS5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhdGFyZ2V0LnNlbGVjdG9yIHx8XG4gICAgICAgICAgICAgICAgIXRhcmdldC5zZWxlY3Rvci5zb21lKHMgPT4gcy50eXBlID09PSAnVGV4dFF1b3RlU2VsZWN0b3InKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IGFubm90YXRpb24sIHRhcmdldCB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmluZCBhIHRhcmdldCB1c2luZyB0aGUgYW5jaG9yaW5nIG1vZHVsZS5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFuY2hvcmluZy5hbmNob3IodGhpcy5yb290LCB0YXJnZXQuc2VsZWN0b3IpXG4gICAgICAgICAgICAgICAgLnRoZW4ocmFuZ2UgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICByYW5nZSxcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSGlnaGxpZ2h0IHRoZSByYW5nZSBmb3IgYW4gYW5jaG9yLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0FuY2hvcn0gYW5jaG9yXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBoaWdobGlnaHQgPSBhbmNob3IgPT4ge1xuICAgICAgICAgICAgaWYgKCFhbmNob3IucmFuZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5jaG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBzbmlmZihhbmNob3IucmFuZ2UpO1xuICAgICAgICAgICAgY29uc3Qgbm9ybWVkUmFuZ2UgPSByYW5nZS5ub3JtYWxpemUodGhpcy5yb290KTtcbiAgICAgICAgICAgIGNvbnN0IGhpZ2hsaWdodHMgPSAvKiogQHR5cGUge0Fubm90YXRpb25IaWdobGlnaHRbXX0gKi8gKGhpZ2hsaWdodFJhbmdlKFxuICAgICAgICAgICAgICAgIG5vcm1lZFJhbmdlLFxuICAgICAgICAgICAgICAgIGNzc0NsYXNzXG4gICAgICAgICAgICApKVxuICAgICAgICAgICAgLy8gWW91IG5lZWQgdG8gcHV0IHNvbWUgaW5mb3JtYXRpb24gb24gdGhlIGhpZ2hsaWdodCBzbyB3aGVuIGl0IGlzIGNsaWNrZWQgbGF0ZXIgb24gd2UgY2FuIGlkZW50aWZ5IHRoZSBhbm5vdGF0aW9uXG4gICAgICAgICAgICBoaWdobGlnaHRzLmZvckVhY2goaCA9PiB7XG4gICAgICAgICAgICAgICAgaC5fYW5ub3RhdGlvbiA9IGFuY2hvci5hbm5vdGF0aW9uO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhbmNob3IuaGlnaGxpZ2h0cyA9IGhpZ2hsaWdodHM7XG4gICAgICAgICAgICByZXR1cm4gYW5jaG9yO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldEFubm90YXRpb25zQW5jaG9yaW5nU3RhdGUoYW5jaG9ycykge1xuICAgICAgICAgICAgbGV0IGhhc0FuY2hvcmFibGVUYXJnZXRzID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgaGFzQW5jaG9yZWRUYXJnZXRzID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKGxldCBhbmNob3Igb2YgYW5jaG9ycykge1xuICAgICAgICAgICAgICAgIGlmIChhbmNob3IudGFyZ2V0LnNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc0FuY2hvcmFibGVUYXJnZXRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuY2hvci5yYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFzQW5jaG9yZWRUYXJnZXRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtoYXNBbmNob3JhYmxlVGFyZ2V0cywgaGFzQW5jaG9yZWRUYXJnZXRzfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1hcmtPcnBoYW5zID0gYW5jaG9ycyA9PiB7XG4gICAgICAgICAgICAvLyBBbiBhbm5vdGF0aW9uIGlzIGNvbnNpZGVyZWQgdG8gYmUgYW4gb3JwaGFuIGlmIGl0IGhhcyBhdCBsZWFzdCBvbmVcbiAgICAgICAgICAgIC8vIHRhcmdldCB3aXRoIHNlbGVjdG9ycywgYW5kIGFsbCB0YXJnZXRzIHdpdGggc2VsZWN0b3JzIGZhaWxlZCB0byBhbmNob3JcbiAgICAgICAgICAgIC8vIChpLmUuIHdlIGRpZG4ndCBmaW5kIGl0IGluIHRoZSBwYWdlIGFuZCB0aHVzIGl0IGhhcyBubyByYW5nZSkuXG4gICAgICAgICAgICBsZXQge2hhc0FuY2hvcmFibGVUYXJnZXRzLCBoYXNBbmNob3JlZFRhcmdldHN9ID0gZ2V0QW5ub3RhdGlvbnNBbmNob3JpbmdTdGF0ZShhbmNob3JzKTtcbiAgICAgICAgICAgIGFubm90YXRpb24uJG9ycGhhbiA9IGhhc0FuY2hvcmFibGVUYXJnZXRzICYmICFoYXNBbmNob3JlZFRhcmdldHM7XG4gICAgICAgICAgICByZXR1cm4gYW5jaG9yc1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluZm9ybSBvdGhlciBwYXJ0cyBvZiB0aGUgYXBwbGljYXRpb24gYWJvdXRcbiAgICAgICAgICogdGhlIHJlc3VsdHMgb2YgYW5jaG9yaW5nLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0FuY2hvcltdfSBhbmNob3JzXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBzeW5jID0gYW5jaG9ycyA9PiB7XG4gICAgICAgICAgICAvLyBBZGQgdGhlIGFuY2hvcnMgZm9yIHRoaXMgYW5ub3RhdGlvbiB0byBpbnN0YW5jZSBzdG9yYWdlLlxuICAgICAgICAgICAgdGhpcy5hbmNob3JzID0gdGhpcy5hbmNob3JzLmNvbmNhdChhbmNob3JzKVxuICAgICAgICAgICAgLy8gVE9ETzogSW5mb3JtIG90aGVyIHBhcnRzIG9mIHRoZSBhcHBsaWNhdGlvbiBhYm91dCB0aGUgcmVzdWx0cyBvZiBhbmNob3JpbmcuXG4gICAgICAgICAgICByZXR1cm4gYW5jaG9ycztcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBSZW1vdmUgYWxsIHRoZSBhbmNob3JzIGZvciB0aGlzIGFubm90YXRpb24gZnJvbSB0aGUgaW5zdGFuY2Ugc3RvcmFnZS5cbiAgICAgICAgZm9yIChhbmNob3Igb2YgdGhpcy5hbmNob3JzLnNwbGljZSgwLCB0aGlzLmFuY2hvcnMubGVuZ3RoKSkge1xuICAgICAgICAgICAgaWYgKGFuY2hvci5hbm5vdGF0aW9uID09PSBhbm5vdGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gQW5jaG9ycyBhcmUgdmFsaWQgYXMgbG9uZyBhcyB0aGV5IHN0aWxsIGhhdmUgYSByYW5nZSBhbmQgdGhlaXIgdGFyZ2V0XG4gICAgICAgICAgICAgICAgLy8gaXMgc3RpbGwgaW4gdGhlIGxpc3Qgb2YgdGFyZ2V0cyBmb3IgdGhpcyBhbm5vdGF0aW9uLlxuICAgICAgICAgICAgICAgIGlmIChhbmNob3IucmFuZ2UgJiYgYW5ub3RhdGlvbi50YXJnZXQuaW5jbHVkZXMoYW5jaG9yLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5jaG9ycy5wdXNoKGFuY2hvcik7XG4gICAgICAgICAgICAgICAgICAgIGFuY2hvcmVkVGFyZ2V0cy5wdXNoKGFuY2hvci50YXJnZXQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYW5jaG9yLmhpZ2hsaWdodHMpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2UgaGlnaGxpZ2h0cyBhcmUgbm8gbG9uZ2VyIHZhbGlkIGFuZCBzaG91bGQgYmUgcmVtb3ZlZC5cbiAgICAgICAgICAgICAgICAgICAgZGVhZEhpZ2hsaWdodHMgPSBkZWFkSGlnaGxpZ2h0cy5jb25jYXQoYW5jaG9yLmhpZ2hsaWdodHMpO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgYW5jaG9yLmhpZ2hsaWdodHM7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhbmNob3IucmFuZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGVzZSBjYW4gYmUgaWdub3JlZCwgc28gcHVzaCB0aGVtIGJhY2sgb250byB0aGUgbmV3IGxpc3QuXG4gICAgICAgICAgICAgICAgdGhpcy5hbmNob3JzLnB1c2goYW5jaG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSBhbGwgdGhlIGhpZ2hsaWdodHMgdGhhdCBoYXZlIG5vIGNvcnJlc3BvbmRpbmcgdGFyZ2V0IGFueW1vcmUuXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiByZW1vdmVIaWdobGlnaHRzKGRlYWRIaWdobGlnaHRzKSk7XG5cbiAgICAgICAgLy8gQWN0dWFsIHdvcmsgZ29pbmcgb25cbiAgICAgICAgLy8gQW5jaG9yIGFueSB0YXJnZXRzIG9mIHRoaXMgYW5ub3RhdGlvbiB0aGF0IGFyZSBub3QgYW5jaG9yZWQgYWxyZWFkeS5cbiAgICAgICAgZm9yIChsZXQgdGFyZ2V0IG9mIGFubm90YXRpb24udGFyZ2V0KSB7XG4gICAgICAgICAgICBpZiAoIWFuY2hvcmVkVGFyZ2V0cy5pbmNsdWRlcyh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgYW5jaG9yID0gbG9jYXRlKHRhcmdldCkudGhlbihoaWdobGlnaHQpO1xuICAgICAgICAgICAgICAgIGFuY2hvcnMucHVzaChhbmNob3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChhbmNob3JzKS50aGVuKG1hcmtPcnBoYW5zKS50aGVuKHN5bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgYW5jaG9ycyBhbmQgYXNzb2NpYXRlZCBoaWdobGlnaHRzIGZvciBhbiBhbm5vdGF0aW9uIGZyb20gdGhlIGRvY3VtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBbm5vdGF0aW9ufSBhbm5vdGF0aW9uXG4gICAgICovXG4gICAgZGV0YWNoKGFubm90YXRpb24pIHtcbiAgICAgICAgY29uc3QgYW5jaG9ycyA9IFtdO1xuICAgICAgICBsZXQgdW5oaWdobGlnaHQgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBhbmNob3Igb2YgdGhpcy5hbmNob3JzKSB7XG4gICAgICAgICAgICBpZiAoYW5jaG9yLmFubm90YXRpb24gPT09IGFubm90YXRpb24pIHtcbiAgICAgICAgICAgICAgICB1bmhpZ2hsaWdodC5wdXNoKC4uLihhbmNob3IuaGlnaGxpZ2h0cyB8fCBbXSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmNob3JzLnB1c2goYW5jaG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYW5jaG9ycyA9IGFuY2hvcnM7XG5cbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHJlbW92ZUhpZ2hsaWdodHModW5oaWdobGlnaHQpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib/annotation/anchoring.js\n");

/***/ }),

/***/ "./src/lib/annotation/annotation-toolbar-popover-positioner.js":
/*!*********************************************************************!*\
  !*** ./src/lib/annotation/annotation-toolbar-popover-positioner.js ***!
  \*********************************************************************/
/*! exports provided: AnnotationToolbarPopoverPositioner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AnnotationToolbarPopoverPositioner\", function() { return AnnotationToolbarPopoverPositioner; });\n/* harmony import */ var _config_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/constants */ \"./src/config/constants.js\");\n\n/**\n * @typedef Target\n * @prop {number} left - Offset from left edge of viewport.\n * @prop {number} top - Offset from top edge of viewport.\n * @prop {ArrowDirection} arrowDirection - Direction of the AnnotationToolbarPopover's arrow.\n */\n\n/**\n * Return the closest ancestor of `el` which has been positioned.\n *\n * If no ancestor has been positioned, returns the root element.\n *\n * @param {Element} el\n * @return {Element}\n */\n\nfunction nearestPositionedAncestor(el) {\n  let parentEl =\n  /** @type {Element} */\n  el.parentElement;\n\n  while (parentEl.parentElement) {\n    if (getComputedStyle(parentEl).position !== 'static') {\n      break;\n    }\n\n    parentEl = parentEl.parentElement;\n  }\n\n  return parentEl;\n}\n/**\n * Container for the 'AnnotationToolbarPopover' toolbar which provides controls for the user to\n * annotate and highlight the selected text.\n *\n * The toolbar implementation is split between this class, which is\n * the container for the toolbar that positions it on the page and isolates\n * it from the page's styles using shadow DOM, and the `AnnotationToolbarPopoverToolbar` Preact\n * component which actually renders the toolbar.\n */\n\n\nclass AnnotationToolbarPopoverPositioner {\n  /**\n   * Create the toolbar's container and hide it.\n   *\n   * The AnnotationToolbarPopover is initially hidden.\n   *\n   * @param {HTMLElement} container - The DOM element into which the AnnotationToolbarPopover will be created\n   * TODO\n   */\n  constructor(container, height, width, arrowHeight) {\n    this._container = container;\n    this._view =\n    /** @type {Window} */\n    container.ownerDocument.defaultView;\n    this._height = height;\n    this._width = width;\n    this._arrowHeight = arrowHeight;\n  }\n\n  calculatePositionProps(selectionRect, isRTLselection) {\n    const {\n      left,\n      top,\n      arrowDirection\n    } = this._calculateTarget(selectionRect, isRTLselection);\n\n    const zIndex = this._findZindex(left, top);\n\n    return { ...this._toCoordsRelativeToNPA(left, top),\n      arrowDirection,\n      zIndex\n    };\n  }\n  /**\n   *  Determine the best position for the AnnotationToolbarPopover and its pointer-arrow.\n   * - Position the pointer-arrow near the end of the selection (where the user's\n   *   cursor/input is most likely to be)\n   * - Position the AnnotationToolbarPopover to center horizontally on the pointer-arrow\n   * - Position the AnnotationToolbarPopover below the selection (arrow pointing up) for LTR selections\n   *   and above (arrow down) for RTL selections\n   *\n   * @param {DOMRect} selectionRect - The rect of text to target, in viewport\n   *        coordinates.\n   * @param {boolean} isRTLselection - True if the selection was made\n   *        rigth-to-left, such that the focus point is mosty likely at the\n   *        top-left edge of `targetRect`.\n   * @return {Target}\n   */\n\n\n  _calculateTarget(selectionRect, isRTLselection) {\n    // Set the initial arrow direction based on whether the selection was made\n    // forwards/upwards or downwards/backwards.\n\n    /** @type {ArrowDirection} */\n    let arrowDirection;\n\n    if (isRTLselection) {\n      arrowDirection = _config_constants__WEBPACK_IMPORTED_MODULE_0__[\"ArrowDirection\"].DOWN;\n    } else {\n      arrowDirection = _config_constants__WEBPACK_IMPORTED_MODULE_0__[\"ArrowDirection\"].UP;\n    }\n\n    let top;\n    let left; // Position the AnnotationToolbarPopover such that the arrow it is above or below the selection\n    // and close to the end.\n\n    const hMargin = Math.min(_config_constants__WEBPACK_IMPORTED_MODULE_0__[\"ARROW_H_MARGIN\"], selectionRect.width);\n\n    if (isRTLselection) {\n      left = selectionRect.left - this._width() / 2 + hMargin;\n    } else {\n      left = selectionRect.left + selectionRect.width - this._width() / 2 - hMargin;\n    } // Flip arrow direction if AnnotationToolbarPopover would appear above the top or below the\n    // bottom of the viewport.\n\n\n    if (selectionRect.top - this._height() < 0 && arrowDirection === _config_constants__WEBPACK_IMPORTED_MODULE_0__[\"ArrowDirection\"].DOWN) {\n      arrowDirection = _config_constants__WEBPACK_IMPORTED_MODULE_0__[\"ArrowDirection\"].UP;\n    } else if (selectionRect.top + this._height() > this._view.innerHeight) {\n      arrowDirection = _config_constants__WEBPACK_IMPORTED_MODULE_0__[\"ArrowDirection\"].DOWN;\n    }\n\n    if (arrowDirection === _config_constants__WEBPACK_IMPORTED_MODULE_0__[\"ArrowDirection\"].UP) {\n      top = selectionRect.top + selectionRect.height + this._arrowHeight();\n    } else {\n      top = selectionRect.top - this._height() - this._arrowHeight();\n    }\n\n    const {\n      left: constrainedLeft,\n      top: constrainedTop\n    } = this.constrainPositionToViewport(left, top);\n    return {\n      left: constrainedLeft,\n      top: constrainedTop,\n      arrowDirection\n    };\n  }\n\n  constrainPositionToViewport(left, top) {\n    left = Math.max(left, 0);\n    left = Math.min(left, this._view.innerWidth - this._width());\n    top = Math.max(top, 0);\n    top = Math.min(top, this._view.innerHeight - this._height());\n    return {\n      left,\n      top\n    };\n  }\n  /**\n   * Find a Z index value that will cause the AnnotationToolbarPopover to appear on top of any\n   * content in the document when the AnnotationToolbarPopover is shown at (left, top).\n   *\n   * @param {number} left - Horizontal offset from left edge of viewport.\n   * @param {number} top - Vertical offset from top edge of viewport.\n   * @return {number} - greatest zIndex (default value of 1)\n   */\n\n\n  _findZindex(left, top) {\n    if (document.elementsFromPoint === undefined) {\n      // In case of not being able to use `document.elementsFromPoint`,\n      // default to the large arbitrary number (2^15)\n      return 32768;\n    } // Find the Z index of all the elements in the screen for five positions\n    // around the AnnotationToolbarPopover (left-top, left-bottom, middle-center, right-top,\n    // right-bottom) and use the greatest.\n    // Unique elements so `getComputedStyle` is called the minimum amount of times.\n\n\n    const elements = new Set([...document.elementsFromPoint(left, top), ...document.elementsFromPoint(left, top + this._height()), ...document.elementsFromPoint(left + this._width() / 2, top + this._height() / 2), ...document.elementsFromPoint(left + this._width(), top), ...document.elementsFromPoint(left + this._width(), top + this._height())]);\n    const zIndexes = [...elements].map(element => +getComputedStyle(element).zIndex).filter(Number.isInteger); // Make sure the array contains at least one element,\n    // otherwise `Math.max(...[])` results in +Infinity\n\n    zIndexes.push(0);\n    return Math.max(...zIndexes) + 1;\n  }\n  /**\n   * Translate the (left, top) viewport coordinates into positions relative to\n   * the AnnotationToolbarPopover's nearest positioned ancestor (NPA).\n   *\n   * Typically the AnnotationToolbarPopover is a child of the `<body>` and the NPA is the root\n   * `<html>` element. However page styling may make the `<body>` positioned.\n   * See https://github.com/hypothesis/client/issues/487.\n   *\n   * @param {number} left - Horizontal offset from left edge of viewport.\n   * @param {number} top - Vertical offset from top edge of viewport.\n   */\n\n\n  _toCoordsRelativeToNPA(left, top) {\n    const positionedAncestor = nearestPositionedAncestor(this._container);\n    const parentRect = positionedAncestor.getBoundingClientRect();\n    return {\n      left: left - parentRect.left,\n      top: top - parentRect.top\n    };\n  }\n\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/annotation/annotation-toolbar-popover-positioner.js\n");

/***/ }),

/***/ "./src/lib/annotation/highlighting.js":
/*!********************************************!*\
  !*** ./src/lib/annotation/highlighting.js ***!
  \********************************************/
/*! exports provided: highlightRange, removeAllHighlights, removeHighlights, setHighlightsFocused, setHighlightsVisible, getHighlightsContainingNode, getBoundingClientRect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"highlightRange\", function() { return highlightRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeAllHighlights\", function() { return removeAllHighlights; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeHighlights\", function() { return removeHighlights; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setHighlightsFocused\", function() { return setHighlightsFocused; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setHighlightsVisible\", function() { return setHighlightsVisible; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getHighlightsContainingNode\", function() { return getHighlightsContainingNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getBoundingClientRect\", function() { return getBoundingClientRect; });\n/* harmony import */ var _config_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/constants */ \"./src/config/constants.js\");\n/*\n  TODO: Use our css class, tag, _annotation (data) for annotation\n    - Remove dependencies on hypothesis styles or include them in project\n */\n\n/**\n * Based on Hypothesis client's modules (see https://github.com/hypothesis/client):\n *   - src/annotator/highlighter.js\n */\n\n/**\n * Subset of the `NormalizedRange` class defined in `range.js` that this\n * module currently uses.\n *\n * @typedef NormalizedRange\n * @prop {() => Node[]} textNodes\n */\n\n/**\n * Wraps the DOM Nodes within the provided range with a highlight\n * element of the specified class and returns the highlight Elements.\n *\n * @param {NormalizedRange} normedRange - Range to be highlighted.\n * @param {string} cssClass - A CSS class to use for the highlight\n * @return {HighlightElement[]} - Elements wrapping text in `normedRange` to add a highlight effect\n */\n\nfunction highlightRange(normedRange, cssClass) {\n  const white = /^\\s*$/; // Find text nodes within the range to highlight.\n\n  const textNodes = normedRange.textNodes(); // Group text nodes into spans of adjacent nodes. If a group of text nodes are\n  // adjacent, we only need to create one highlight element for the group.\n\n  let textNodeSpans = [];\n  let prevNode = null;\n  let currentSpan = null;\n  textNodes.forEach(node => {\n    if (prevNode && prevNode.nextSibling === node) {\n      currentSpan.push(node);\n    } else {\n      currentSpan = [node];\n      textNodeSpans.push(currentSpan);\n    }\n\n    prevNode = node;\n  }); // Filter out text node spans that consist only of white space. This avoids\n  // inserting highlight elements in places that can only contain a restricted\n  // subset of nodes such as table rows and lists.\n\n  textNodeSpans = textNodeSpans.filter(span => // Check for at least one text node with non-space content.\n  span.some(node => !white.test(node.nodeValue))); // Wrap each text node span with a `<{{ Config.HL_TAG_NAME }}>` element.\n\n  const highlights = [];\n  textNodeSpans.forEach(nodes => {\n    // A custom element name is used here rather than `<span>` to reduce the\n    // likelihood of highlights being hidden by page styling.\n\n    /** @type {HighlightElement} */\n    const highlightEl = document.createElement(_config_constants__WEBPACK_IMPORTED_MODULE_0__[\"HighlightingConfig\"].HL_TAG_NAME);\n    highlightEl.className = [_config_constants__WEBPACK_IMPORTED_MODULE_0__[\"HighlightingConfig\"].HL_CLASS_NAME, cssClass].join(' ');\n    nodes[0].parentNode.replaceChild(highlightEl, nodes[0]);\n    nodes.forEach(node => highlightEl.appendChild(node));\n    highlights.push(highlightEl);\n  });\n  return highlights;\n}\n/**\n * Replace a child `node` with `replacements`.\n *\n * nb. This is like `ChildNode.replaceWith` but it works in older browsers.\n *\n * @param {ChildNode} node\n * @param {Node[]} replacements\n */\n\nfunction replaceWith(node, replacements) {\n  const parent =\n  /** @type {Node} */\n  node.parentNode;\n  replacements.forEach(r => parent.insertBefore(r, node));\n  node.remove();\n}\n/**\n * Remove all highlights under a given root element.\n *\n * @param {HTMLElement} root\n */\n\n\nfunction removeAllHighlights(root) {\n  const highlights = Array.from(root.querySelectorAll(_config_constants__WEBPACK_IMPORTED_MODULE_0__[\"HighlightingConfig\"].HL_TAG_NAME));\n  removeHighlights(\n  /** @type {HighlightElement[]} */\n  highlights);\n}\n/**\n * Remove highlights from a range previously highlighted with `highlightRange`.\n *\n * @param {HighlightElement[]} highlights - The highlight elements returned by `highlightRange`\n */\n\nfunction removeHighlights(highlights) {\n  for (let h of highlights) {\n    if (h.parentNode) {\n      const children = Array.from(h.childNodes);\n      replaceWith(h, children);\n    }\n\n    if (h.svgHighlight) {\n      h.svgHighlight.remove();\n    }\n  }\n}\n/**\n * Set whether the given highlight elements should appear \"focused\".\n *\n * A highlight can be displayed in a different (\"focused\") style to indicate\n * that it is current in some other context - for example the user has selected\n * the corresponding annotation in the sidebar.\n *\n * @param {HighlightElement[]} highlights\n * @param {boolean} focused\n */\n\nfunction setHighlightsFocused(highlights, focused) {\n  highlights.forEach(h => h.classList.toggle(_config_constants__WEBPACK_IMPORTED_MODULE_0__[\"HighlightingConfig\"].HL_FOCUSED_CLASS_NAME, focused));\n}\n/**\n * Set whether highlights under the given root element should be visible.\n *\n * @param {HTMLElement} root\n * @param {boolean} visible\n */\n\nfunction setHighlightsVisible(root, visible) {\n  const showHighlightsClass = _config_constants__WEBPACK_IMPORTED_MODULE_0__[\"HighlightingConfig\"].SHOW_HLS_CLASS_NAME;\n  root.classList.toggle(showHighlightsClass, visible);\n}\n/**\n * Get the highlight elements that contain the given node.\n *\n * @param {Node} node\n * @return {HighlightElement[]}\n */\n\nfunction getHighlightsContainingNode(node) {\n  let el = node.nodeType === Node.ELEMENT_NODE ?\n  /** @type {Element} */\n  node : node.parentElement;\n  const highlights = [];\n\n  while (el) {\n    if (el.classList.contains(_config_constants__WEBPACK_IMPORTED_MODULE_0__[\"HighlightingConfig\"].HL_TAG_NAME)) {\n      highlights.push(\n      /** @type {HighlightElement} */\n      el);\n    }\n\n    el = el.parentElement;\n  }\n\n  return highlights;\n}\n/**\n * Subset of `DOMRect` interface.\n *\n * @typedef Rect\n * @prop {number} top\n * @prop {number} left\n * @prop {number} bottom\n * @prop {number} right\n */\n\n/**\n * Get the bounding client rectangle of a collection in viewport coordinates.\n * Unfortunately, Chrome has issues ([1]) with Range.getBoundingClient rect or we\n * could just use that.\n *\n * [1] https://bugs.chromium.org/p/chromium/issues/detail?id=324437\n *\n * @param {HTMLElement[]} collection\n * @return {Rect}\n */\n\nfunction getBoundingClientRect(collection) {\n  // Reduce the client rectangles of the highlights to a bounding box\n  const rects = collection.map(n =>\n  /** @type {Rect} */\n  n.getBoundingClientRect());\n  return rects.reduce((acc, r) => ({\n    top: Math.min(acc.top, r.top),\n    left: Math.min(acc.left, r.left),\n    bottom: Math.max(acc.bottom, r.bottom),\n    right: Math.max(acc.right, r.right)\n  }));\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/annotation/highlighting.js\n");

/***/ }),

/***/ "./src/lib/annotation/hypothesis/anchoring/html.js":
/*!*********************************************************!*\
  !*** ./src/lib/annotation/hypothesis/anchoring/html.js ***!
  \*********************************************************/
/*! exports provided: anchor, describe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"anchor\", function() { return anchor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"describe\", function() { return describe; });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"./src/lib/annotation/hypothesis/anchoring/types.js\");\n\n/**\n * @typedef {import(\"./types\").AnyRangeType} AnyRangeType\n * @typedef {import('../../types/api').Selector} Selector\n */\n\n/**\n * @param {RangeAnchor|TextPositionAnchor|TextQuoteAnchor} anchor\n * @param {Object} [options]\n *  @param {number} [options.hint]\n */\n\nasync function querySelector(anchor, options = {}) {\n  return anchor.toRange(options);\n}\n/**\n * Anchor a set of selectors.\n *\n * This function converts a set of selectors into a document range.\n * It encapsulates the core anchoring algorithm, using the selectors alone or\n * in combination to establish the best anchor within the document.\n *\n * @param {Node} root - The root element of the anchoring context.\n * @param {Selector[]} selectors - The selectors to try.\n * @param {Object} [options]\n *   @param {number} [options.hint]\n */\n\n\nfunction anchor(root, selectors, options = {}) {\n  let position = null;\n  let quote = null;\n  let range = null; // Collect all the selectors\n\n  for (let selector of selectors) {\n    switch (selector.type) {\n      case 'TextPositionSelector':\n        position = selector;\n        options.hint = position.start; // TextQuoteAnchor hint\n\n        break;\n\n      case 'TextQuoteSelector':\n        quote = selector;\n        break;\n\n      case 'RangeSelector':\n        range = selector;\n        break;\n    }\n  }\n  /**\n   * Assert the quote matches the stored quote, if applicable\n   * @param {Range} range\n   */\n\n\n  const maybeAssertQuote = range => {\n    if (quote && quote.exact && range.toString() !== quote.exact) {\n      throw new Error('quote mismatch');\n    } else {\n      return range;\n    }\n  }; // From a default of failure, we build up catch clauses to try selectors in\n  // order, from simple to complex.\n\n  /** @type {Promise<Range>} */\n\n\n  let promise = Promise.reject('unable to anchor');\n\n  if (range) {\n    promise = promise.catch(() => {\n      let anchor = _types__WEBPACK_IMPORTED_MODULE_0__[\"RangeAnchor\"].fromSelector(root, range);\n      return querySelector(anchor, options).then(maybeAssertQuote);\n    });\n  }\n\n  if (position) {\n    promise = promise.catch(() => {\n      let anchor = _types__WEBPACK_IMPORTED_MODULE_0__[\"TextPositionAnchor\"].fromSelector(root, position);\n      return querySelector(anchor, options).then(maybeAssertQuote);\n    });\n  }\n\n  if (quote) {\n    promise = promise.catch(() => {\n      let anchor = _types__WEBPACK_IMPORTED_MODULE_0__[\"TextQuoteAnchor\"].fromSelector(root, quote);\n      return querySelector(anchor, options);\n    });\n  }\n\n  return promise;\n}\n/**\n * @param {Node} root\n * @param {Range} range\n */\n\nfunction describe(root, range) {\n  const types = [_types__WEBPACK_IMPORTED_MODULE_0__[\"RangeAnchor\"], _types__WEBPACK_IMPORTED_MODULE_0__[\"TextPositionAnchor\"], _types__WEBPACK_IMPORTED_MODULE_0__[\"TextQuoteAnchor\"]];\n  const result = [];\n\n  for (let type of types) {\n    try {\n      const anchor = type.fromRange(root, range);\n      result.push(anchor.toSelector());\n    } catch (error) {\n      continue;\n    }\n  }\n\n  return result;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2Fubm90YXRpb24vaHlwb3RoZXNpcy9hbmNob3JpbmcvaHRtbC5qcz9iZGZiIl0sIm5hbWVzIjpbInF1ZXJ5U2VsZWN0b3IiLCJhbmNob3IiLCJvcHRpb25zIiwidG9SYW5nZSIsInJvb3QiLCJzZWxlY3RvcnMiLCJwb3NpdGlvbiIsInF1b3RlIiwicmFuZ2UiLCJzZWxlY3RvciIsInR5cGUiLCJoaW50Iiwic3RhcnQiLCJtYXliZUFzc2VydFF1b3RlIiwiZXhhY3QiLCJ0b1N0cmluZyIsIkVycm9yIiwicHJvbWlzZSIsIlByb21pc2UiLCJyZWplY3QiLCJjYXRjaCIsIlJhbmdlQW5jaG9yIiwiZnJvbVNlbGVjdG9yIiwidGhlbiIsIlRleHRQb3NpdGlvbkFuY2hvciIsIlRleHRRdW90ZUFuY2hvciIsImRlc2NyaWJlIiwidHlwZXMiLCJyZXN1bHQiLCJmcm9tUmFuZ2UiLCJwdXNoIiwidG9TZWxlY3RvciIsImVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxlQUFlQSxhQUFmLENBQTZCQyxNQUE3QixFQUFxQ0MsT0FBTyxHQUFHLEVBQS9DLEVBQW1EO0FBQ2pELFNBQU9ELE1BQU0sQ0FBQ0UsT0FBUCxDQUFlRCxPQUFmLENBQVA7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0QsTUFBVCxDQUFnQkcsSUFBaEIsRUFBc0JDLFNBQXRCLEVBQWlDSCxPQUFPLEdBQUcsRUFBM0MsRUFBK0M7QUFDcEQsTUFBSUksUUFBUSxHQUFHLElBQWY7QUFDQSxNQUFJQyxLQUFLLEdBQUcsSUFBWjtBQUNBLE1BQUlDLEtBQUssR0FBRyxJQUFaLENBSG9ELENBS3BEOztBQUNBLE9BQUssSUFBSUMsUUFBVCxJQUFxQkosU0FBckIsRUFBZ0M7QUFDOUIsWUFBUUksUUFBUSxDQUFDQyxJQUFqQjtBQUNFLFdBQUssc0JBQUw7QUFDRUosZ0JBQVEsR0FBR0csUUFBWDtBQUNBUCxlQUFPLENBQUNTLElBQVIsR0FBZUwsUUFBUSxDQUFDTSxLQUF4QixDQUZGLENBRWlDOztBQUMvQjs7QUFDRixXQUFLLG1CQUFMO0FBQ0VMLGFBQUssR0FBR0UsUUFBUjtBQUNBOztBQUNGLFdBQUssZUFBTDtBQUNFRCxhQUFLLEdBQUdDLFFBQVI7QUFDQTtBQVZKO0FBWUQ7QUFFRDtBQUNGO0FBQ0E7QUFDQTs7O0FBQ0UsUUFBTUksZ0JBQWdCLEdBQUdMLEtBQUssSUFBSTtBQUNoQyxRQUFJRCxLQUFLLElBQUlBLEtBQUssQ0FBQ08sS0FBZixJQUF3Qk4sS0FBSyxDQUFDTyxRQUFOLE9BQXFCUixLQUFLLENBQUNPLEtBQXZELEVBQThEO0FBQzVELFlBQU0sSUFBSUUsS0FBSixDQUFVLGdCQUFWLENBQU47QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPUixLQUFQO0FBQ0Q7QUFDRixHQU5ELENBekJvRCxDQWlDcEQ7QUFDQTs7QUFDQTs7O0FBQ0EsTUFBSVMsT0FBTyxHQUFHQyxPQUFPLENBQUNDLE1BQVIsQ0FBZSxrQkFBZixDQUFkOztBQUVBLE1BQUlYLEtBQUosRUFBVztBQUNUUyxXQUFPLEdBQUdBLE9BQU8sQ0FBQ0csS0FBUixDQUFjLE1BQU07QUFDNUIsVUFBSW5CLE1BQU0sR0FBR29CLGtEQUFXLENBQUNDLFlBQVosQ0FBeUJsQixJQUF6QixFQUErQkksS0FBL0IsQ0FBYjtBQUNBLGFBQU9SLGFBQWEsQ0FBQ0MsTUFBRCxFQUFTQyxPQUFULENBQWIsQ0FBK0JxQixJQUEvQixDQUFvQ1YsZ0JBQXBDLENBQVA7QUFDRCxLQUhTLENBQVY7QUFJRDs7QUFFRCxNQUFJUCxRQUFKLEVBQWM7QUFDWlcsV0FBTyxHQUFHQSxPQUFPLENBQUNHLEtBQVIsQ0FBYyxNQUFNO0FBQzVCLFVBQUluQixNQUFNLEdBQUd1Qix5REFBa0IsQ0FBQ0YsWUFBbkIsQ0FBZ0NsQixJQUFoQyxFQUFzQ0UsUUFBdEMsQ0FBYjtBQUNBLGFBQU9OLGFBQWEsQ0FBQ0MsTUFBRCxFQUFTQyxPQUFULENBQWIsQ0FBK0JxQixJQUEvQixDQUFvQ1YsZ0JBQXBDLENBQVA7QUFDRCxLQUhTLENBQVY7QUFJRDs7QUFFRCxNQUFJTixLQUFKLEVBQVc7QUFDVFUsV0FBTyxHQUFHQSxPQUFPLENBQUNHLEtBQVIsQ0FBYyxNQUFNO0FBQzVCLFVBQUluQixNQUFNLEdBQUd3QixzREFBZSxDQUFDSCxZQUFoQixDQUE2QmxCLElBQTdCLEVBQW1DRyxLQUFuQyxDQUFiO0FBQ0EsYUFBT1AsYUFBYSxDQUFDQyxNQUFELEVBQVNDLE9BQVQsQ0FBcEI7QUFDRCxLQUhTLENBQVY7QUFJRDs7QUFFRCxTQUFPZSxPQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxTQUFTUyxRQUFULENBQWtCdEIsSUFBbEIsRUFBd0JJLEtBQXhCLEVBQStCO0FBQ3BDLFFBQU1tQixLQUFLLEdBQUcsQ0FBQ04sa0RBQUQsRUFBY0cseURBQWQsRUFBa0NDLHNEQUFsQyxDQUFkO0FBQ0EsUUFBTUcsTUFBTSxHQUFHLEVBQWY7O0FBQ0EsT0FBSyxJQUFJbEIsSUFBVCxJQUFpQmlCLEtBQWpCLEVBQXdCO0FBQ3RCLFFBQUk7QUFDRixZQUFNMUIsTUFBTSxHQUFHUyxJQUFJLENBQUNtQixTQUFMLENBQWV6QixJQUFmLEVBQXFCSSxLQUFyQixDQUFmO0FBQ0FvQixZQUFNLENBQUNFLElBQVAsQ0FBWTdCLE1BQU0sQ0FBQzhCLFVBQVAsRUFBWjtBQUNELEtBSEQsQ0FHRSxPQUFPQyxLQUFQLEVBQWM7QUFDZDtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT0osTUFBUDtBQUNEIiwiZmlsZSI6Ii4vc3JjL2xpYi9hbm5vdGF0aW9uL2h5cG90aGVzaXMvYW5jaG9yaW5nL2h0bWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYW5nZUFuY2hvciwgVGV4dFBvc2l0aW9uQW5jaG9yLCBUZXh0UXVvdGVBbmNob3IgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi90eXBlc1wiKS5BbnlSYW5nZVR5cGV9IEFueVJhbmdlVHlwZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdHlwZXMvYXBpJykuU2VsZWN0b3J9IFNlbGVjdG9yXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge1JhbmdlQW5jaG9yfFRleHRQb3NpdGlvbkFuY2hvcnxUZXh0UXVvdGVBbmNob3J9IGFuY2hvclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5oaW50XVxuICovXG5hc3luYyBmdW5jdGlvbiBxdWVyeVNlbGVjdG9yKGFuY2hvciwgb3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBhbmNob3IudG9SYW5nZShvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBBbmNob3IgYSBzZXQgb2Ygc2VsZWN0b3JzLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gY29udmVydHMgYSBzZXQgb2Ygc2VsZWN0b3JzIGludG8gYSBkb2N1bWVudCByYW5nZS5cbiAqIEl0IGVuY2Fwc3VsYXRlcyB0aGUgY29yZSBhbmNob3JpbmcgYWxnb3JpdGhtLCB1c2luZyB0aGUgc2VsZWN0b3JzIGFsb25lIG9yXG4gKiBpbiBjb21iaW5hdGlvbiB0byBlc3RhYmxpc2ggdGhlIGJlc3QgYW5jaG9yIHdpdGhpbiB0aGUgZG9jdW1lbnQuXG4gKlxuICogQHBhcmFtIHtOb2RlfSByb290IC0gVGhlIHJvb3QgZWxlbWVudCBvZiB0aGUgYW5jaG9yaW5nIGNvbnRleHQuXG4gKiBAcGFyYW0ge1NlbGVjdG9yW119IHNlbGVjdG9ycyAtIFRoZSBzZWxlY3RvcnMgdG8gdHJ5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogICBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuaGludF1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFuY2hvcihyb290LCBzZWxlY3RvcnMsIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgcG9zaXRpb24gPSBudWxsO1xuICBsZXQgcXVvdGUgPSBudWxsO1xuICBsZXQgcmFuZ2UgPSBudWxsO1xuXG4gIC8vIENvbGxlY3QgYWxsIHRoZSBzZWxlY3RvcnNcbiAgZm9yIChsZXQgc2VsZWN0b3Igb2Ygc2VsZWN0b3JzKSB7XG4gICAgc3dpdGNoIChzZWxlY3Rvci50eXBlKSB7XG4gICAgICBjYXNlICdUZXh0UG9zaXRpb25TZWxlY3Rvcic6XG4gICAgICAgIHBvc2l0aW9uID0gc2VsZWN0b3I7XG4gICAgICAgIG9wdGlvbnMuaGludCA9IHBvc2l0aW9uLnN0YXJ0OyAvLyBUZXh0UXVvdGVBbmNob3IgaGludFxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1RleHRRdW90ZVNlbGVjdG9yJzpcbiAgICAgICAgcXVvdGUgPSBzZWxlY3RvcjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdSYW5nZVNlbGVjdG9yJzpcbiAgICAgICAgcmFuZ2UgPSBzZWxlY3RvcjtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFzc2VydCB0aGUgcXVvdGUgbWF0Y2hlcyB0aGUgc3RvcmVkIHF1b3RlLCBpZiBhcHBsaWNhYmxlXG4gICAqIEBwYXJhbSB7UmFuZ2V9IHJhbmdlXG4gICAqL1xuICBjb25zdCBtYXliZUFzc2VydFF1b3RlID0gcmFuZ2UgPT4ge1xuICAgIGlmIChxdW90ZSAmJiBxdW90ZS5leGFjdCAmJiByYW5nZS50b1N0cmluZygpICE9PSBxdW90ZS5leGFjdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdxdW90ZSBtaXNtYXRjaCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuICB9O1xuXG4gIC8vIEZyb20gYSBkZWZhdWx0IG9mIGZhaWx1cmUsIHdlIGJ1aWxkIHVwIGNhdGNoIGNsYXVzZXMgdG8gdHJ5IHNlbGVjdG9ycyBpblxuICAvLyBvcmRlciwgZnJvbSBzaW1wbGUgdG8gY29tcGxleC5cbiAgLyoqIEB0eXBlIHtQcm9taXNlPFJhbmdlPn0gKi9cbiAgbGV0IHByb21pc2UgPSBQcm9taXNlLnJlamVjdCgndW5hYmxlIHRvIGFuY2hvcicpO1xuXG4gIGlmIChyYW5nZSkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLmNhdGNoKCgpID0+IHtcbiAgICAgIGxldCBhbmNob3IgPSBSYW5nZUFuY2hvci5mcm9tU2VsZWN0b3Iocm9vdCwgcmFuZ2UpO1xuICAgICAgcmV0dXJuIHF1ZXJ5U2VsZWN0b3IoYW5jaG9yLCBvcHRpb25zKS50aGVuKG1heWJlQXNzZXJ0UXVvdGUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHBvc2l0aW9uKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UuY2F0Y2goKCkgPT4ge1xuICAgICAgbGV0IGFuY2hvciA9IFRleHRQb3NpdGlvbkFuY2hvci5mcm9tU2VsZWN0b3Iocm9vdCwgcG9zaXRpb24pO1xuICAgICAgcmV0dXJuIHF1ZXJ5U2VsZWN0b3IoYW5jaG9yLCBvcHRpb25zKS50aGVuKG1heWJlQXNzZXJ0UXVvdGUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHF1b3RlKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UuY2F0Y2goKCkgPT4ge1xuICAgICAgbGV0IGFuY2hvciA9IFRleHRRdW90ZUFuY2hvci5mcm9tU2VsZWN0b3Iocm9vdCwgcXVvdGUpO1xuICAgICAgcmV0dXJuIHF1ZXJ5U2VsZWN0b3IoYW5jaG9yLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZX0gcm9vdFxuICogQHBhcmFtIHtSYW5nZX0gcmFuZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlc2NyaWJlKHJvb3QsIHJhbmdlKSB7XG4gIGNvbnN0IHR5cGVzID0gW1JhbmdlQW5jaG9yLCBUZXh0UG9zaXRpb25BbmNob3IsIFRleHRRdW90ZUFuY2hvcl07XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGxldCB0eXBlIG9mIHR5cGVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFuY2hvciA9IHR5cGUuZnJvbVJhbmdlKHJvb3QsIHJhbmdlKTtcbiAgICAgIHJlc3VsdC5wdXNoKGFuY2hvci50b1NlbGVjdG9yKCkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/lib/annotation/hypothesis/anchoring/html.js\n");

/***/ }),

/***/ "./src/lib/annotation/hypothesis/anchoring/range.js":
/*!**********************************************************!*\
  !*** ./src/lib/annotation/hypothesis/anchoring/range.js ***!
  \**********************************************************/
/*! exports provided: BrowserRange, NormalizedRange, SerializedRange, sniff */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BrowserRange\", function() { return BrowserRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NormalizedRange\", function() { return NormalizedRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SerializedRange\", function() { return SerializedRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sniff\", function() { return sniff; });\n/* harmony import */ var _xpath__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xpath */ \"./src/lib/annotation/hypothesis/anchoring/xpath.js\");\n/* harmony import */ var _xpath_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xpath-util */ \"./src/lib/annotation/hypothesis/anchoring/xpath-util.js\");\n\n\n/**\n * Return ancestors of `node`.\n *\n * @param {Node} node\n */\n\nfunction parents(node) {\n  const parents = [];\n\n  while (node.parentElement) {\n    parents.push(node.parentElement);\n    node = node.parentElement;\n  }\n\n  return parents;\n}\n/**\n * Creates a wrapper around a range object obtained from a DOMSelection.\n */\n\n\nclass BrowserRange {\n  /**\n   * Creates an instance of BrowserRange.\n   *\n   * object - A range object obtained via DOMSelection#getRangeAt().\n   *\n   * Examples\n   *\n   *   selection = window.getSelection()\n   *   range = new Range.BrowserRange(selection.getRangeAt(0))\n   *\n   * Returns an instance of BrowserRange.\n   */\n  constructor(obj) {\n    this.commonAncestorContainer = obj.commonAncestorContainer;\n    this.startContainer = obj.startContainer;\n    this.startOffset = obj.startOffset;\n    this.endContainer = obj.endContainer;\n    this.endOffset = obj.endOffset;\n    this.tainted = false;\n  }\n  /**\n   * normalize works around the fact that browsers don't generate\n   * ranges/selections in a consistent manner. Some (Safari) will create\n   * ranges that have (say) a textNode startContainer and elementNode\n   * endContainer. Others (Firefox) seem to only ever generate\n   * textNode/textNode or elementNode/elementNode pairs.\n   *\n   * Returns an instance of NormalizedRange\n   */\n\n\n  normalize() {\n    if (this.tainted) {\n      throw new Error('You may only call normalize() once on a BrowserRange!');\n    } else {\n      this.tainted = true;\n    }\n\n    const range = {}; // Look at the start\n\n    if (this.startContainer.nodeType === Node.ELEMENT_NODE) {\n      // We are dealing with element nodes\n      if (this.startOffset < this.startContainer.childNodes.length) {\n        range.start = Object(_xpath_util__WEBPACK_IMPORTED_MODULE_1__[\"getFirstTextNodeNotBefore\"])(this.startContainer.childNodes[this.startOffset]);\n      } else {\n        range.start = Object(_xpath_util__WEBPACK_IMPORTED_MODULE_1__[\"getFirstTextNodeNotBefore\"])(this.startContainer);\n      }\n\n      range.startOffset = 0;\n    } else {\n      // We are dealing with simple text nodes\n      range.start = this.startContainer;\n      range.startOffset = this.startOffset;\n    } // Look at the end\n\n\n    if (this.endContainer.nodeType === Node.ELEMENT_NODE) {\n      // Get specified node.\n      let node = this.endContainer.childNodes[this.endOffset]; // Does that node exist?\n\n      if (node) {\n        // Look for a text node either at the immediate beginning of node\n        let n = node;\n\n        while (n && n.nodeType !== Node.TEXT_NODE) {\n          n = n.firstChild;\n        } // Did we find a text node at the start of this element?\n\n\n        if (n) {\n          range.end = n;\n          range.endOffset = 0;\n        }\n      }\n\n      if (!range.end) {\n        // We need to find a text node in the previous sibling of the node at the\n        // given offset, if one exists, or in the previous sibling of its container.\n        if (this.endOffset) {\n          node = this.endContainer.childNodes[this.endOffset - 1];\n        } else {\n          node = this.endContainer.previousSibling;\n        }\n\n        range.end = Object(_xpath_util__WEBPACK_IMPORTED_MODULE_1__[\"getLastTextNodeUpTo\"])(node);\n        range.endOffset = range.end.nodeValue.length;\n      }\n    } else {\n      // We are dealing with simple text nodes\n      range.end = this.endContainer;\n      range.endOffset = this.endOffset;\n    } // We have collected the initial data.\n    // Now let's start to slice & dice the text elements!\n\n\n    const normalRange = {};\n\n    if (range.startOffset > 0) {\n      // Do we really have to cut?\n      if (!range.start.nextSibling || range.start.nodeValue.length > range.startOffset) {\n        // Yes. Cut.\n        normalRange.start = range.start.splitText(range.startOffset);\n      } else {\n        // Avoid splitting off zero-length pieces.\n        normalRange.start = Object(_xpath_util__WEBPACK_IMPORTED_MODULE_1__[\"getFirstTextNodeNotBefore\"])(range.start.nextSibling);\n      }\n    } else {\n      normalRange.start = range.start;\n    } // Is the whole selection inside one text element?\n\n\n    if (range.start === range.end) {\n      if (normalRange.start.nodeValue.length > range.endOffset - range.startOffset) {\n        normalRange.start.splitText(range.endOffset - range.startOffset);\n      }\n\n      normalRange.end = normalRange.start;\n    } else {\n      // No, the end of the selection is in a separate text element\n      // does the end need to be cut?\n      if (range.end.nodeValue.length > range.endOffset) {\n        range.end.splitText(range.endOffset);\n      }\n\n      normalRange.end = range.end;\n    } // Make sure the common ancestor is an element node.\n\n\n    normalRange.commonAncestor = this.commonAncestorContainer;\n\n    while (normalRange.commonAncestor.nodeType !== Node.ELEMENT_NODE) {\n      normalRange.commonAncestor = normalRange.commonAncestor.parentNode;\n    } // Circular dependency. Remove this once *Range classes are refactored\n    // eslint-disable-next-line no-use-before-define\n\n\n    return new NormalizedRange(normalRange);\n  }\n  /**\n   * Creates a range suitable for storage.\n   *\n   * root           - A root Element from which to anchor the serialization.\n   *\n   * Returns an instance of SerializedRange.\n   */\n\n\n  serialize(root) {\n    return this.normalize().serialize(root);\n  }\n\n}\n/**\n * A normalized range is most commonly used throughout the annotator.\n * its the result of a deserialized SerializedRange or a BrowserRange without\n * browser inconsistencies.\n */\n\nclass NormalizedRange {\n  /**\n   * Creates an instance of a NormalizedRange.\n   *\n   * This is usually created by calling the .normalize() method on one of the\n   * other Range classes rather than manually.\n   *\n   * obj - An Object literal. Should have the following properties.\n   *       commonAncestor: A Element that encompasses both the start and end nodes\n   *       start:          The first TextNode in the range.\n   *       end             The last TextNode in the range.\n   *\n   * Returns an instance of NormalizedRange.\n   */\n  constructor(obj) {\n    this.commonAncestor = obj.commonAncestor;\n    this.start = obj.start;\n    this.end = obj.end;\n  }\n  /**\n   * For API consistency.\n   *\n   * Returns itself.\n   */\n\n\n  normalize() {\n    return this;\n  }\n  /**\n   * Limits the nodes within the NormalizedRange to those contained\n   * withing the bounds parameter. It returns an updated range with all\n   * properties updated. NOTE: Method returns null if all nodes fall outside\n   * of the bounds.\n   *\n   * bounds - An Element to limit the range to.\n   *\n   * Returns updated self or null.\n   */\n\n\n  limit(bounds) {\n    const nodes = this.textNodes().filter(node => bounds.contains(node.parentNode));\n\n    if (!nodes.length) {\n      return null;\n    }\n\n    this.start = nodes[0];\n    this.end = nodes[nodes.length - 1];\n    const startParents = parents(this.start);\n\n    for (let parent of parents(this.end)) {\n      if (startParents.indexOf(parent) !== -1) {\n        this.commonAncestor = parent;\n        break;\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Convert this range into an object consisting of two pairs of (xpath,\n   * character offset), which can be easily stored in a database.\n   *\n   * root -           The root Element relative to which XPaths should be calculated\n   *\n   * Returns an instance of SerializedRange.\n   */\n\n\n  serialize(root) {\n    const serialization = (node, isEnd) => {\n      const origParent = node.parentElement;\n      const xpath = Object(_xpath__WEBPACK_IMPORTED_MODULE_0__[\"xpathFromNode\"])(origParent, root || document);\n      const textNodes = Object(_xpath_util__WEBPACK_IMPORTED_MODULE_1__[\"getTextNodes\"])(origParent); // Calculate real offset as the combined length of all the\n      // preceding textNode siblings. We include the length of the\n      // node if it's the end node.\n\n      const nodes = textNodes.slice(0, textNodes.indexOf(node));\n      let offset = 0;\n\n      for (let n of nodes) {\n        offset += n.data.length;\n      }\n\n      if (isEnd) {\n        return [xpath, offset + node.nodeValue.length];\n      } else {\n        return [xpath, offset];\n      }\n    };\n\n    const start = serialization(this.start);\n    const end = serialization(this.end, true); // Circular dependency. Remove this once *Range classes are refactored\n    // eslint-disable-next-line no-use-before-define\n\n    return new SerializedRange({\n      // XPath strings\n      start: start[0],\n      end: end[0],\n      // Character offsets (integer)\n      startOffset: start[1],\n      endOffset: end[1]\n    });\n  }\n  /**\n   * Creates a concatenated String of the contents of all the text nodes\n   * within the range.\n   *\n   * Returns a String.\n   */\n\n\n  text() {\n    return this.textNodes().map(node => node.nodeValue).join('');\n  }\n  /**\n   * Fetches only the text nodes within the range.\n   *\n   * Returns an Array of TextNode instances.\n   */\n\n\n  textNodes() {\n    const textNodes = Object(_xpath_util__WEBPACK_IMPORTED_MODULE_1__[\"getTextNodes\"])(this.commonAncestor);\n    const start = textNodes.indexOf(this.start);\n    const end = textNodes.indexOf(this.end); // Return the textNodes that fall between the start and end indexes.\n\n    return textNodes.slice(start, +end + 1 || undefined);\n  }\n  /**\n   * Converts the Normalized range to a native browser range.\n   *\n   * See: https://developer.mozilla.org/en/DOM/range\n   *\n   * Examples\n   *\n   *   selection = window.getSelection()\n   *   selection.removeAllRanges()\n   *   selection.addRange(normedRange.toRange())\n   *\n   * Returns a Range object.\n   */\n\n\n  toRange() {\n    const range = document.createRange();\n    range.setStartBefore(this.start);\n    range.setEndAfter(this.end);\n    return range;\n  }\n\n}\n/**\n * A range suitable for storing in local storage or serializing to JSON.\n */\n\nclass SerializedRange {\n  /**\n   * Creates a SerializedRange\n   *\n   * obj - The stored object. It should have the following properties.\n   *       start:       An xpath to the Element containing the first TextNode\n   *                    relative to the root Element.\n   *       startOffset: The offset to the start of the selection from obj.start.\n   *       end:         An xpath to the Element containing the last TextNode\n   *                    relative to the root Element.\n   *       startOffset: The offset to the end of the selection from obj.end.\n   *\n   * Returns an instance of SerializedRange\n   */\n  constructor(obj) {\n    this.start = obj.start;\n    this.startOffset = obj.startOffset;\n    this.end = obj.end;\n    this.endOffset = obj.endOffset;\n  }\n  /**\n   * Creates a NormalizedRange.\n   *\n   * root - The root Element from which the XPaths were generated.\n   *\n   * Returns a NormalizedRange instance.\n   */\n\n\n  normalize(root) {\n    const range = {};\n\n    for (let p of ['start', 'end']) {\n      let node;\n\n      try {\n        node = Object(_xpath__WEBPACK_IMPORTED_MODULE_0__[\"nodeFromXPath\"])(this[p], root);\n\n        if (!node) {\n          throw new Error('Node not found');\n        }\n      } catch (e) {\n        throw new RangeError(`Error while finding ${p} node: ${this[p]}: ` + e);\n      } // Unfortunately, we *can't* guarantee only one textNode per\n      // elementNode, so we have to walk along the element's textNodes until\n      // the combined length of the textNodes to that point exceeds or\n      // matches the value of the offset.\n\n\n      let length = 0;\n      let targetOffset = this[p + 'Offset']; // Range excludes its endpoint because it describes the boundary position.\n      // Target the string index of the last character inside the range.\n\n      if (p === 'end') {\n        targetOffset--;\n      }\n\n      for (let tn of Object(_xpath_util__WEBPACK_IMPORTED_MODULE_1__[\"getTextNodes\"])(node)) {\n        if (length + tn.data.length > targetOffset) {\n          range[p + 'Container'] = tn;\n          range[p + 'Offset'] = this[p + 'Offset'] - length;\n          break;\n        } else {\n          length += tn.data.length;\n        }\n      } // If we fall off the end of the for loop without having set\n      // 'startOffset'/'endOffset', the element has shorter content than when\n      // we annotated, so throw an error:\n\n\n      if (range[p + 'Offset'] === undefined) {\n        throw new RangeError(`Couldn't find offset ${this[p + 'Offset']} in element ${this[p]}`);\n      }\n    }\n\n    for (let parent of parents(range.startContainer)) {\n      if (parent.contains(range.endContainer)) {\n        range.commonAncestorContainer = parent;\n        break;\n      }\n    }\n\n    return new BrowserRange(range).normalize();\n  }\n  /**\n   * Creates a range suitable for storage.\n   *\n   * root           - A root Element from which to anchor the serialization.\n   *\n   * Returns an instance of SerializedRange.\n   */\n\n\n  serialize(root) {\n    return this.normalize(root).serialize(root);\n  } // Returns the range as an Object literal.\n\n\n  toObject() {\n    return {\n      start: this.start,\n      startOffset: this.startOffset,\n      end: this.end,\n      endOffset: this.endOffset\n    };\n  }\n\n}\n/**\n * Determines the type of Range of the provided object and returns\n * a suitable Range instance.\n *\n * r - A range Object.\n *\n * Examples\n *\n *   selection = window.getSelection()\n *   Range.sniff(selection.getRangeAt(0))\n *   # => Returns a BrowserRange instance.\n *\n * Returns a Range object or false.\n */\n\nfunction sniff(range) {\n  if (range.commonAncestorContainer !== undefined) {\n    return new BrowserRange(range);\n  } else if (typeof range.start === 'string') {\n    return new SerializedRange(range);\n  } else if (range.start && typeof range.start === 'object') {\n    return new NormalizedRange(range);\n  } else {\n    throw new Error('Could not sniff range type');\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/annotation/hypothesis/anchoring/range.js\n");

/***/ }),

/***/ "./src/lib/annotation/hypothesis/anchoring/types.js":
/*!**********************************************************!*\
  !*** ./src/lib/annotation/hypothesis/anchoring/types.js ***!
  \**********************************************************/
/*! exports provided: RangeAnchor, TextPositionAnchor, TextQuoteAnchor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RangeAnchor\", function() { return RangeAnchor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextPositionAnchor\", function() { return TextPositionAnchor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextQuoteAnchor\", function() { return TextQuoteAnchor; });\n/* harmony import */ var dom_anchor_text_position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dom-anchor-text-position */ \"./node_modules/dom-anchor-text-position/index.js\");\n/* harmony import */ var dom_anchor_text_position__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dom_anchor_text_position__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var dom_anchor_text_quote__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dom-anchor-text-quote */ \"./node_modules/dom-anchor-text-quote/index.js\");\n/* harmony import */ var dom_anchor_text_quote__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dom_anchor_text_quote__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _range__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./range */ \"./src/lib/annotation/hypothesis/anchoring/range.js\");\n/**\n * This module exports a set of classes for converting between DOM `Range`\n * objects and different types of selectors. It is mostly a thin wrapper around a\n * set of anchoring libraries. It serves two main purposes:\n *\n *  1. Providing a consistent interface across different types of anchors.\n *  2. Insulating the rest of the code from API changes in the underlying anchoring\n *     libraries.\n */\n\n\n\n/**\n * @typedef {import(\"./range\").BrowserRange} BrowserRange}\n * @typedef {import(\"./range\").NormalizedRange} NormalizedRange}\n * @typedef {Range|BrowserRange|NormalizedRange|SerializedRange} AnyRangeType\n *\n * @typedef {import('../../types/api').RangeSelector} RangeSelector\n * @typedef {import('../../types/api').TextPositionSelector} TextPositionSelector\n * @typedef {import('../../types/api').TextQuoteSelector} TextQuoteSelector\n *\n * @typedef TextContentNode\n * @prop {string} textContent\n */\n\n/**\n * Converts between `RangeSelector` selectors and `Range` objects.\n */\n\nclass RangeAnchor {\n  /**\n   * @param {Node} root - A root element from which to anchor.\n   * @param {AnyRangeType} range -  A range describing the anchor.\n   */\n  constructor(root, range) {\n    this.root = root;\n    this.range = Object(_range__WEBPACK_IMPORTED_MODULE_2__[\"sniff\"])(range).normalize(this.root);\n  }\n  /**\n   * @param {Node} root -  A root element from which to anchor.\n   * @param {AnyRangeType} range -  A range describing the anchor.\n   */\n\n\n  static fromRange(root, range) {\n    return new RangeAnchor(root, range);\n  }\n  /**\n   * Create an anchor from a serialized `RangeSelector` selector.\n   *\n   * @param {Node} root -  A root element from which to anchor.\n   * @param {RangeSelector} selector\n   */\n\n\n  static fromSelector(root, selector) {\n    const data = {\n      start: selector.startContainer,\n      startOffset: selector.startOffset,\n      end: selector.endContainer,\n      endOffset: selector.endOffset\n    };\n    const range = new _range__WEBPACK_IMPORTED_MODULE_2__[\"SerializedRange\"](data);\n    return new RangeAnchor(root, range);\n  }\n\n  toRange() {\n    return this.range.toRange();\n  }\n  /**\n   * @return {RangeSelector}\n   */\n\n\n  toSelector() {\n    const range = this.range.serialize(this.root);\n    return {\n      type: 'RangeSelector',\n      startContainer: range.start,\n      startOffset: range.startOffset,\n      endContainer: range.end,\n      endOffset: range.endOffset\n    };\n  }\n\n}\n/**\n * Converts between `TextPositionSelector` selectors and `Range` objects.\n */\n\nclass TextPositionAnchor {\n  /**\n   * @param {Node|TextContentNode} root\n   * @param {number} start\n   * @param {number} end\n   */\n  constructor(root, start, end) {\n    this.root = root;\n    this.start = start;\n    this.end = end;\n  }\n  /**\n   * @param {Node} root\n   * @param {Range} range\n   */\n\n\n  static fromRange(root, range) {\n    const selector = Object(dom_anchor_text_position__WEBPACK_IMPORTED_MODULE_0__[\"fromRange\"])(root, range);\n    return TextPositionAnchor.fromSelector(root, selector);\n  }\n  /**\n   * @param {Node} root\n   * @param {TextPositionSelector} selector\n   */\n\n\n  static fromSelector(root, selector) {\n    return new TextPositionAnchor(root, selector.start, selector.end);\n  }\n  /**\n   * @return {TextPositionSelector}\n   */\n\n\n  toSelector() {\n    return {\n      type: 'TextPositionSelector',\n      start: this.start,\n      end: this.end\n    };\n  }\n\n  toRange() {\n    return Object(dom_anchor_text_position__WEBPACK_IMPORTED_MODULE_0__[\"toRange\"])(this.root, {\n      start: this.start,\n      end: this.end\n    });\n  }\n\n}\n/**\n * Converts between `TextQuoteSelector` selectors and `Range` objects.\n */\n\nclass TextQuoteAnchor {\n  /**\n   * @param {Node|TextContentNode} root - A root element from which to anchor.\n   * @param {string} exact\n   * @param {Object} context\n   *   @param {string} [context.prefix]\n   *   @param {string} [context.suffix]\n   */\n  constructor(root, exact, context = {}) {\n    this.root = root;\n    this.exact = exact;\n    this.context = context;\n  }\n  /**\n   * @param {Node} root\n   * @param {Range} range\n   */\n\n\n  static fromRange(root, range) {\n    const selector = Object(dom_anchor_text_quote__WEBPACK_IMPORTED_MODULE_1__[\"fromRange\"])(root, range);\n    return TextQuoteAnchor.fromSelector(root, selector);\n  }\n  /**\n   * @param {Node|TextContentNode} root\n   * @param {TextQuoteSelector} selector\n   */\n\n\n  static fromSelector(root, selector) {\n    const {\n      prefix,\n      suffix\n    } = selector;\n    return new TextQuoteAnchor(root, selector.exact, {\n      prefix,\n      suffix\n    });\n  }\n  /**\n   * @return {TextQuoteSelector}\n   */\n\n\n  toSelector() {\n    return {\n      type: 'TextQuoteSelector',\n      exact: this.exact,\n      prefix: this.context.prefix,\n      suffix: this.context.suffix\n    };\n  }\n  /**\n   * @param {Object} [options]\n   *   @param {number} [options.hint] -\n   *     Offset hint to disambiguate matches\n   *     https://github.com/tilgovi/dom-anchor-text-quote#totextpositionroot-selector-options\n   */\n\n\n  toRange(options = {}) {\n    const range = Object(dom_anchor_text_quote__WEBPACK_IMPORTED_MODULE_1__[\"toRange\"])(this.root, this.toSelector(), options);\n\n    if (range === null) {\n      throw new Error('Quote not found');\n    }\n\n    return range;\n  }\n  /**\n   * @param {Object} [options]\n   *   @param {number} [options.hint] -\n   *     Offset hint to disambiguate matches\n   *     https://github.com/tilgovi/dom-anchor-text-quote#totextpositionroot-selector-options\n   */\n\n\n  toPositionAnchor(options = {}) {\n    const anchor = Object(dom_anchor_text_quote__WEBPACK_IMPORTED_MODULE_1__[\"toTextPosition\"])(this.root, this.toSelector(), options);\n\n    if (anchor === null) {\n      throw new Error('Quote not found');\n    }\n\n    return new TextPositionAnchor(this.root, anchor.start, anchor.end);\n  }\n\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/annotation/hypothesis/anchoring/types.js\n");

/***/ }),

/***/ "./src/lib/annotation/hypothesis/anchoring/xpath-util.js":
/*!***************************************************************!*\
  !*** ./src/lib/annotation/hypothesis/anchoring/xpath-util.js ***!
  \***************************************************************/
/*! exports provided: xpathFromNode, getTextNodes, getLastTextNodeUpTo, getFirstTextNodeNotBefore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"xpathFromNode\", function() { return xpathFromNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTextNodes\", function() { return getTextNodes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLastTextNodeUpTo\", function() { return getLastTextNodeUpTo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFirstTextNodeNotBefore\", function() { return getFirstTextNodeNotBefore; });\n/**\n * Get the node name for use in generating an xpath expression.\n *\n * @param {Node} node\n */\nfunction getNodeName(node) {\n  const nodeName = node.nodeName.toLowerCase();\n  let result = nodeName;\n\n  if (nodeName === '#text') {\n    result = 'text()';\n  }\n\n  return result;\n}\n/**\n * Get the index of the node as it appears in its parent's child list\n *\n * @param {Node} node\n */\n\n\nfunction getNodePosition(node) {\n  let pos = 0;\n  /** @type {Node|null} */\n\n  let tmp = node;\n\n  while (tmp) {\n    if (tmp.nodeName === node.nodeName) {\n      pos += 1;\n    }\n\n    tmp = tmp.previousSibling;\n  }\n\n  return pos;\n}\n\nfunction getPathSegment(node) {\n  const name = getNodeName(node);\n  const pos = getNodePosition(node);\n  return `${name}[${pos}]`;\n}\n/**\n * A simple XPath generator which can generate XPaths of the form\n * /tag[index]/tag[index].\n *\n * @param {Node} node - The node to generate a path to\n * @param {Node} root - Root node to which the returned path is relative\n */\n\n\nfunction xpathFromNode(node, root) {\n  let xpath = '';\n  /** @type {Node|null} */\n\n  let elem = node;\n\n  while (elem !== root) {\n    if (!elem) {\n      throw new Error('Node is not a descendant of root');\n    }\n\n    xpath = getPathSegment(elem) + '/' + xpath;\n    elem = elem.parentNode;\n  }\n\n  xpath = '/' + xpath;\n  xpath = xpath.replace(/\\/$/, ''); // Remove trailing slash\n\n  return xpath;\n}\n/**\n * Return all text node descendants of `parent`.\n *\n * @param {Node} parent\n * @return {Text[]}\n */\n\nfunction getTextNodes(parent) {\n  const nodes = [];\n\n  for (let node of Array.from(parent.childNodes)) {\n    // We test `nodeType` here rather than using `instanceof` because we have\n    // tests where `node` comes from a different iframe.\n    if (node.nodeType === Node.TEXT_NODE) {\n      nodes.push(\n      /** @type {Text} */\n      node);\n    } else if (node.nodeType === Node.ELEMENT_NODE) {\n      nodes.push(...getTextNodes(\n      /** @type {Element} */\n      node));\n    }\n  }\n\n  return nodes;\n}\n/**\n * Determine the last text node inside or before the given node.\n */\n\nfunction getLastTextNodeUpTo(node) {\n  switch (node.nodeType) {\n    case Node.TEXT_NODE:\n      return node;\n    // We have found our text node.\n\n    case Node.ELEMENT_NODE:\n      // This is an element, we need to dig in\n      if (node.lastChild) {\n        // Does it have children at all?\n        const result = getLastTextNodeUpTo(node.lastChild);\n\n        if (result) {\n          return result;\n        }\n      }\n\n  } // Could not find a text node in current node, go backwards\n\n\n  const prev = node.previousSibling;\n\n  if (prev) {\n    // eslint-disable-next-line no-unused-vars\n    return getLastTextNodeUpTo(prev);\n  } else {\n    return null;\n  }\n}\n/**\n * Determine the first text node in or after the given node.\n */\n\nfunction getFirstTextNodeNotBefore(node) {\n  switch (node.nodeType) {\n    case Node.TEXT_NODE:\n      return node;\n    // We have found our text node.\n\n    case Node.ELEMENT_NODE:\n      // This is an element, we need to dig in\n      if (node.firstChild) {\n        // Does it have children at all?\n        const result = getFirstTextNodeNotBefore(node.firstChild);\n\n        if (result) {\n          return result;\n        }\n      }\n\n  } // Could not find a text node in current node, go forward\n\n\n  const next = node.nextSibling;\n\n  if (next) {\n    // eslint-disable-next-line no-unused-vars\n    return getFirstTextNodeNotBefore(next);\n  } else {\n    return null;\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/annotation/hypothesis/anchoring/xpath-util.js\n");

/***/ }),

/***/ "./src/lib/annotation/hypothesis/anchoring/xpath.js":
/*!**********************************************************!*\
  !*** ./src/lib/annotation/hypothesis/anchoring/xpath.js ***!
  \**********************************************************/
/*! exports provided: xpathFromNode, nodeFromXPath */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nodeFromXPath\", function() { return nodeFromXPath; });\n/* harmony import */ var _xpath_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xpath-util */ \"./src/lib/annotation/hypothesis/anchoring/xpath-util.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"xpathFromNode\", function() { return _xpath_util__WEBPACK_IMPORTED_MODULE_0__[\"xpathFromNode\"]; });\n\n\n/**\n * Return the `index`'th immediate child of `element` whose tag name is\n * `nodeName` (case insensitive).\n *\n * @param {Element} element\n * @param {string} nodeName\n * @param {number} index\n */\n\nfunction nthChildOfType(element, nodeName, index) {\n  nodeName = nodeName.toUpperCase();\n  let matchIndex = -1;\n\n  for (let i = 0; i < element.children.length; i++) {\n    const child = element.children[i];\n\n    if (child.nodeName.toUpperCase() === nodeName) {\n      ++matchIndex;\n\n      if (matchIndex === index) {\n        return child;\n      }\n    }\n  }\n\n  return null;\n}\n/**\n * Evaluate a _simple XPath_ relative to a `root` element and return the\n * matching element.\n *\n * A _simple XPath_ is a sequence of one or more `/tagName[index]` strings.\n *\n * Unlike `document.evaluate` this function:\n *\n *  - Only supports simple XPaths\n *  - Is not affected by the document's _type_ (HTML or XML/XHTML)\n *  - Ignores element namespaces when matching element names in the XPath against\n *    elements in the DOM tree\n *  - Is case insensitive for all elements, not just HTML elements\n *\n * The matching element is returned or `null` if no such element is found.\n * An error is thrown if `xpath` is not a simple XPath.\n *\n * @param {string} xpath\n * @param {Element} root\n * @return {Element|null}\n */\n\n\nfunction evaluateSimpleXPath(xpath, root) {\n  const isSimpleXPath = xpath.match(/^(\\/[A-Za-z0-9-]+(\\[[0-9]+\\])?)+$/) !== null;\n\n  if (!isSimpleXPath) {\n    throw new Error('Expression is not a simple XPath');\n  }\n\n  const segments = xpath.split('/');\n  let element = root; // Remove leading empty segment. The regex above validates that the XPath\n  // has at least two segments, with the first being empty and the others non-empty.\n\n  segments.shift();\n\n  for (let segment of segments) {\n    let elementName;\n    let elementIndex;\n    const separatorPos = segment.indexOf('[');\n\n    if (separatorPos !== -1) {\n      elementName = segment.slice(0, separatorPos);\n      const indexStr = segment.slice(separatorPos + 1, segment.indexOf(']'));\n      elementIndex = parseInt(indexStr) - 1;\n\n      if (elementIndex < 0) {\n        return null;\n      }\n    } else {\n      elementName = segment;\n      elementIndex = 0;\n    }\n\n    const child = nthChildOfType(element, elementName, elementIndex);\n\n    if (!child) {\n      return null;\n    }\n\n    element = child;\n  }\n\n  return element;\n}\n/**\n * Finds an element node using an XPath relative to `root`\n *\n * Example:\n *   node = nodeFromXPath('/main/article[1]/p[3]', document.body)\n *\n * @param {string} xpath\n * @param {Element} [root]\n * @return {Node|null}\n */\n\n\nfunction nodeFromXPath(xpath, root = document.body) {\n  try {\n    return evaluateSimpleXPath(xpath, root);\n  } catch (err) {\n    return document.evaluate('.' + xpath, root, // nb. The `namespaceResolver` and `result` arguments are optional in the spec\n    // but required in Edge Legacy.\n    null\n    /* namespaceResolver */\n    , XPathResult.FIRST_ORDERED_NODE_TYPE, null\n    /* result */\n    ).singleNodeValue;\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2Fubm90YXRpb24vaHlwb3RoZXNpcy9hbmNob3JpbmcveHBhdGguanM/MjdmNSJdLCJuYW1lcyI6WyJudGhDaGlsZE9mVHlwZSIsImVsZW1lbnQiLCJub2RlTmFtZSIsImluZGV4IiwidG9VcHBlckNhc2UiLCJtYXRjaEluZGV4IiwiaSIsImNoaWxkcmVuIiwibGVuZ3RoIiwiY2hpbGQiLCJldmFsdWF0ZVNpbXBsZVhQYXRoIiwieHBhdGgiLCJyb290IiwiaXNTaW1wbGVYUGF0aCIsIm1hdGNoIiwiRXJyb3IiLCJzZWdtZW50cyIsInNwbGl0Iiwic2hpZnQiLCJzZWdtZW50IiwiZWxlbWVudE5hbWUiLCJlbGVtZW50SW5kZXgiLCJzZXBhcmF0b3JQb3MiLCJpbmRleE9mIiwic2xpY2UiLCJpbmRleFN0ciIsInBhcnNlSW50Iiwibm9kZUZyb21YUGF0aCIsImRvY3VtZW50IiwiYm9keSIsImVyciIsImV2YWx1YXRlIiwiWFBhdGhSZXN1bHQiLCJGSVJTVF9PUkRFUkVEX05PREVfVFlQRSIsInNpbmdsZU5vZGVWYWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFTQSxjQUFULENBQXdCQyxPQUF4QixFQUFpQ0MsUUFBakMsRUFBMkNDLEtBQTNDLEVBQWtEO0FBQ2hERCxVQUFRLEdBQUdBLFFBQVEsQ0FBQ0UsV0FBVCxFQUFYO0FBRUEsTUFBSUMsVUFBVSxHQUFHLENBQUMsQ0FBbEI7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHTCxPQUFPLENBQUNNLFFBQVIsQ0FBaUJDLE1BQXJDLEVBQTZDRixDQUFDLEVBQTlDLEVBQWtEO0FBQ2hELFVBQU1HLEtBQUssR0FBR1IsT0FBTyxDQUFDTSxRQUFSLENBQWlCRCxDQUFqQixDQUFkOztBQUNBLFFBQUlHLEtBQUssQ0FBQ1AsUUFBTixDQUFlRSxXQUFmLE9BQWlDRixRQUFyQyxFQUErQztBQUM3QyxRQUFFRyxVQUFGOztBQUNBLFVBQUlBLFVBQVUsS0FBS0YsS0FBbkIsRUFBMEI7QUFDeEIsZUFBT00sS0FBUDtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxTQUFPLElBQVA7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU0MsbUJBQVQsQ0FBNkJDLEtBQTdCLEVBQW9DQyxJQUFwQyxFQUEwQztBQUN4QyxRQUFNQyxhQUFhLEdBQ2pCRixLQUFLLENBQUNHLEtBQU4sQ0FBWSxtQ0FBWixNQUFxRCxJQUR2RDs7QUFFQSxNQUFJLENBQUNELGFBQUwsRUFBb0I7QUFDbEIsVUFBTSxJQUFJRSxLQUFKLENBQVUsa0NBQVYsQ0FBTjtBQUNEOztBQUVELFFBQU1DLFFBQVEsR0FBR0wsS0FBSyxDQUFDTSxLQUFOLENBQVksR0FBWixDQUFqQjtBQUNBLE1BQUloQixPQUFPLEdBQUdXLElBQWQsQ0FSd0MsQ0FVeEM7QUFDQTs7QUFDQUksVUFBUSxDQUFDRSxLQUFUOztBQUVBLE9BQUssSUFBSUMsT0FBVCxJQUFvQkgsUUFBcEIsRUFBOEI7QUFDNUIsUUFBSUksV0FBSjtBQUNBLFFBQUlDLFlBQUo7QUFFQSxVQUFNQyxZQUFZLEdBQUdILE9BQU8sQ0FBQ0ksT0FBUixDQUFnQixHQUFoQixDQUFyQjs7QUFDQSxRQUFJRCxZQUFZLEtBQUssQ0FBQyxDQUF0QixFQUF5QjtBQUN2QkYsaUJBQVcsR0FBR0QsT0FBTyxDQUFDSyxLQUFSLENBQWMsQ0FBZCxFQUFpQkYsWUFBakIsQ0FBZDtBQUVBLFlBQU1HLFFBQVEsR0FBR04sT0FBTyxDQUFDSyxLQUFSLENBQWNGLFlBQVksR0FBRyxDQUE3QixFQUFnQ0gsT0FBTyxDQUFDSSxPQUFSLENBQWdCLEdBQWhCLENBQWhDLENBQWpCO0FBQ0FGLGtCQUFZLEdBQUdLLFFBQVEsQ0FBQ0QsUUFBRCxDQUFSLEdBQXFCLENBQXBDOztBQUNBLFVBQUlKLFlBQVksR0FBRyxDQUFuQixFQUFzQjtBQUNwQixlQUFPLElBQVA7QUFDRDtBQUNGLEtBUkQsTUFRTztBQUNMRCxpQkFBVyxHQUFHRCxPQUFkO0FBQ0FFLGtCQUFZLEdBQUcsQ0FBZjtBQUNEOztBQUVELFVBQU1aLEtBQUssR0FBR1QsY0FBYyxDQUFDQyxPQUFELEVBQVVtQixXQUFWLEVBQXVCQyxZQUF2QixDQUE1Qjs7QUFDQSxRQUFJLENBQUNaLEtBQUwsRUFBWTtBQUNWLGFBQU8sSUFBUDtBQUNEOztBQUVEUixXQUFPLEdBQUdRLEtBQVY7QUFDRDs7QUFFRCxTQUFPUixPQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBUzBCLGFBQVQsQ0FBdUJoQixLQUF2QixFQUE4QkMsSUFBSSxHQUFHZ0IsUUFBUSxDQUFDQyxJQUE5QyxFQUFvRDtBQUN6RCxNQUFJO0FBQ0YsV0FBT25CLG1CQUFtQixDQUFDQyxLQUFELEVBQVFDLElBQVIsQ0FBMUI7QUFDRCxHQUZELENBRUUsT0FBT2tCLEdBQVAsRUFBWTtBQUNaLFdBQU9GLFFBQVEsQ0FBQ0csUUFBVCxDQUNMLE1BQU1wQixLQURELEVBRUxDLElBRkssRUFJTDtBQUNBO0FBQ0E7QUFBSztBQU5BLE1BT0xvQixXQUFXLENBQUNDLHVCQVBQLEVBUUw7QUFBSztBQVJBLE1BU0xDLGVBVEY7QUFVRDtBQUNGIiwiZmlsZSI6Ii4vc3JjL2xpYi9hbm5vdGF0aW9uL2h5cG90aGVzaXMvYW5jaG9yaW5nL3hwYXRoLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgeHBhdGhGcm9tTm9kZSB9IGZyb20gJy4veHBhdGgtdXRpbCc7XG5cbi8qKlxuICogUmV0dXJuIHRoZSBgaW5kZXhgJ3RoIGltbWVkaWF0ZSBjaGlsZCBvZiBgZWxlbWVudGAgd2hvc2UgdGFnIG5hbWUgaXNcbiAqIGBub2RlTmFtZWAgKGNhc2UgaW5zZW5zaXRpdmUpLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IG5vZGVOYW1lXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqL1xuZnVuY3Rpb24gbnRoQ2hpbGRPZlR5cGUoZWxlbWVudCwgbm9kZU5hbWUsIGluZGV4KSB7XG4gIG5vZGVOYW1lID0gbm9kZU5hbWUudG9VcHBlckNhc2UoKTtcblxuICBsZXQgbWF0Y2hJbmRleCA9IC0xO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGlsZCA9IGVsZW1lbnQuY2hpbGRyZW5baV07XG4gICAgaWYgKGNoaWxkLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vZGVOYW1lKSB7XG4gICAgICArK21hdGNoSW5kZXg7XG4gICAgICBpZiAobWF0Y2hJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEV2YWx1YXRlIGEgX3NpbXBsZSBYUGF0aF8gcmVsYXRpdmUgdG8gYSBgcm9vdGAgZWxlbWVudCBhbmQgcmV0dXJuIHRoZVxuICogbWF0Y2hpbmcgZWxlbWVudC5cbiAqXG4gKiBBIF9zaW1wbGUgWFBhdGhfIGlzIGEgc2VxdWVuY2Ugb2Ygb25lIG9yIG1vcmUgYC90YWdOYW1lW2luZGV4XWAgc3RyaW5ncy5cbiAqXG4gKiBVbmxpa2UgYGRvY3VtZW50LmV2YWx1YXRlYCB0aGlzIGZ1bmN0aW9uOlxuICpcbiAqICAtIE9ubHkgc3VwcG9ydHMgc2ltcGxlIFhQYXRoc1xuICogIC0gSXMgbm90IGFmZmVjdGVkIGJ5IHRoZSBkb2N1bWVudCdzIF90eXBlXyAoSFRNTCBvciBYTUwvWEhUTUwpXG4gKiAgLSBJZ25vcmVzIGVsZW1lbnQgbmFtZXNwYWNlcyB3aGVuIG1hdGNoaW5nIGVsZW1lbnQgbmFtZXMgaW4gdGhlIFhQYXRoIGFnYWluc3RcbiAqICAgIGVsZW1lbnRzIGluIHRoZSBET00gdHJlZVxuICogIC0gSXMgY2FzZSBpbnNlbnNpdGl2ZSBmb3IgYWxsIGVsZW1lbnRzLCBub3QganVzdCBIVE1MIGVsZW1lbnRzXG4gKlxuICogVGhlIG1hdGNoaW5nIGVsZW1lbnQgaXMgcmV0dXJuZWQgb3IgYG51bGxgIGlmIG5vIHN1Y2ggZWxlbWVudCBpcyBmb3VuZC5cbiAqIEFuIGVycm9yIGlzIHRocm93biBpZiBgeHBhdGhgIGlzIG5vdCBhIHNpbXBsZSBYUGF0aC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30geHBhdGhcbiAqIEBwYXJhbSB7RWxlbWVudH0gcm9vdFxuICogQHJldHVybiB7RWxlbWVudHxudWxsfVxuICovXG5mdW5jdGlvbiBldmFsdWF0ZVNpbXBsZVhQYXRoKHhwYXRoLCByb290KSB7XG4gIGNvbnN0IGlzU2ltcGxlWFBhdGggPVxuICAgIHhwYXRoLm1hdGNoKC9eKFxcL1tBLVphLXowLTktXSsoXFxbWzAtOV0rXFxdKT8pKyQvKSAhPT0gbnVsbDtcbiAgaWYgKCFpc1NpbXBsZVhQYXRoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHByZXNzaW9uIGlzIG5vdCBhIHNpbXBsZSBYUGF0aCcpO1xuICB9XG5cbiAgY29uc3Qgc2VnbWVudHMgPSB4cGF0aC5zcGxpdCgnLycpO1xuICBsZXQgZWxlbWVudCA9IHJvb3Q7XG5cbiAgLy8gUmVtb3ZlIGxlYWRpbmcgZW1wdHkgc2VnbWVudC4gVGhlIHJlZ2V4IGFib3ZlIHZhbGlkYXRlcyB0aGF0IHRoZSBYUGF0aFxuICAvLyBoYXMgYXQgbGVhc3QgdHdvIHNlZ21lbnRzLCB3aXRoIHRoZSBmaXJzdCBiZWluZyBlbXB0eSBhbmQgdGhlIG90aGVycyBub24tZW1wdHkuXG4gIHNlZ21lbnRzLnNoaWZ0KCk7XG5cbiAgZm9yIChsZXQgc2VnbWVudCBvZiBzZWdtZW50cykge1xuICAgIGxldCBlbGVtZW50TmFtZTtcbiAgICBsZXQgZWxlbWVudEluZGV4O1xuXG4gICAgY29uc3Qgc2VwYXJhdG9yUG9zID0gc2VnbWVudC5pbmRleE9mKCdbJyk7XG4gICAgaWYgKHNlcGFyYXRvclBvcyAhPT0gLTEpIHtcbiAgICAgIGVsZW1lbnROYW1lID0gc2VnbWVudC5zbGljZSgwLCBzZXBhcmF0b3JQb3MpO1xuXG4gICAgICBjb25zdCBpbmRleFN0ciA9IHNlZ21lbnQuc2xpY2Uoc2VwYXJhdG9yUG9zICsgMSwgc2VnbWVudC5pbmRleE9mKCddJykpO1xuICAgICAgZWxlbWVudEluZGV4ID0gcGFyc2VJbnQoaW5kZXhTdHIpIC0gMTtcbiAgICAgIGlmIChlbGVtZW50SW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50TmFtZSA9IHNlZ21lbnQ7XG4gICAgICBlbGVtZW50SW5kZXggPSAwO1xuICAgIH1cblxuICAgIGNvbnN0IGNoaWxkID0gbnRoQ2hpbGRPZlR5cGUoZWxlbWVudCwgZWxlbWVudE5hbWUsIGVsZW1lbnRJbmRleCk7XG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZWxlbWVudCA9IGNoaWxkO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbi8qKlxuICogRmluZHMgYW4gZWxlbWVudCBub2RlIHVzaW5nIGFuIFhQYXRoIHJlbGF0aXZlIHRvIGByb290YFxuICpcbiAqIEV4YW1wbGU6XG4gKiAgIG5vZGUgPSBub2RlRnJvbVhQYXRoKCcvbWFpbi9hcnRpY2xlWzFdL3BbM10nLCBkb2N1bWVudC5ib2R5KVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB4cGF0aFxuICogQHBhcmFtIHtFbGVtZW50fSBbcm9vdF1cbiAqIEByZXR1cm4ge05vZGV8bnVsbH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vZGVGcm9tWFBhdGgoeHBhdGgsIHJvb3QgPSBkb2N1bWVudC5ib2R5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGV2YWx1YXRlU2ltcGxlWFBhdGgoeHBhdGgsIHJvb3QpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZXZhbHVhdGUoXG4gICAgICAnLicgKyB4cGF0aCxcbiAgICAgIHJvb3QsXG5cbiAgICAgIC8vIG5iLiBUaGUgYG5hbWVzcGFjZVJlc29sdmVyYCBhbmQgYHJlc3VsdGAgYXJndW1lbnRzIGFyZSBvcHRpb25hbCBpbiB0aGUgc3BlY1xuICAgICAgLy8gYnV0IHJlcXVpcmVkIGluIEVkZ2UgTGVnYWN5LlxuICAgICAgbnVsbCAvKiBuYW1lc3BhY2VSZXNvbHZlciAqLyxcbiAgICAgIFhQYXRoUmVzdWx0LkZJUlNUX09SREVSRURfTk9ERV9UWVBFLFxuICAgICAgbnVsbCAvKiByZXN1bHQgKi9cbiAgICApLnNpbmdsZU5vZGVWYWx1ZTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/lib/annotation/hypothesis/anchoring/xpath.js\n");

/***/ }),

/***/ "./src/lib/annotation/hypothesis/range-util.js":
/*!*****************************************************!*\
  !*** ./src/lib/annotation/hypothesis/range-util.js ***!
  \*****************************************************/
/*! exports provided: isSelectionBackwards, isNodeInRange, getTextBoundingBoxes, selectionFocusRect, itemsForRange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isSelectionBackwards\", function() { return isSelectionBackwards; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isNodeInRange\", function() { return isNodeInRange; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTextBoundingBoxes\", function() { return getTextBoundingBoxes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"selectionFocusRect\", function() { return selectionFocusRect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"itemsForRange\", function() { return itemsForRange; });\n/**\n * Returns true if the start point of a selection occurs after the end point,\n * in document order.\n *\n * @param {Selection} selection\n */\nfunction isSelectionBackwards(selection) {\n  if (selection.focusNode === selection.anchorNode) {\n    return selection.focusOffset < selection.anchorOffset;\n  }\n\n  const range = selection.getRangeAt(0);\n  return range.startContainer === selection.focusNode;\n}\n/**\n * Returns true if `node` lies within a range.\n *\n * This is a simplified version of `Range.isPointInRange()` for compatibility\n * with IE.\n *\n * @param {Range} range\n * @param {Node} node\n */\n\nfunction isNodeInRange(range, node) {\n  if (node === range.startContainer || node === range.endContainer) {\n    return true;\n  }\n\n  const nodeRange =\n  /** @type {Document} */\n  node.ownerDocument.createRange();\n  nodeRange.selectNode(node);\n  const isAtOrBeforeStart = range.compareBoundaryPoints(Range.START_TO_START, nodeRange) <= 0;\n  const isAtOrAfterEnd = range.compareBoundaryPoints(Range.END_TO_END, nodeRange) >= 0;\n  nodeRange.detach();\n  return isAtOrBeforeStart && isAtOrAfterEnd;\n}\n/**\n * Iterate over all Node(s) in `range` in document order and invoke `callback`\n * for each of them.\n *\n * @param {Range} range\n * @param {(n: Node) => any} callback\n */\n\nfunction forEachNodeInRange(range, callback) {\n  const root = range.commonAncestorContainer; // The `whatToShow`, `filter` and `expandEntityReferences` arguments are\n  // mandatory in IE although optional according to the spec.\n\n  const nodeIter =\n  /** @type {Document} */\n  root.ownerDocument.createNodeIterator(root, NodeFilter.SHOW_ALL);\n  let currentNode;\n\n  while (currentNode = nodeIter.nextNode()) {\n    // eslint-disable-line no-cond-assign\n    if (isNodeInRange(range, currentNode)) {\n      callback(currentNode);\n    }\n  }\n}\n/**\n * Returns the bounding rectangles of non-whitespace text nodes in `range`.\n *\n * @param {Range} range\n * @return {Array<DOMRect>} Array of bounding rects in viewport coordinates.\n */\n\n\nfunction getTextBoundingBoxes(range) {\n  const whitespaceOnly = /^\\s*$/;\n  const textNodes = [];\n  forEachNodeInRange(range, function (node) {\n    if (node.nodeType === Node.TEXT_NODE && !\n    /** @type {string} */\n    node.textContent.match(whitespaceOnly)) {\n      textNodes.push(node);\n    }\n  });\n  let rects = [];\n  textNodes.forEach(function (node) {\n    const nodeRange = node.ownerDocument.createRange();\n    nodeRange.selectNodeContents(node);\n\n    if (node === range.startContainer) {\n      nodeRange.setStart(node, range.startOffset);\n    }\n\n    if (node === range.endContainer) {\n      nodeRange.setEnd(node, range.endOffset);\n    }\n\n    if (nodeRange.collapsed) {\n      // If the range ends at the start of this text node or starts at the end\n      // of this node then do not include it.\n      return;\n    } // Measure the range and translate from viewport to document coordinates\n\n\n    const viewportRects = Array.from(nodeRange.getClientRects());\n    nodeRange.detach();\n    rects = rects.concat(viewportRects);\n  });\n  return rects;\n}\n/**\n * Returns the rectangle, in viewport coordinates, for the line of text\n * containing the focus point of a Selection.\n *\n * Returns null if the selection is empty.\n *\n * @param {Selection} selection\n * @return {DOMRect|null}\n */\n\nfunction selectionFocusRect(selection) {\n  if (selection.isCollapsed) {\n    return null;\n  }\n\n  const textBoxes = getTextBoundingBoxes(selection.getRangeAt(0));\n\n  if (textBoxes.length === 0) {\n    return null;\n  }\n\n  if (isSelectionBackwards(selection)) {\n    return textBoxes[0];\n  } else {\n    return textBoxes[textBoxes.length - 1];\n  }\n}\n/**\n * Retrieve a set of items associated with nodes in a given range.\n *\n * An `item` can be any data that the caller wishes to compute from or associate\n * with a node. Only unique items, as determined by `Object.is`, are returned.\n *\n * @template T\n * @param {Range} range\n * @param {(n: Node) => T} itemForNode - Callback returning the item for a given node\n * @return {T[]} items\n */\n\nfunction itemsForRange(range, itemForNode) {\n  const checkedNodes = new Set();\n  const items = new Set();\n  forEachNodeInRange(range, node => {\n    /** @type {Node|null} */\n    let current = node;\n\n    while (current) {\n      if (checkedNodes.has(current)) {\n        break;\n      }\n\n      checkedNodes.add(current);\n      const item = itemForNode(current);\n\n      if (item) {\n        items.add(item);\n      }\n\n      current = current.parentNode;\n    }\n  });\n  return [...items];\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/annotation/hypothesis/range-util.js\n");

/***/ }),

/***/ "./src/lib/annotation/hypothesis/selections.js":
/*!*****************************************************!*\
  !*** ./src/lib/annotation/hypothesis/selections.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return selections; });\n/* harmony import */ var _util_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/observable */ \"./src/lib/annotation/hypothesis/util/observable.js\");\n\n/** Returns the selected `DOMRange` in `document`. */\n\nfunction selectedRange(document) {\n  const selection = document.getSelection();\n\n  if (!selection.rangeCount || selection.getRangeAt(0).collapsed) {\n    return null;\n  } else {\n    return selection.getRangeAt(0);\n  }\n}\n/**\n * Returns an Observable stream of text selections in the current document.\n *\n * New values are emitted when the user finishes making a selection\n * (represented by a `DOMRange`) or clears a selection (represented by `null`).\n *\n * A value will be emitted with the selected range at the time of subscription\n * on the next tick.\n *\n * @return Observable<DOMRange|null>\n */\n\n\nfunction selections(document) {\n  // Get a stream of selection changes that occur whilst the user is not\n  // making a selection with the mouse.\n  let isMouseDown;\n  const selectionEvents = _util_observable__WEBPACK_IMPORTED_MODULE_0__[\"listen\"](document, ['mousedown', 'mouseup', 'selectionchange']).filter(function (event) {\n    if (event.type === 'mousedown' || event.type === 'mouseup') {\n      isMouseDown = event.type === 'mousedown';\n      return false;\n    } else {\n      return !isMouseDown;\n    }\n  });\n  const events = _util_observable__WEBPACK_IMPORTED_MODULE_0__[\"merge\"]([// Add a delay before checking the state of the selection because\n  // the selection is not updated immediately after a 'mouseup' event\n  // but only on the next tick of the event loop.\n  _util_observable__WEBPACK_IMPORTED_MODULE_0__[\"buffer\"](10, _util_observable__WEBPACK_IMPORTED_MODULE_0__[\"listen\"](document, ['mouseup'])), // Buffer selection changes to avoid continually emitting events whilst the\n  // user drags the selection handles on mobile devices\n  _util_observable__WEBPACK_IMPORTED_MODULE_0__[\"buffer\"](100, selectionEvents), // Emit an initial event on the next tick\n  _util_observable__WEBPACK_IMPORTED_MODULE_0__[\"delay\"](0, _util_observable__WEBPACK_IMPORTED_MODULE_0__[\"Observable\"].of({}))]);\n  return events.map(function () {\n    return selectedRange(document);\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2Fubm90YXRpb24vaHlwb3RoZXNpcy9zZWxlY3Rpb25zLmpzP2M0ZDUiXSwibmFtZXMiOlsic2VsZWN0ZWRSYW5nZSIsImRvY3VtZW50Iiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImdldFJhbmdlQXQiLCJjb2xsYXBzZWQiLCJzZWxlY3Rpb25zIiwiaXNNb3VzZURvd24iLCJzZWxlY3Rpb25FdmVudHMiLCJvYnNlcnZhYmxlIiwiZmlsdGVyIiwiZXZlbnQiLCJ0eXBlIiwiZXZlbnRzIiwib2YiLCJtYXAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7O0FBQ0EsU0FBU0EsYUFBVCxDQUF1QkMsUUFBdkIsRUFBaUM7QUFDL0IsUUFBTUMsU0FBUyxHQUFHRCxRQUFRLENBQUNFLFlBQVQsRUFBbEI7O0FBQ0EsTUFBSSxDQUFDRCxTQUFTLENBQUNFLFVBQVgsSUFBeUJGLFNBQVMsQ0FBQ0csVUFBVixDQUFxQixDQUFyQixFQUF3QkMsU0FBckQsRUFBZ0U7QUFDOUQsV0FBTyxJQUFQO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBT0osU0FBUyxDQUFDRyxVQUFWLENBQXFCLENBQXJCLENBQVA7QUFDRDtBQUNGO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ2UsU0FBU0UsVUFBVCxDQUFvQk4sUUFBcEIsRUFBOEI7QUFDM0M7QUFDQTtBQUNBLE1BQUlPLFdBQUo7QUFDQSxRQUFNQyxlQUFlLEdBQUdDLHVEQUFBLENBQ2RULFFBRGMsRUFDSixDQUFDLFdBQUQsRUFBYyxTQUFkLEVBQXlCLGlCQUF6QixDQURJLEVBRXJCVSxNQUZxQixDQUVkLFVBQVVDLEtBQVYsRUFBaUI7QUFDdkIsUUFBSUEsS0FBSyxDQUFDQyxJQUFOLEtBQWUsV0FBZixJQUE4QkQsS0FBSyxDQUFDQyxJQUFOLEtBQWUsU0FBakQsRUFBNEQ7QUFDMURMLGlCQUFXLEdBQUdJLEtBQUssQ0FBQ0MsSUFBTixLQUFlLFdBQTdCO0FBQ0EsYUFBTyxLQUFQO0FBQ0QsS0FIRCxNQUdPO0FBQ0wsYUFBTyxDQUFDTCxXQUFSO0FBQ0Q7QUFDRixHQVRxQixDQUF4QjtBQVdBLFFBQU1NLE1BQU0sR0FBR0osc0RBQUEsQ0FBaUIsQ0FDOUI7QUFDQTtBQUNBO0FBQ0FBLHlEQUFBLENBQWtCLEVBQWxCLEVBQXNCQSx1REFBQSxDQUFrQlQsUUFBbEIsRUFBNEIsQ0FBQyxTQUFELENBQTVCLENBQXRCLENBSjhCLEVBTTlCO0FBQ0E7QUFDQVMseURBQUEsQ0FBa0IsR0FBbEIsRUFBdUJELGVBQXZCLENBUjhCLEVBVTlCO0FBQ0FDLHdEQUFBLENBQWlCLENBQWpCLEVBQW9CQSwyREFBQSxDQUFzQkssRUFBdEIsQ0FBeUIsRUFBekIsQ0FBcEIsQ0FYOEIsQ0FBakIsQ0FBZjtBQWNBLFNBQU9ELE1BQU0sQ0FBQ0UsR0FBUCxDQUFXLFlBQVk7QUFDNUIsV0FBT2hCLGFBQWEsQ0FBQ0MsUUFBRCxDQUFwQjtBQUNELEdBRk0sQ0FBUDtBQUdEIiwiZmlsZSI6Ii4vc3JjL2xpYi9hbm5vdGF0aW9uL2h5cG90aGVzaXMvc2VsZWN0aW9ucy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG9ic2VydmFibGUgZnJvbSAnLi91dGlsL29ic2VydmFibGUnO1xuXG4vKiogUmV0dXJucyB0aGUgc2VsZWN0ZWQgYERPTVJhbmdlYCBpbiBgZG9jdW1lbnRgLiAqL1xuZnVuY3Rpb24gc2VsZWN0ZWRSYW5nZShkb2N1bWVudCkge1xuICBjb25zdCBzZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcbiAgaWYgKCFzZWxlY3Rpb24ucmFuZ2VDb3VudCB8fCBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKS5jb2xsYXBzZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgc3RyZWFtIG9mIHRleHQgc2VsZWN0aW9ucyBpbiB0aGUgY3VycmVudCBkb2N1bWVudC5cbiAqXG4gKiBOZXcgdmFsdWVzIGFyZSBlbWl0dGVkIHdoZW4gdGhlIHVzZXIgZmluaXNoZXMgbWFraW5nIGEgc2VsZWN0aW9uXG4gKiAocmVwcmVzZW50ZWQgYnkgYSBgRE9NUmFuZ2VgKSBvciBjbGVhcnMgYSBzZWxlY3Rpb24gKHJlcHJlc2VudGVkIGJ5IGBudWxsYCkuXG4gKlxuICogQSB2YWx1ZSB3aWxsIGJlIGVtaXR0ZWQgd2l0aCB0aGUgc2VsZWN0ZWQgcmFuZ2UgYXQgdGhlIHRpbWUgb2Ygc3Vic2NyaXB0aW9uXG4gKiBvbiB0aGUgbmV4dCB0aWNrLlxuICpcbiAqIEByZXR1cm4gT2JzZXJ2YWJsZTxET01SYW5nZXxudWxsPlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZWxlY3Rpb25zKGRvY3VtZW50KSB7XG4gIC8vIEdldCBhIHN0cmVhbSBvZiBzZWxlY3Rpb24gY2hhbmdlcyB0aGF0IG9jY3VyIHdoaWxzdCB0aGUgdXNlciBpcyBub3RcbiAgLy8gbWFraW5nIGEgc2VsZWN0aW9uIHdpdGggdGhlIG1vdXNlLlxuICBsZXQgaXNNb3VzZURvd247XG4gIGNvbnN0IHNlbGVjdGlvbkV2ZW50cyA9IG9ic2VydmFibGVcbiAgICAubGlzdGVuKGRvY3VtZW50LCBbJ21vdXNlZG93bicsICdtb3VzZXVwJywgJ3NlbGVjdGlvbmNoYW5nZSddKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgfHwgZXZlbnQudHlwZSA9PT0gJ21vdXNldXAnKSB7XG4gICAgICAgIGlzTW91c2VEb3duID0gZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bic7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAhaXNNb3VzZURvd247XG4gICAgICB9XG4gICAgfSk7XG5cbiAgY29uc3QgZXZlbnRzID0gb2JzZXJ2YWJsZS5tZXJnZShbXG4gICAgLy8gQWRkIGEgZGVsYXkgYmVmb3JlIGNoZWNraW5nIHRoZSBzdGF0ZSBvZiB0aGUgc2VsZWN0aW9uIGJlY2F1c2VcbiAgICAvLyB0aGUgc2VsZWN0aW9uIGlzIG5vdCB1cGRhdGVkIGltbWVkaWF0ZWx5IGFmdGVyIGEgJ21vdXNldXAnIGV2ZW50XG4gICAgLy8gYnV0IG9ubHkgb24gdGhlIG5leHQgdGljayBvZiB0aGUgZXZlbnQgbG9vcC5cbiAgICBvYnNlcnZhYmxlLmJ1ZmZlcigxMCwgb2JzZXJ2YWJsZS5saXN0ZW4oZG9jdW1lbnQsIFsnbW91c2V1cCddKSksXG5cbiAgICAvLyBCdWZmZXIgc2VsZWN0aW9uIGNoYW5nZXMgdG8gYXZvaWQgY29udGludWFsbHkgZW1pdHRpbmcgZXZlbnRzIHdoaWxzdCB0aGVcbiAgICAvLyB1c2VyIGRyYWdzIHRoZSBzZWxlY3Rpb24gaGFuZGxlcyBvbiBtb2JpbGUgZGV2aWNlc1xuICAgIG9ic2VydmFibGUuYnVmZmVyKDEwMCwgc2VsZWN0aW9uRXZlbnRzKSxcblxuICAgIC8vIEVtaXQgYW4gaW5pdGlhbCBldmVudCBvbiB0aGUgbmV4dCB0aWNrXG4gICAgb2JzZXJ2YWJsZS5kZWxheSgwLCBvYnNlcnZhYmxlLk9ic2VydmFibGUub2Yoe30pKSxcbiAgXSk7XG5cbiAgcmV0dXJuIGV2ZW50cy5tYXAoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzZWxlY3RlZFJhbmdlKGRvY3VtZW50KTtcbiAgfSk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib/annotation/hypothesis/selections.js\n");

/***/ }),

/***/ "./src/lib/annotation/hypothesis/util/observable.js":
/*!**********************************************************!*\
  !*** ./src/lib/annotation/hypothesis/util/observable.js ***!
  \**********************************************************/
/*! exports provided: listen, delay, buffer, merge, drop, Observable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"listen\", function() { return listen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"delay\", function() { return delay; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"buffer\", function() { return buffer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"merge\", function() { return merge; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"drop\", function() { return drop; });\n/* harmony import */ var zen_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zen-observable */ \"./node_modules/zen-observable/index.js\");\n/* harmony import */ var zen_observable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(zen_observable__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, \"Observable\", function() { return zen_observable__WEBPACK_IMPORTED_MODULE_0___default.a; });\n/**\n * Functions (aka. 'operators') for generating and manipulating streams of\n * values using the Observable API.\n */\n\n/**\n * Returns an observable of events emitted by a DOM event source\n * (eg. an Element, Document or Window).\n *\n * @param {EventTarget} src - The event source.\n * @param {Array<string>} eventNames - List of events to subscribe to\n */\n\nfunction listen(src, eventNames) {\n  return new zen_observable__WEBPACK_IMPORTED_MODULE_0___default.a(function (observer) {\n    const onNext = function (event) {\n      observer.next(event);\n    };\n\n    eventNames.forEach(function (event) {\n      src.addEventListener(event, onNext);\n    });\n    return function () {\n      eventNames.forEach(function (event) {\n        src.removeEventListener(event, onNext);\n      });\n    };\n  });\n}\n/**\n * Delay events from a source Observable by `delay` ms.\n */\n\nfunction delay(delay, src) {\n  return new zen_observable__WEBPACK_IMPORTED_MODULE_0___default.a(function (obs) {\n    let timeouts = [];\n    const sub = src.subscribe({\n      next: function (value) {\n        const t = setTimeout(function () {\n          timeouts = timeouts.filter(function (other) {\n            return other !== t;\n          });\n          obs.next(value);\n        }, delay);\n        timeouts.push(t);\n      }\n    });\n    return function () {\n      timeouts.forEach(clearTimeout);\n      sub.unsubscribe();\n    };\n  });\n}\n/**\n * Buffers events from a source Observable, waiting for a pause of `delay`\n * ms with no events before emitting the last value from `src`.\n *\n * @template T\n * @param {number} delay\n * @param {Observable<T>} src\n * @return {Observable<T>}\n */\n\nfunction buffer(delay, src) {\n  return new zen_observable__WEBPACK_IMPORTED_MODULE_0___default.a(function (obs) {\n    let lastValue;\n    let timeout;\n\n    function onNext() {\n      obs.next(lastValue);\n    }\n\n    const sub = src.subscribe({\n      next: function (value) {\n        lastValue = value;\n        clearTimeout(timeout);\n        timeout = setTimeout(onNext, delay);\n      }\n    });\n    return function () {\n      sub.unsubscribe();\n      clearTimeout(timeout);\n    };\n  });\n}\n/**\n * Merges multiple streams of values into a single stream.\n *\n * @param {Array<Observable>} sources\n * @return Observable\n */\n\nfunction merge(sources) {\n  return new zen_observable__WEBPACK_IMPORTED_MODULE_0___default.a(function (obs) {\n    const subs = sources.map(function (src) {\n      return src.subscribe({\n        next: function (value) {\n          obs.next(value);\n        }\n      });\n    });\n    return function () {\n      subs.forEach(function (sub) {\n        sub.unsubscribe();\n      });\n    };\n  });\n}\n/** Drop the first `n` events from the `src` Observable. */\n\nfunction drop(src, n) {\n  let count = 0;\n  return src.filter(function () {\n    ++count;\n    return count > n;\n  });\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2Fubm90YXRpb24vaHlwb3RoZXNpcy91dGlsL29ic2VydmFibGUuanM/ODQ1YiJdLCJuYW1lcyI6WyJsaXN0ZW4iLCJzcmMiLCJldmVudE5hbWVzIiwiT2JzZXJ2YWJsZSIsIm9ic2VydmVyIiwib25OZXh0IiwiZXZlbnQiLCJuZXh0IiwiZm9yRWFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGVsYXkiLCJvYnMiLCJ0aW1lb3V0cyIsInN1YiIsInN1YnNjcmliZSIsInZhbHVlIiwidCIsInNldFRpbWVvdXQiLCJmaWx0ZXIiLCJvdGhlciIsInB1c2giLCJjbGVhclRpbWVvdXQiLCJ1bnN1YnNjcmliZSIsImJ1ZmZlciIsImxhc3RWYWx1ZSIsInRpbWVvdXQiLCJtZXJnZSIsInNvdXJjZXMiLCJzdWJzIiwibWFwIiwiZHJvcCIsIm4iLCJjb3VudCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNBLE1BQVQsQ0FBZ0JDLEdBQWhCLEVBQXFCQyxVQUFyQixFQUFpQztBQUN0QyxTQUFPLElBQUlDLHFEQUFKLENBQWUsVUFBVUMsUUFBVixFQUFvQjtBQUN4QyxVQUFNQyxNQUFNLEdBQUcsVUFBVUMsS0FBVixFQUFpQjtBQUM5QkYsY0FBUSxDQUFDRyxJQUFULENBQWNELEtBQWQ7QUFDRCxLQUZEOztBQUlBSixjQUFVLENBQUNNLE9BQVgsQ0FBbUIsVUFBVUYsS0FBVixFQUFpQjtBQUNsQ0wsU0FBRyxDQUFDUSxnQkFBSixDQUFxQkgsS0FBckIsRUFBNEJELE1BQTVCO0FBQ0QsS0FGRDtBQUlBLFdBQU8sWUFBWTtBQUNqQkgsZ0JBQVUsQ0FBQ00sT0FBWCxDQUFtQixVQUFVRixLQUFWLEVBQWlCO0FBQ2xDTCxXQUFHLENBQUNTLG1CQUFKLENBQXdCSixLQUF4QixFQUErQkQsTUFBL0I7QUFDRCxPQUZEO0FBR0QsS0FKRDtBQUtELEdBZE0sQ0FBUDtBQWVEO0FBRUQ7QUFDQTtBQUNBOztBQUNPLFNBQVNNLEtBQVQsQ0FBZUEsS0FBZixFQUFzQlYsR0FBdEIsRUFBMkI7QUFDaEMsU0FBTyxJQUFJRSxxREFBSixDQUFlLFVBQVVTLEdBQVYsRUFBZTtBQUNuQyxRQUFJQyxRQUFRLEdBQUcsRUFBZjtBQUNBLFVBQU1DLEdBQUcsR0FBR2IsR0FBRyxDQUFDYyxTQUFKLENBQWM7QUFDeEJSLFVBQUksRUFBRSxVQUFVUyxLQUFWLEVBQWlCO0FBQ3JCLGNBQU1DLENBQUMsR0FBR0MsVUFBVSxDQUFDLFlBQVk7QUFDL0JMLGtCQUFRLEdBQUdBLFFBQVEsQ0FBQ00sTUFBVCxDQUFnQixVQUFVQyxLQUFWLEVBQWlCO0FBQzFDLG1CQUFPQSxLQUFLLEtBQUtILENBQWpCO0FBQ0QsV0FGVSxDQUFYO0FBR0FMLGFBQUcsQ0FBQ0wsSUFBSixDQUFTUyxLQUFUO0FBQ0QsU0FMbUIsRUFLakJMLEtBTGlCLENBQXBCO0FBTUFFLGdCQUFRLENBQUNRLElBQVQsQ0FBY0osQ0FBZDtBQUNEO0FBVHVCLEtBQWQsQ0FBWjtBQVdBLFdBQU8sWUFBWTtBQUNqQkosY0FBUSxDQUFDTCxPQUFULENBQWlCYyxZQUFqQjtBQUNBUixTQUFHLENBQUNTLFdBQUo7QUFDRCxLQUhEO0FBSUQsR0FqQk0sQ0FBUDtBQWtCRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxTQUFTQyxNQUFULENBQWdCYixLQUFoQixFQUF1QlYsR0FBdkIsRUFBNEI7QUFDakMsU0FBTyxJQUFJRSxxREFBSixDQUFlLFVBQVVTLEdBQVYsRUFBZTtBQUNuQyxRQUFJYSxTQUFKO0FBQ0EsUUFBSUMsT0FBSjs7QUFFQSxhQUFTckIsTUFBVCxHQUFrQjtBQUNoQk8sU0FBRyxDQUFDTCxJQUFKLENBQVNrQixTQUFUO0FBQ0Q7O0FBRUQsVUFBTVgsR0FBRyxHQUFHYixHQUFHLENBQUNjLFNBQUosQ0FBYztBQUN4QlIsVUFBSSxFQUFFLFVBQVVTLEtBQVYsRUFBaUI7QUFDckJTLGlCQUFTLEdBQUdULEtBQVo7QUFDQU0sb0JBQVksQ0FBQ0ksT0FBRCxDQUFaO0FBQ0FBLGVBQU8sR0FBR1IsVUFBVSxDQUFDYixNQUFELEVBQVNNLEtBQVQsQ0FBcEI7QUFDRDtBQUx1QixLQUFkLENBQVo7QUFRQSxXQUFPLFlBQVk7QUFDakJHLFNBQUcsQ0FBQ1MsV0FBSjtBQUNBRCxrQkFBWSxDQUFDSSxPQUFELENBQVo7QUFDRCxLQUhEO0FBSUQsR0FwQk0sQ0FBUDtBQXFCRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDTyxTQUFTQyxLQUFULENBQWVDLE9BQWYsRUFBd0I7QUFDN0IsU0FBTyxJQUFJekIscURBQUosQ0FBZSxVQUFVUyxHQUFWLEVBQWU7QUFDbkMsVUFBTWlCLElBQUksR0FBR0QsT0FBTyxDQUFDRSxHQUFSLENBQVksVUFBVTdCLEdBQVYsRUFBZTtBQUN0QyxhQUFPQSxHQUFHLENBQUNjLFNBQUosQ0FBYztBQUNuQlIsWUFBSSxFQUFFLFVBQVVTLEtBQVYsRUFBaUI7QUFDckJKLGFBQUcsQ0FBQ0wsSUFBSixDQUFTUyxLQUFUO0FBQ0Q7QUFIa0IsT0FBZCxDQUFQO0FBS0QsS0FOWSxDQUFiO0FBUUEsV0FBTyxZQUFZO0FBQ2pCYSxVQUFJLENBQUNyQixPQUFMLENBQWEsVUFBVU0sR0FBVixFQUFlO0FBQzFCQSxXQUFHLENBQUNTLFdBQUo7QUFDRCxPQUZEO0FBR0QsS0FKRDtBQUtELEdBZE0sQ0FBUDtBQWVEO0FBRUQ7O0FBQ08sU0FBU1EsSUFBVCxDQUFjOUIsR0FBZCxFQUFtQitCLENBQW5CLEVBQXNCO0FBQzNCLE1BQUlDLEtBQUssR0FBRyxDQUFaO0FBQ0EsU0FBT2hDLEdBQUcsQ0FBQ2tCLE1BQUosQ0FBVyxZQUFZO0FBQzVCLE1BQUVjLEtBQUY7QUFDQSxXQUFPQSxLQUFLLEdBQUdELENBQWY7QUFDRCxHQUhNLENBQVA7QUFJRCIsImZpbGUiOiIuL3NyYy9saWIvYW5ub3RhdGlvbi9oeXBvdGhlc2lzL3V0aWwvb2JzZXJ2YWJsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRnVuY3Rpb25zIChha2EuICdvcGVyYXRvcnMnKSBmb3IgZ2VuZXJhdGluZyBhbmQgbWFuaXB1bGF0aW5nIHN0cmVhbXMgb2ZcbiAqIHZhbHVlcyB1c2luZyB0aGUgT2JzZXJ2YWJsZSBBUEkuXG4gKi9cblxuaW1wb3J0IE9ic2VydmFibGUgZnJvbSAnemVuLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JzZXJ2YWJsZSBvZiBldmVudHMgZW1pdHRlZCBieSBhIERPTSBldmVudCBzb3VyY2VcbiAqIChlZy4gYW4gRWxlbWVudCwgRG9jdW1lbnQgb3IgV2luZG93KS5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBzcmMgLSBUaGUgZXZlbnQgc291cmNlLlxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBldmVudE5hbWVzIC0gTGlzdCBvZiBldmVudHMgdG8gc3Vic2NyaWJlIHRvXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaXN0ZW4oc3JjLCBldmVudE5hbWVzKSB7XG4gIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICBjb25zdCBvbk5leHQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIG9ic2VydmVyLm5leHQoZXZlbnQpO1xuICAgIH07XG5cbiAgICBldmVudE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBzcmMuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25OZXh0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBldmVudE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHNyYy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbk5leHQpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogRGVsYXkgZXZlbnRzIGZyb20gYSBzb3VyY2UgT2JzZXJ2YWJsZSBieSBgZGVsYXlgIG1zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsYXkoZGVsYXksIHNyYykge1xuICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKG9icykge1xuICAgIGxldCB0aW1lb3V0cyA9IFtdO1xuICAgIGNvbnN0IHN1YiA9IHNyYy5zdWJzY3JpYmUoe1xuICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aW1lb3V0cyA9IHRpbWVvdXRzLmZpbHRlcihmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlciAhPT0gdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBvYnMubmV4dCh2YWx1ZSk7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgdGltZW91dHMucHVzaCh0KTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRpbWVvdXRzLmZvckVhY2goY2xlYXJUaW1lb3V0KTtcbiAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIEJ1ZmZlcnMgZXZlbnRzIGZyb20gYSBzb3VyY2UgT2JzZXJ2YWJsZSwgd2FpdGluZyBmb3IgYSBwYXVzZSBvZiBgZGVsYXlgXG4gKiBtcyB3aXRoIG5vIGV2ZW50cyBiZWZvcmUgZW1pdHRpbmcgdGhlIGxhc3QgdmFsdWUgZnJvbSBgc3JjYC5cbiAqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5XG4gKiBAcGFyYW0ge09ic2VydmFibGU8VD59IHNyY1xuICogQHJldHVybiB7T2JzZXJ2YWJsZTxUPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1ZmZlcihkZWxheSwgc3JjKSB7XG4gIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAob2JzKSB7XG4gICAgbGV0IGxhc3RWYWx1ZTtcbiAgICBsZXQgdGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9uTmV4dCgpIHtcbiAgICAgIG9icy5uZXh0KGxhc3RWYWx1ZSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3ViID0gc3JjLnN1YnNjcmliZSh7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQob25OZXh0LCBkZWxheSk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIE1lcmdlcyBtdWx0aXBsZSBzdHJlYW1zIG9mIHZhbHVlcyBpbnRvIGEgc2luZ2xlIHN0cmVhbS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PE9ic2VydmFibGU+fSBzb3VyY2VzXG4gKiBAcmV0dXJuIE9ic2VydmFibGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlKHNvdXJjZXMpIHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChvYnMpIHtcbiAgICBjb25zdCBzdWJzID0gc291cmNlcy5tYXAoZnVuY3Rpb24gKHNyYykge1xuICAgICAgcmV0dXJuIHNyYy5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBvYnMubmV4dCh2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzLmZvckVhY2goZnVuY3Rpb24gKHN1Yikge1xuICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKiogRHJvcCB0aGUgZmlyc3QgYG5gIGV2ZW50cyBmcm9tIHRoZSBgc3JjYCBPYnNlcnZhYmxlLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRyb3Aoc3JjLCBuKSB7XG4gIGxldCBjb3VudCA9IDA7XG4gIHJldHVybiBzcmMuZmlsdGVyKGZ1bmN0aW9uICgpIHtcbiAgICArK2NvdW50O1xuICAgIHJldHVybiBjb3VudCA+IG47XG4gIH0pO1xufVxuXG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib/annotation/hypothesis/util/observable.js\n");

/***/ }),

/***/ "./src/lib/annotation/selection-listener.js":
/*!**************************************************!*\
  !*** ./src/lib/annotation/selection-listener.js ***!
  \**************************************************/
/*! exports provided: SelectionListener */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SelectionListener\", function() { return SelectionListener; });\n/* harmony import */ var _hypothesis_range_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hypothesis/range-util */ \"./src/lib/annotation/hypothesis/range-util.js\");\n/* harmony import */ var _hypothesis_selections__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hypothesis/selections */ \"./src/lib/annotation/hypothesis/selections.js\");\n\n\nclass SelectionListener {\n  subscribe(onSelection, onClearSelection) {\n    this.selections = Object(_hypothesis_selections__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(document).subscribe({\n      next: range => {\n        if (range) {\n          const {\n            focusRect,\n            isBackwards\n          } = this._getSelectionProps(range);\n\n          onSelection(range, focusRect, isBackwards);\n        } else {\n          onClearSelection();\n        }\n      }\n    });\n  }\n\n  unsubscribe() {\n    this.selections.unsubscribe();\n  }\n  /**\n   *\n   * @returns {{focusRect: (DOMRect|null), isBackwards: boolean}}\n   * @private\n   */\n\n\n  _getSelectionProps() {\n    const selection =\n    /** @type {Selection} */\n    document.getSelection();\n    const isBackwards = _hypothesis_range_util__WEBPACK_IMPORTED_MODULE_0__[\"isSelectionBackwards\"](selection);\n    const focusRect = _hypothesis_range_util__WEBPACK_IMPORTED_MODULE_0__[\"selectionFocusRect\"](selection);\n    return {\n      focusRect,\n      isBackwards\n    };\n  }\n\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2Fubm90YXRpb24vc2VsZWN0aW9uLWxpc3RlbmVyLmpzPzk3M2UiXSwibmFtZXMiOlsiU2VsZWN0aW9uTGlzdGVuZXIiLCJzdWJzY3JpYmUiLCJvblNlbGVjdGlvbiIsIm9uQ2xlYXJTZWxlY3Rpb24iLCJzZWxlY3Rpb25zIiwiZG9jdW1lbnQiLCJuZXh0IiwicmFuZ2UiLCJmb2N1c1JlY3QiLCJpc0JhY2t3YXJkcyIsIl9nZXRTZWxlY3Rpb25Qcm9wcyIsInVuc3Vic2NyaWJlIiwic2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VVdGlsIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFTyxNQUFNQSxpQkFBTixDQUF3QjtBQUMzQkMsV0FBUyxDQUFDQyxXQUFELEVBQWNDLGdCQUFkLEVBQWdDO0FBQ3JDLFNBQUtDLFVBQUwsR0FBa0JBLHNFQUFVLENBQUNDLFFBQUQsQ0FBVixDQUFxQkosU0FBckIsQ0FBK0I7QUFDN0NLLFVBQUksRUFBRUMsS0FBSyxJQUFJO0FBQ1gsWUFBSUEsS0FBSixFQUFXO0FBQ1AsZ0JBQU07QUFBRUMscUJBQUY7QUFBYUM7QUFBYixjQUE2QixLQUFLQyxrQkFBTCxDQUF3QkgsS0FBeEIsQ0FBbkM7O0FBQ0FMLHFCQUFXLENBQUNLLEtBQUQsRUFBUUMsU0FBUixFQUFtQkMsV0FBbkIsQ0FBWDtBQUNILFNBSEQsTUFHTztBQUNITiwwQkFBZ0I7QUFDbkI7QUFDSjtBQVI0QyxLQUEvQixDQUFsQjtBQVVIOztBQUVEUSxhQUFXLEdBQUc7QUFDVixTQUFLUCxVQUFMLENBQWdCTyxXQUFoQjtBQUNIO0FBRUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0lELG9CQUFrQixHQUFHO0FBQ2pCLFVBQU1FLFNBQVM7QUFBRztBQUEwQlAsWUFBUSxDQUFDUSxZQUFULEVBQTVDO0FBQ0EsVUFBTUosV0FBVyxHQUFHSywyRUFBQSxDQUErQkYsU0FBL0IsQ0FBcEI7QUFDQSxVQUFNSixTQUFTLEdBQUdNLHlFQUFBLENBQTZCRixTQUE3QixDQUFsQjtBQUNBLFdBQU87QUFBRUosZUFBRjtBQUFhQztBQUFiLEtBQVA7QUFDSDs7QUE1QjBCIiwiZmlsZSI6Ii4vc3JjL2xpYi9hbm5vdGF0aW9uL3NlbGVjdGlvbi1saXN0ZW5lci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHJhbmdlVXRpbCBmcm9tIFwiLi9oeXBvdGhlc2lzL3JhbmdlLXV0aWxcIjtcbmltcG9ydCBzZWxlY3Rpb25zIGZyb20gXCIuL2h5cG90aGVzaXMvc2VsZWN0aW9uc1wiO1xuXG5leHBvcnQgY2xhc3MgU2VsZWN0aW9uTGlzdGVuZXIge1xuICAgIHN1YnNjcmliZShvblNlbGVjdGlvbiwgb25DbGVhclNlbGVjdGlvbikge1xuICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSBzZWxlY3Rpb25zKGRvY3VtZW50KS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgbmV4dDogcmFuZ2UgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGZvY3VzUmVjdCwgaXNCYWNrd2FyZHMgfSA9IHRoaXMuX2dldFNlbGVjdGlvblByb3BzKHJhbmdlKVxuICAgICAgICAgICAgICAgICAgICBvblNlbGVjdGlvbihyYW5nZSwgZm9jdXNSZWN0LCBpc0JhY2t3YXJkcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb25DbGVhclNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9ucy51bnN1YnNjcmliZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHJldHVybnMge3tmb2N1c1JlY3Q6IChET01SZWN0fG51bGwpLCBpc0JhY2t3YXJkczogYm9vbGVhbn19XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0U2VsZWN0aW9uUHJvcHMoKSB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IC8qKiBAdHlwZSB7U2VsZWN0aW9ufSAqLyAoZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCkpO1xuICAgICAgICBjb25zdCBpc0JhY2t3YXJkcyA9IHJhbmdlVXRpbC5pc1NlbGVjdGlvbkJhY2t3YXJkcyhzZWxlY3Rpb24pO1xuICAgICAgICBjb25zdCBmb2N1c1JlY3QgPSByYW5nZVV0aWwuc2VsZWN0aW9uRm9jdXNSZWN0KHNlbGVjdGlvbik7XG4gICAgICAgIHJldHVybiB7IGZvY3VzUmVjdCwgaXNCYWNrd2FyZHMgfTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib/annotation/selection-listener.js\n");

/***/ }),

/***/ "./src/lib/annotation/types/annotation-target.js":
/*!*******************************************************!*\
  !*** ./src/lib/annotation/types/annotation-target.js ***!
  \*******************************************************/
/*! exports provided: AnnotationTarget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AnnotationTarget\", function() { return AnnotationTarget; });\nclass AnnotationTarget {\n  constructor(selectors = [], pageid, styleclass) {\n    this.selector = selectors;\n    this.pageid = pageid;\n    this.styleclass = styleclass;\n  }\n\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2Fubm90YXRpb24vdHlwZXMvYW5ub3RhdGlvbi10YXJnZXQuanM/NzQzZSJdLCJuYW1lcyI6WyJBbm5vdGF0aW9uVGFyZ2V0IiwiY29uc3RydWN0b3IiLCJzZWxlY3RvcnMiLCJwYWdlaWQiLCJzdHlsZWNsYXNzIiwic2VsZWN0b3IiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBTyxNQUFNQSxnQkFBTixDQUF1QjtBQUMxQkMsYUFBVyxDQUFDQyxTQUFTLEdBQUcsRUFBYixFQUFpQkMsTUFBakIsRUFBeUJDLFVBQXpCLEVBQXFDO0FBQzVDLFNBQUtDLFFBQUwsR0FBZ0JILFNBQWhCO0FBQ0EsU0FBS0MsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQkEsVUFBbEI7QUFDSDs7QUFMeUIiLCJmaWxlIjoiLi9zcmMvbGliL2Fubm90YXRpb24vdHlwZXMvYW5ub3RhdGlvbi10YXJnZXQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQW5ub3RhdGlvblRhcmdldCB7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3JzID0gW10sIHBhZ2VpZCwgc3R5bGVjbGFzcykge1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3JzO1xuICAgICAgICB0aGlzLnBhZ2VpZCA9IHBhZ2VpZDtcbiAgICAgICAgdGhpcy5zdHlsZWNsYXNzID0gc3R5bGVjbGFzcztcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib/annotation/types/annotation-target.js\n");

/***/ }),

/***/ "./src/lib/annotation/types/annotation.js":
/*!************************************************!*\
  !*** ./src/lib/annotation/types/annotation.js ***!
  \************************************************/
/*! exports provided: Annotation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Annotation\", function() { return Annotation; });\nclass Annotation {\n  /**\n   * @param {AnnotationTarget[]} target\n   * @param body\n   * @param userid\n   */\n  constructor(userid, target = [], body = []) {\n    this.target = target;\n    this.timecreated = Date.now();\n    this.timemodified = Date.now();\n    this.body = body;\n    this.userid = userid;\n  }\n\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2Fubm90YXRpb24vdHlwZXMvYW5ub3RhdGlvbi5qcz83MTcwIl0sIm5hbWVzIjpbIkFubm90YXRpb24iLCJjb25zdHJ1Y3RvciIsInVzZXJpZCIsInRhcmdldCIsImJvZHkiLCJ0aW1lY3JlYXRlZCIsIkRhdGUiLCJub3ciLCJ0aW1lbW9kaWZpZWQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBTyxNQUFNQSxVQUFOLENBQWlCO0FBQ3BCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsYUFBVyxDQUFDQyxNQUFELEVBQVNDLE1BQU0sR0FBRyxFQUFsQixFQUFzQkMsSUFBSSxHQUFHLEVBQTdCLEVBQWlDO0FBQ3hDLFNBQUtELE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtFLFdBQUwsR0FBbUJDLElBQUksQ0FBQ0MsR0FBTCxFQUFuQjtBQUNBLFNBQUtDLFlBQUwsR0FBb0JGLElBQUksQ0FBQ0MsR0FBTCxFQUFwQjtBQUNBLFNBQUtILElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtGLE1BQUwsR0FBY0EsTUFBZDtBQUNIOztBQVptQiIsImZpbGUiOiIuL3NyYy9saWIvYW5ub3RhdGlvbi90eXBlcy9hbm5vdGF0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEFubm90YXRpb24ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7QW5ub3RhdGlvblRhcmdldFtdfSB0YXJnZXRcbiAgICAgKiBAcGFyYW0gYm9keVxuICAgICAqIEBwYXJhbSB1c2VyaWRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih1c2VyaWQsIHRhcmdldCA9IFtdLCBib2R5ID0gW10pIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMudGltZWNyZWF0ZWQgPSBEYXRlLm5vdygpO1xuICAgICAgICB0aGlzLnRpbWVtb2RpZmllZCA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgICAgIHRoaXMudXNlcmlkID0gdXNlcmlkO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/lib/annotation/types/annotation.js\n");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! exports provided: init */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"init\", function() { return init; });\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"jquery\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _App__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./App */ \"./src/App.js\");\n/* harmony import */ var _lib_Logging__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/Logging */ \"./src/lib/Logging.js\");\n/* harmony import */ var _store_PageStore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./store/PageStore */ \"./src/store/PageStore.js\");\n/* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/utils */ \"./src/util/utils.js\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm.js\");\n/**\n * See also https://github.com/zack24q/vue-navigation/\n *\n * @module     mod/longpage\n * @package    mod_longpage\n * @class      longpage\n * @copyright  2020 Niels Seidel <niels.seidel@fernuni-hagen.de>\n * @license    MIT\n * @since      3.1\n */\n\n\n\n\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default()(function () {\n  jquery__WEBPACK_IMPORTED_MODULE_0___default()('.longpage-footnote button').popover({\n    html: true,\n    trigger: 'focus',\n    content: function () {\n      var content = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).attr(\"data-popover-content\");\n      return jquery__WEBPACK_IMPORTED_MODULE_0___default()(content).children(\".popover-body\").html();\n    }\n  });\n});\nconst init = (courseid, pageid, pagename) => {\n  // We need to overwrite the variable for lazy loading.\n  __webpack_require__.p = M.cfg.wwwroot + '/mod/page/amd/build/';\n\n  try {\n    var utils = new _util_utils__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n    var log = new _lib_Logging__WEBPACK_IMPORTED_MODULE_2__[\"default\"](utils, courseid, {\n      context: 'mod_page',\n      outputType: 1\n    });\n    new _App__WEBPACK_IMPORTED_MODULE_1__[\"default\"](vue__WEBPACK_IMPORTED_MODULE_5__[\"default\"], _store_PageStore__WEBPACK_IMPORTED_MODULE_3__[\"default\"], utils, log, {\n      courseid,\n      pageid,\n      pagename\n    });\n  } catch (e) {\n    /* eslint-disable no-console */\n    console.error(e);\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcz81NmQ3Il0sIm5hbWVzIjpbIiQiLCJwb3BvdmVyIiwiaHRtbCIsInRyaWdnZXIiLCJjb250ZW50IiwiYXR0ciIsImNoaWxkcmVuIiwiaW5pdCIsImNvdXJzZWlkIiwicGFnZWlkIiwicGFnZW5hbWUiLCJfX3dlYnBhY2tfcHVibGljX3BhdGhfXyIsIk0iLCJjZmciLCJ3d3dyb290IiwidXRpbHMiLCJVdGlscyIsImxvZyIsIkxvZyIsImNvbnRleHQiLCJvdXRwdXRUeXBlIiwiQXBwIiwiVnVlIiwiU3RvcmUiLCJlIiwiY29uc29sZSIsImVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBQSw2Q0FBQyxDQUFDLFlBQVc7QUFDVEEsK0NBQUMsQ0FBQywyQkFBRCxDQUFELENBQStCQyxPQUEvQixDQUF1QztBQUNuQ0MsUUFBSSxFQUFFLElBRDZCO0FBRW5DQyxXQUFPLEVBQUUsT0FGMEI7QUFHbkNDLFdBQU8sRUFBRSxZQUFXO0FBQ2hCLFVBQUlBLE9BQU8sR0FBR0osNkNBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUUssSUFBUixDQUFhLHNCQUFiLENBQWQ7QUFDQSxhQUFPTCw2Q0FBQyxDQUFDSSxPQUFELENBQUQsQ0FBV0UsUUFBWCxDQUFvQixlQUFwQixFQUFxQ0osSUFBckMsRUFBUDtBQUNIO0FBTmtDLEdBQXZDO0FBUUgsQ0FUQSxDQUFEO0FBV08sTUFBTUssSUFBSSxHQUFHLENBQUNDLFFBQUQsRUFBV0MsTUFBWCxFQUFtQkMsUUFBbkIsS0FBZ0M7QUFDaEQ7QUFDQUMsdUJBQXVCLEdBQUdDLENBQUMsQ0FBQ0MsR0FBRixDQUFNQyxPQUFOLEdBQWdCLHNCQUExQzs7QUFDQSxNQUFJO0FBQ0EsUUFBSUMsS0FBSyxHQUFHLElBQUlDLG1EQUFKLEVBQVo7QUFDQSxRQUFJQyxHQUFHLEdBQUcsSUFBSUMsb0RBQUosQ0FBUUgsS0FBUixFQUFlUCxRQUFmLEVBQXlCO0FBQy9CVyxhQUFPLEVBQUUsVUFEc0I7QUFFL0JDLGdCQUFVLEVBQUU7QUFGbUIsS0FBekIsQ0FBVjtBQUlBLFFBQUlDLDRDQUFKLENBQVFDLDJDQUFSLEVBQWFDLHdEQUFiLEVBQW9CUixLQUFwQixFQUEyQkUsR0FBM0IsRUFBZ0M7QUFBQ1QsY0FBRDtBQUFXQyxZQUFYO0FBQW1CQztBQUFuQixLQUFoQztBQUNILEdBUEQsQ0FPRSxPQUFPYyxDQUFQLEVBQVU7QUFDUjtBQUNBQyxXQUFPLENBQUNDLEtBQVIsQ0FBY0YsQ0FBZDtBQUNIO0FBQ0osQ0FkTSIsImZpbGUiOiIuL3NyYy9tYWluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTZWUgYWxzbyBodHRwczovL2dpdGh1Yi5jb20vemFjazI0cS92dWUtbmF2aWdhdGlvbi9cbiAqXG4gKiBAbW9kdWxlICAgICBtb2QvbG9uZ3BhZ2VcbiAqIEBwYWNrYWdlICAgIG1vZF9sb25ncGFnZVxuICogQGNsYXNzICAgICAgbG9uZ3BhZ2VcbiAqIEBjb3B5cmlnaHQgIDIwMjAgTmllbHMgU2VpZGVsIDxuaWVscy5zZWlkZWxAZmVybnVuaS1oYWdlbi5kZT5cbiAqIEBsaWNlbnNlICAgIE1JVFxuICogQHNpbmNlICAgICAgMy4xXG4gKi9cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJztcbmltcG9ydCBMb2cgZnJvbSAnLi9saWIvTG9nZ2luZyc7XG5pbXBvcnQgU3RvcmUgZnJvbSAnLi9zdG9yZS9QYWdlU3RvcmUnO1xuaW1wb3J0IFV0aWxzIGZyb20gJy4vdXRpbC91dGlscyc7XG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XG5cbiQoZnVuY3Rpb24oKSB7XG4gICAgJCgnLmxvbmdwYWdlLWZvb3Rub3RlIGJ1dHRvbicpLnBvcG92ZXIoe1xuICAgICAgICBodG1sOiB0cnVlLFxuICAgICAgICB0cmlnZ2VyOiAnZm9jdXMnLFxuICAgICAgICBjb250ZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gJCh0aGlzKS5hdHRyKFwiZGF0YS1wb3BvdmVyLWNvbnRlbnRcIik7XG4gICAgICAgICAgICByZXR1cm4gJChjb250ZW50KS5jaGlsZHJlbihcIi5wb3BvdmVyLWJvZHlcIikuaHRtbCgpO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcblxuZXhwb3J0IGNvbnN0IGluaXQgPSAoY291cnNlaWQsIHBhZ2VpZCwgcGFnZW5hbWUpID0+IHtcbiAgICAvLyBXZSBuZWVkIHRvIG92ZXJ3cml0ZSB0aGUgdmFyaWFibGUgZm9yIGxhenkgbG9hZGluZy5cbiAgICBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyA9IE0uY2ZnLnd3d3Jvb3QgKyAnL21vZC9wYWdlL2FtZC9idWlsZC8nO1xuICAgIHRyeSB7XG4gICAgICAgIHZhciB1dGlscyA9IG5ldyBVdGlscygpO1xuICAgICAgICB2YXIgbG9nID0gbmV3IExvZyh1dGlscywgY291cnNlaWQsIHtcbiAgICAgICAgICAgIGNvbnRleHQ6ICdtb2RfcGFnZScsXG4gICAgICAgICAgICBvdXRwdXRUeXBlOiAxXG4gICAgICAgIH0pO1xuICAgICAgICBuZXcgQXBwKFZ1ZSwgU3RvcmUsIHV0aWxzLCBsb2csIHtjb3Vyc2VpZCwgcGFnZWlkLCBwYWdlbmFtZX0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main.js\n");

/***/ }),

/***/ "./src/store/PageStore.js":
/*!********************************!*\
  !*** ./src/store/PageStore.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Store; });\n/* harmony import */ var core_ajax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core/ajax */ \"core/ajax\");\n/* harmony import */ var core_ajax__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_ajax__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm.js\");\n/* harmony import */ var vuex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vuex */ \"./node_modules/vuex/dist/vuex.esm.js\");\n\n\n\nfunction Store(context) {\n  vue__WEBPACK_IMPORTED_MODULE_1__[\"default\"].use(vuex__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n  this.store = new vuex__WEBPACK_IMPORTED_MODULE_2__[\"default\"].Store({\n    state: {\n      courseid: context.courseid,\n      pageid: context.pageid,\n      pagename: context.pagename,\n      bookmarks: []\n    },\n    getters: {\n      getBookmarks: (state, getters) => {\n        return state.bookmarks;\n      }\n    },\n    mutations: {\n      loadBookmarks(state, bookmark) {\n        state.bookmarks.push(bookmark);\n      },\n\n      addBookmarks(state, bookmark) {\n        console.log(bookmark);\n        state.bookmarks.push(bookmark);\n        core_ajax__WEBPACK_IMPORTED_MODULE_0___default.a.call([{\n          methodname: 'mod_page_addbookmark',\n          args: {\n            data: {\n              title: bookmark.selection,\n              selection: bookmark.selection,\n              target: bookmark.target,\n              section: 'h3',\n              courseid: context.courseid,\n              pageid: context.pageid,\n              creationdate: new Date().getTime(),\n              position: 0,\n              visible: 1\n            }\n          },\n          done: function (res) {\n            console.log(res);\n          },\n          fail: function (e) {\n            console.error('fail_add', e);\n          }\n        }]);\n      },\n\n      removeBookmark(state, id) {\n        state.bookmarks = state.bookmarks.filter(function (b) {\n          return b.id === id ? false : true;\n        });\n        core_ajax__WEBPACK_IMPORTED_MODULE_0___default.a.call([{\n          methodname: 'mod_page_removebookmark',\n          args: {\n            data: {\n              id: id\n            }\n          },\n          done: function (res) {\n            console.log(res);\n          },\n          fail: function (e) {\n            console.error('fail_add', e);\n          }\n        }]);\n      }\n\n    },\n    actions: {\n      loadBookmarks(state) {\n        core_ajax__WEBPACK_IMPORTED_MODULE_0___default.a.call([{\n          methodname: 'mod_page_getbookmark',\n          args: {\n            data: {\n              courseid: context.courseid,\n              pageid: context.pageid\n            }\n          },\n          done: function (bookmarks) {\n            try {\n              let json = JSON.parse(bookmarks.response);\n\n              for (let i in json) {\n                state.commit('loadBookmarks', json[i]);\n              }\n            } catch (e) {\n              console.log(e);\n            }\n          },\n          fail: function (e) {\n            console.error('fail', e);\n          }\n        }]);\n      }\n\n    }\n  });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/store/PageStore.js\n");

/***/ }),

/***/ "./src/styles/main.scss":
/*!******************************!*\
  !*** ./src/styles/main.scss ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./main.scss */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/styles/main.scss\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(/*! ../../node_modules/vue-style-loader/lib/addStylesClient.js */ \"./node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"0f4fcf0a\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL21haW4uc2Nzcz9iMDQ4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLDhNQUFvRztBQUMxSCw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLDBIQUE2RDtBQUMvRSwrQ0FBK0M7QUFDL0M7QUFDQSxHQUFHLEtBQVUsRUFBRSIsImZpbGUiOiIuL3NyYy9zdHlsZXMvbWFpbi5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uc2Nzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIwZjRmY2YwYVwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uc2Nzc1wiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/styles/main.scss\n");

/***/ }),

/***/ "./src/util/style.js":
/*!***************************!*\
  !*** ./src/util/style.js ***!
  \***************************/
/*! exports provided: toPx, toNumber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toPx\", function() { return toPx; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toNumber\", function() { return toNumber; });\nconst toPx = number => `${number}px`;\nconst toNumber = px => Number(px.match(/^\\d+/)[0]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC9zdHlsZS5qcz8zNDQ5Il0sIm5hbWVzIjpbInRvUHgiLCJudW1iZXIiLCJ0b051bWJlciIsInB4IiwiTnVtYmVyIiwibWF0Y2giXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFPLE1BQU1BLElBQUksR0FBR0MsTUFBTSxJQUFLLEdBQUVBLE1BQU8sSUFBakM7QUFDQSxNQUFNQyxRQUFRLEdBQUdDLEVBQUUsSUFBSUMsTUFBTSxDQUFDRCxFQUFFLENBQUNFLEtBQUgsQ0FBUyxNQUFULEVBQWlCLENBQWpCLENBQUQsQ0FBN0IiLCJmaWxlIjoiLi9zcmMvdXRpbC9zdHlsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB0b1B4ID0gbnVtYmVyID0+IGAke251bWJlcn1weGA7XG5leHBvcnQgY29uc3QgdG9OdW1iZXIgPSBweCA9PiBOdW1iZXIocHgubWF0Y2goL15cXGQrLylbMF0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/util/style.js\n");

/***/ }),

/***/ "./src/util/utils.js":
/*!***************************!*\
  !*** ./src/util/utils.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_ajax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core/ajax */ \"core/ajax\");\n/* harmony import */ var core_ajax__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_ajax__WEBPACK_IMPORTED_MODULE_0__);\n/* eslint-disable valid-jsdoc, no-console, max-len */\n\n/**\n * Javascript utils for the Moodle videodatabase\n *\n * @module     mod_videodatabase/videodatabase\n * @package    mod_videodatabase\n * @class      Utils\n * @copyright  2018 Niels Seidel, info@social-machinables.com\n * @license    MIT\n * @since      3.1\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function () {\n  /**\n   * Obtains data from a moodle webservice\n   * @param {*} ws: Name of the web service\n   * @param {*} params: Parameter to transfer\n   * @param {*} cb: Callback function\n   */\n  this.get_ws = function (ws, params, cb, external) {\n    external = external === undefined ? false : external;\n    core_ajax__WEBPACK_IMPORTED_MODULE_0___default.a.call([{\n      methodname: external ? ws : 'mod_page_' + ws,\n      args: params,\n      done: function (msg) {\n        if (msg.hasOwnProperty('exception')) {\n          console.error('Die Prozedur ' + ws + ' konnte nicht als Webservice geladen werden.<br>');\n          console.error(JSON.stringify(msg));\n        } else {\n          cb(msg);\n        }\n      },\n      fail: function (e) {\n        console.log(params, ws);\n        console.error(e);\n      }\n    }]);\n  };\n  /*\n          this.germanFormatters = d3.timeFormatDefaultLocale({\n              \"decimal\": \",\",\n              \"thousands\": \".\",\n              \"grouping\": [3],\n              \"currency\": [\"€\", \"\"],\n              \"dateTime\": \"%a %b %e %X %Y\",\n              \"date\": \"%d.%m.%Y\",\n              \"time\": \"%H:%M:%S\",\n              \"periods\": [\"AM\", \"PM\"],\n              \"days\": [\"Sonntag\", \"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \"Freitag\", \"Samstag\"],\n              \"shortDays\": [\"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\"],\n              \"months\": [\"Jänner\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\"],\n              \"shortMonths\": [\"Jän\", \"Feb\", \"Mär\", \"Apr\", \"Mai\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Okt\", \"Nov\", \"Dez\"]\n          });\n           this.customTimeFormat = function (date) {//this.germanFormatters.timeFormat.multi([\n              if (date.getMinutes()) return d3.timeFormat(\"%I:%M\")(date);\n              if (date.getMilliseconds()) return d3.timeFormat(\".%L\")(date);\n              if (date.getSeconds()) return d3.timeFormat(\":%S\")(date);\n              if (date.getHours()) return d3.timeFormat(\"%Hh\")(date);\n              if (date.getDay()) return d3.timeFormat(\"%a %e.%m.\")(date); // Mo 8.02.\n              if (date.getMonth()) return d3.timeFormat(\"%B\")(date); //7.12.\n              return d3.getDate(\"%Y\");\n          };\n  */\n\n\n  this.numberToWord = function (num, postfix) {\n    postfix = postfix === undefined ? '' : postfix;\n\n    switch (num) {\n      case 0:\n        return 'kein' + postfix;\n\n      case 1:\n        return 'ein' + postfix;\n\n      case 2:\n        return 'zwei' + postfix;\n\n      case 3:\n        return 'drei' + postfix;\n\n      case 4:\n        return 'vier' + postfix;\n\n      case 5:\n        return 'fünf' + postfix;\n\n      case 6:\n        return 'sechs' + postfix;\n\n      case 7:\n        return 'sieben' + postfix;\n\n      case 8:\n        return 'acht' + postfix;\n\n      case 9:\n        return 'neun' + postfix;\n\n      case 10:\n        return 'zehn' + postfix;\n\n      case 11:\n        return 'elf' + postfix;\n\n      default:\n        return num + ' ' + postfix;\n    }\n  };\n\n  this.mergeObjects = function (obj1, obj2) {\n    var obj3 = {};\n\n    for (var attrname in obj1) {\n      obj3[attrname] = obj1[attrname];\n    }\n\n    for (var attrname in obj2) {\n      obj3[attrname] = obj2[attrname];\n    }\n\n    return obj3;\n  };\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC91dGlscy5qcz84ZTE3Il0sIm5hbWVzIjpbImdldF93cyIsIndzIiwicGFyYW1zIiwiY2IiLCJleHRlcm5hbCIsInVuZGVmaW5lZCIsImFqYXgiLCJjYWxsIiwibWV0aG9kbmFtZSIsImFyZ3MiLCJkb25lIiwibXNnIiwiaGFzT3duUHJvcGVydHkiLCJjb25zb2xlIiwiZXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiZmFpbCIsImUiLCJsb2ciLCJudW1iZXJUb1dvcmQiLCJudW0iLCJwb3N0Zml4IiwibWVyZ2VPYmplY3RzIiwib2JqMSIsIm9iajIiLCJvYmozIiwiYXR0cm5hbWUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFZSwyRUFBWTtBQUN2QjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSSxPQUFLQSxNQUFMLEdBQWMsVUFBVUMsRUFBVixFQUFjQyxNQUFkLEVBQXNCQyxFQUF0QixFQUEwQkMsUUFBMUIsRUFBb0M7QUFDOUNBLFlBQVEsR0FBR0EsUUFBUSxLQUFLQyxTQUFiLEdBQXlCLEtBQXpCLEdBQWlDRCxRQUE1QztBQUNBRSxvREFBSSxDQUFDQyxJQUFMLENBQVUsQ0FBQztBQUNQQyxnQkFBVSxFQUFFSixRQUFRLEdBQUdILEVBQUgsR0FBUSxjQUFjQSxFQURuQztBQUVQUSxVQUFJLEVBQUVQLE1BRkM7QUFHUFEsVUFBSSxFQUFFLFVBQVVDLEdBQVYsRUFBZTtBQUNqQixZQUFJQSxHQUFHLENBQUNDLGNBQUosQ0FBbUIsV0FBbkIsQ0FBSixFQUFxQztBQUNqQ0MsaUJBQU8sQ0FBQ0MsS0FBUixDQUFjLGtCQUFrQmIsRUFBbEIsR0FBdUIsa0RBQXJDO0FBQ0FZLGlCQUFPLENBQUNDLEtBQVIsQ0FBY0MsSUFBSSxDQUFDQyxTQUFMLENBQWVMLEdBQWYsQ0FBZDtBQUNILFNBSEQsTUFHTztBQUNIUixZQUFFLENBQUNRLEdBQUQsQ0FBRjtBQUNIO0FBQ0osT0FWTTtBQVdQTSxVQUFJLEVBQUUsVUFBVUMsQ0FBVixFQUFhO0FBQ2ZMLGVBQU8sQ0FBQ00sR0FBUixDQUFZakIsTUFBWixFQUFvQkQsRUFBcEI7QUFDQVksZUFBTyxDQUFDQyxLQUFSLENBQWNJLENBQWQ7QUFDSDtBQWRNLEtBQUQsQ0FBVjtBQWdCSCxHQWxCRDtBQW9CQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUksT0FBS0UsWUFBTCxHQUFvQixVQUFVQyxHQUFWLEVBQWVDLE9BQWYsRUFBd0I7QUFDeENBLFdBQU8sR0FBR0EsT0FBTyxLQUFLakIsU0FBWixHQUF3QixFQUF4QixHQUE2QmlCLE9BQXZDOztBQUNBLFlBQVFELEdBQVI7QUFDSSxXQUFLLENBQUw7QUFBUSxlQUFPLFNBQVNDLE9BQWhCOztBQUNSLFdBQUssQ0FBTDtBQUFRLGVBQU8sUUFBUUEsT0FBZjs7QUFDUixXQUFLLENBQUw7QUFBUSxlQUFPLFNBQVNBLE9BQWhCOztBQUNSLFdBQUssQ0FBTDtBQUFRLGVBQU8sU0FBU0EsT0FBaEI7O0FBQ1IsV0FBSyxDQUFMO0FBQVEsZUFBTyxTQUFTQSxPQUFoQjs7QUFDUixXQUFLLENBQUw7QUFBUSxlQUFPLFNBQVNBLE9BQWhCOztBQUNSLFdBQUssQ0FBTDtBQUFRLGVBQU8sVUFBVUEsT0FBakI7O0FBQ1IsV0FBSyxDQUFMO0FBQVEsZUFBTyxXQUFXQSxPQUFsQjs7QUFDUixXQUFLLENBQUw7QUFBUSxlQUFPLFNBQVNBLE9BQWhCOztBQUNSLFdBQUssQ0FBTDtBQUFRLGVBQU8sU0FBU0EsT0FBaEI7O0FBQ1IsV0FBSyxFQUFMO0FBQVMsZUFBTyxTQUFTQSxPQUFoQjs7QUFDVCxXQUFLLEVBQUw7QUFBUyxlQUFPLFFBQVFBLE9BQWY7O0FBQ1Q7QUFBUyxlQUFPRCxHQUFHLEdBQUcsR0FBTixHQUFZQyxPQUFuQjtBQWJiO0FBZUgsR0FqQkQ7O0FBbUJBLE9BQUtDLFlBQUwsR0FBb0IsVUFBVUMsSUFBVixFQUFnQkMsSUFBaEIsRUFBc0I7QUFDdEMsUUFBSUMsSUFBSSxHQUFHLEVBQVg7O0FBQ0EsU0FBSyxJQUFJQyxRQUFULElBQXFCSCxJQUFyQixFQUEyQjtBQUFFRSxVQUFJLENBQUNDLFFBQUQsQ0FBSixHQUFpQkgsSUFBSSxDQUFDRyxRQUFELENBQXJCO0FBQWtDOztBQUMvRCxTQUFLLElBQUlBLFFBQVQsSUFBcUJGLElBQXJCLEVBQTJCO0FBQUVDLFVBQUksQ0FBQ0MsUUFBRCxDQUFKLEdBQWlCRixJQUFJLENBQUNFLFFBQUQsQ0FBckI7QUFBa0M7O0FBQy9ELFdBQU9ELElBQVA7QUFDSCxHQUxEO0FBTUgsQyIsImZpbGUiOiIuL3NyYy91dGlsL3V0aWxzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MsIG5vLWNvbnNvbGUsIG1heC1sZW4gKi9cbi8qKlxuICogSmF2YXNjcmlwdCB1dGlscyBmb3IgdGhlIE1vb2RsZSB2aWRlb2RhdGFiYXNlXG4gKlxuICogQG1vZHVsZSAgICAgbW9kX3ZpZGVvZGF0YWJhc2UvdmlkZW9kYXRhYmFzZVxuICogQHBhY2thZ2UgICAgbW9kX3ZpZGVvZGF0YWJhc2VcbiAqIEBjbGFzcyAgICAgIFV0aWxzXG4gKiBAY29weXJpZ2h0ICAyMDE4IE5pZWxzIFNlaWRlbCwgaW5mb0Bzb2NpYWwtbWFjaGluYWJsZXMuY29tXG4gKiBAbGljZW5zZSAgICBNSVRcbiAqIEBzaW5jZSAgICAgIDMuMVxuICovXG5cbmltcG9ydCBhamF4IGZyb20gJ2NvcmUvYWpheCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBPYnRhaW5zIGRhdGEgZnJvbSBhIG1vb2RsZSB3ZWJzZXJ2aWNlXG4gICAgICogQHBhcmFtIHsqfSB3czogTmFtZSBvZiB0aGUgd2ViIHNlcnZpY2VcbiAgICAgKiBAcGFyYW0geyp9IHBhcmFtczogUGFyYW1ldGVyIHRvIHRyYW5zZmVyXG4gICAgICogQHBhcmFtIHsqfSBjYjogQ2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKi9cbiAgICB0aGlzLmdldF93cyA9IGZ1bmN0aW9uICh3cywgcGFyYW1zLCBjYiwgZXh0ZXJuYWwpIHtcbiAgICAgICAgZXh0ZXJuYWwgPSBleHRlcm5hbCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBleHRlcm5hbDtcbiAgICAgICAgYWpheC5jYWxsKFt7XG4gICAgICAgICAgICBtZXRob2RuYW1lOiBleHRlcm5hbCA/IHdzIDogJ21vZF9wYWdlXycgKyB3cyxcbiAgICAgICAgICAgIGFyZ3M6IHBhcmFtcyxcbiAgICAgICAgICAgIGRvbmU6IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgICAgICAgICBpZiAobXNnLmhhc093blByb3BlcnR5KCdleGNlcHRpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdEaWUgUHJvemVkdXIgJyArIHdzICsgJyBrb25udGUgbmljaHQgYWxzIFdlYnNlcnZpY2UgZ2VsYWRlbiB3ZXJkZW4uPGJyPicpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKEpTT04uc3RyaW5naWZ5KG1zZykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKG1zZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZhaWw6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocGFyYW1zLCB3cyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAgICAgICAgdGhpcy5nZXJtYW5Gb3JtYXR0ZXJzID0gZDMudGltZUZvcm1hdERlZmF1bHRMb2NhbGUoe1xuICAgICAgICAgICAgICAgIFwiZGVjaW1hbFwiOiBcIixcIixcbiAgICAgICAgICAgICAgICBcInRob3VzYW5kc1wiOiBcIi5cIixcbiAgICAgICAgICAgICAgICBcImdyb3VwaW5nXCI6IFszXSxcbiAgICAgICAgICAgICAgICBcImN1cnJlbmN5XCI6IFtcIuKCrFwiLCBcIlwiXSxcbiAgICAgICAgICAgICAgICBcImRhdGVUaW1lXCI6IFwiJWEgJWIgJWUgJVggJVlcIixcbiAgICAgICAgICAgICAgICBcImRhdGVcIjogXCIlZC4lbS4lWVwiLFxuICAgICAgICAgICAgICAgIFwidGltZVwiOiBcIiVIOiVNOiVTXCIsXG4gICAgICAgICAgICAgICAgXCJwZXJpb2RzXCI6IFtcIkFNXCIsIFwiUE1cIl0sXG4gICAgICAgICAgICAgICAgXCJkYXlzXCI6IFtcIlNvbm50YWdcIiwgXCJNb250YWdcIiwgXCJEaWVuc3RhZ1wiLCBcIk1pdHR3b2NoXCIsIFwiRG9ubmVyc3RhZ1wiLCBcIkZyZWl0YWdcIiwgXCJTYW1zdGFnXCJdLFxuICAgICAgICAgICAgICAgIFwic2hvcnREYXlzXCI6IFtcIlNvXCIsIFwiTW9cIiwgXCJEaVwiLCBcIk1pXCIsIFwiRG9cIiwgXCJGclwiLCBcIlNhXCJdLFxuICAgICAgICAgICAgICAgIFwibW9udGhzXCI6IFtcIkrDpG5uZXJcIiwgXCJGZWJydWFyXCIsIFwiTcOkcnpcIiwgXCJBcHJpbFwiLCBcIk1haVwiLCBcIkp1bmlcIiwgXCJKdWxpXCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2t0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGV6ZW1iZXJcIl0sXG4gICAgICAgICAgICAgICAgXCJzaG9ydE1vbnRoc1wiOiBbXCJKw6RuXCIsIFwiRmViXCIsIFwiTcOkclwiLCBcIkFwclwiLCBcIk1haVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9rdFwiLCBcIk5vdlwiLCBcIkRlelwiXVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuY3VzdG9tVGltZUZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlKSB7Ly90aGlzLmdlcm1hbkZvcm1hdHRlcnMudGltZUZvcm1hdC5tdWx0aShbXG4gICAgICAgICAgICAgICAgaWYgKGRhdGUuZ2V0TWludXRlcygpKSByZXR1cm4gZDMudGltZUZvcm1hdChcIiVJOiVNXCIpKGRhdGUpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRlLmdldE1pbGxpc2Vjb25kcygpKSByZXR1cm4gZDMudGltZUZvcm1hdChcIi4lTFwiKShkYXRlKTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZS5nZXRTZWNvbmRzKCkpIHJldHVybiBkMy50aW1lRm9ybWF0KFwiOiVTXCIpKGRhdGUpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRlLmdldEhvdXJzKCkpIHJldHVybiBkMy50aW1lRm9ybWF0KFwiJUhoXCIpKGRhdGUpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRlLmdldERheSgpKSByZXR1cm4gZDMudGltZUZvcm1hdChcIiVhICVlLiVtLlwiKShkYXRlKTsgLy8gTW8gOC4wMi5cbiAgICAgICAgICAgICAgICBpZiAoZGF0ZS5nZXRNb250aCgpKSByZXR1cm4gZDMudGltZUZvcm1hdChcIiVCXCIpKGRhdGUpOyAvLzcuMTIuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQzLmdldERhdGUoXCIlWVwiKTtcbiAgICAgICAgICAgIH07XG4gICAgKi9cbiAgICB0aGlzLm51bWJlclRvV29yZCA9IGZ1bmN0aW9uIChudW0sIHBvc3RmaXgpIHtcbiAgICAgICAgcG9zdGZpeCA9IHBvc3RmaXggPT09IHVuZGVmaW5lZCA/ICcnIDogcG9zdGZpeDtcbiAgICAgICAgc3dpdGNoIChudW0pIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuICdrZWluJyArIHBvc3RmaXg7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiAnZWluJyArIHBvc3RmaXg7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiAnendlaScgKyBwb3N0Zml4O1xuICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gJ2RyZWknICsgcG9zdGZpeDtcbiAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuICd2aWVyJyArIHBvc3RmaXg7XG4gICAgICAgICAgICBjYXNlIDU6IHJldHVybiAnZsO8bmYnICsgcG9zdGZpeDtcbiAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuICdzZWNocycgKyBwb3N0Zml4O1xuICAgICAgICAgICAgY2FzZSA3OiByZXR1cm4gJ3NpZWJlbicgKyBwb3N0Zml4O1xuICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gJ2FjaHQnICsgcG9zdGZpeDtcbiAgICAgICAgICAgIGNhc2UgOTogcmV0dXJuICduZXVuJyArIHBvc3RmaXg7XG4gICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gJ3plaG4nICsgcG9zdGZpeDtcbiAgICAgICAgICAgIGNhc2UgMTE6IHJldHVybiAnZWxmJyArIHBvc3RmaXg7XG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gbnVtICsgJyAnICsgcG9zdGZpeDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm1lcmdlT2JqZWN0cyA9IGZ1bmN0aW9uIChvYmoxLCBvYmoyKSB7XG4gICAgICAgIHZhciBvYmozID0ge307XG4gICAgICAgIGZvciAodmFyIGF0dHJuYW1lIGluIG9iajEpIHsgb2JqM1thdHRybmFtZV0gPSBvYmoxW2F0dHJuYW1lXTsgfVxuICAgICAgICBmb3IgKHZhciBhdHRybmFtZSBpbiBvYmoyKSB7IG9iajNbYXR0cm5hbWVdID0gb2JqMlthdHRybmFtZV07IH1cbiAgICAgICAgcmV0dXJuIG9iajM7XG4gICAgfTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/util/utils.js\n");

/***/ }),

/***/ "core/ajax":
/*!************************************!*\
  !*** external {"amd":"core/ajax"} ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_core_ajax__;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wiYW1kXCI6XCJjb3JlL2FqYXhcIn0/OTJhMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJjb3JlL2FqYXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfY29yZV9hamF4X187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///core/ajax\n");

/***/ }),

/***/ "jquery":
/*!*********************************!*\
  !*** external {"amd":"jquery"} ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_jquery__;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wiYW1kXCI6XCJqcXVlcnlcIn0/MTg1NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJqcXVlcnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfanF1ZXJ5X187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///jquery\n");

/***/ })

/******/ })});;